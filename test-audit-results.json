{
  "summary": {
    "total": 214,
    "needsWork": 177,
    "highPriority": 165,
    "mediumPriority": 12,
    "lowPriority": 0
  },
  "elements": {
    ".idea": {
      "element": ".idea",
      "component": {
        "error": "Main JS file not found: /home/bto108a/Documents/git/haxtheweb/webcomponents/elements/.idea/.idea.js",
        "properties": [],
        "slots": [],
        "events": [],
        "methods": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    ".vscode": {
      "element": ".vscode",
      "component": {
        "error": "Main JS file not found: /home/bto108a/Documents/git/haxtheweb/webcomponents/elements/.vscode/.vscode.js",
        "properties": [],
        "slots": [],
        "events": [],
        "methods": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-behaviors": {
      "element": "a11y-behaviors",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "getTextContrastColor",
          "if",
          "computeTextPropContrast"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": false,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": ""
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_A11Y_TESTS",
          "message": "Add accessibility tests using await expect(element).shadowDom.to.be.accessible()"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-carousel": {
      "element": "a11y-carousel",
      "component": {
        "properties": [
          {
            "name": "nextLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"next\""
          },
          {
            "name": "noPrevNext",
            "type": "Boolean",
            "attribute": "no-prev-next",
            "config": "type: Boolean,\n        attribute: \"no-prev-next\",",
            "defaultValue": "false"
          },
          {
            "name": "noButtons",
            "type": "Boolean",
            "attribute": "no-buttons",
            "config": "type: Boolean,\n        attribute: \"no-buttons\",",
            "defaultValue": "false"
          },
          {
            "name": "prevLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"previous\""
          }
        ],
        "slots": [
          "above",
          "img",
          "default"
        ],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "RadioBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": true,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../a11y-carousel.js\";\ndescribe(\"a11y-carousel test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <a11y-carousel id=\"demo1\" no-prev-next>\n        <figure id=\"figure-1\">\n          <img src=\"//placekitten.com/400/200\" alt=\"Random Kitten, 400 X 200\" />\n          <figcaption>Item 1</figcaption>\n        </figure>\n        <figure id=\"figure-2\">\n          <img src=\"//placekitten.com/300/100\" alt=\"Random Kitten, 300 X 100\" />\n          <figcaption>Item 2</figcaption>\n        </figure>\n        <figure id=\"figure-3\">\n          <img src=\"//placekitten.com/400/300\" alt=\"Random Kitten, 400 X 300\" />\n          <figcaption>Item 3</figcaption>\n        </figure>\n      </a11y-carousel>\n    `);\n  });\n\n  it(\"basic setup\", async () => {\n    expect(element).to.exist;\n    expect(element.noPrevNext).to.equal(true);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n\n  describe(\"Property type validation with accessibility\", () => {\n    let testElement;\n\n    beforeEach(async () => {\n      testElement = await fixture(html`\n        <a11y-carousel>\n          <figure id=\"test-figure-1\">\n            <img src=\"//placekitten.com/200/200\" alt=\"Test Image 1\" />\n            <figcaption>Test Image 1</figcaption>\n          </figure>\n          <figure id=\"test-figure-2\">\n            <img src=\"//placekitten.com/300/200\" alt=\"Test Image 2\" />\n            <figcaption>Test Image 2</figcaption>\n          </figure>\n        </a11y-carousel>\n      `);\n      await testElement.updateComplete;\n    });\n\n    describe(\"nextLabel property\", () => {\n      it(\"should accept valid string values and maintain accessibility\", async () => {\n        testElement.nextLabel = \"Forward\";\n        await testElement.updateComplete;\n        expect(testElement.nextLabel).to.equal(\"Forward\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.nextLabel = \"Next Item\";\n        await testElement.updateComplete;\n        expect(testElement.nextLabel).to.equal(\"Next Item\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        // Note: Empty string labels can cause accessibility issues\n        testElement.nextLabel = \"\";\n        await testElement.updateComplete;\n        expect(testElement.nextLabel).to.equal(\"\");\n        // Skip accessibility test for empty labels as they cause violations\n      });\n\n      it(\"should accept non-string values but maintain type in JavaScript\", async () => {\n        testElement.nextLabel = 123;\n        await testElement.updateComplete;\n        expect(testElement.nextLabel).to.equal(123);\n        // Skip accessibility test for numeric values - they render as strings but may not be ideal\n\n        testElement.nextLabel = true;\n        await testElement.updateComplete;\n        expect(testElement.nextLabel).to.equal(true);\n        // Skip accessibility test for boolean values\n\n        testElement.nextLabel = null;\n        await testElement.updateComplete;\n        expect(testElement.nextLabel).to.equal(null);\n        // Skip accessibility test for null values as they cause empty title violations\n      });\n\n      it(\"should have correct default value\", () => {\n        expect(testElement.nextLabel).to.equal(\"next\");\n      });\n    });\n\n    describe(\"prevLabel property\", () => {\n      it(\"should accept valid string values and maintain accessibility\", async () => {\n        testElement.prevLabel = \"Back\";\n        await testElement.updateComplete;\n        expect(testElement.prevLabel).to.equal(\"Back\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.prevLabel = \"Previous Item\";\n        await testElement.updateComplete;\n        expect(testElement.prevLabel).to.equal(\"Previous Item\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.prevLabel = \"\";\n        await testElement.updateComplete;\n        expect(testElement.prevLabel).to.equal(\"\");\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should accept non-string values but maintain type in JavaScript\", async () => {\n        testElement.prevLabel = 456;\n        await testElement.updateComplete;\n        expect(testElement.prevLabel).to.equal(456);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.prevLabel = false;\n        await testElement.updateComplete;\n        expect(testElement.prevLabel).to.equal(false);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.prevLabel = undefined;\n        await testElement.updateComplete;\n        expect(testElement.prevLabel).to.equal(undefined);\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should have correct default value\", () => {\n        expect(testElement.prevLabel).to.equal(\"previous\");\n      });\n    });\n\n    describe(\"noPrevNext property\", () => {\n      it(\"should accept boolean values and maintain accessibility\", async () => {\n        testElement.noPrevNext = true;\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(true);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = false;\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(false);\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should accept non-boolean values but maintain type in JavaScript\", async () => {\n        testElement.noPrevNext = 1;\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(1);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = \"true\";\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(\"true\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = \"any string\";\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(\"any string\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = {};\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.deep.equal({});\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should accept falsy values and maintain accessibility\", async () => {\n        testElement.noPrevNext = 0;\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(0);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = \"\";\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(\"\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = null;\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(null);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noPrevNext = undefined;\n        await testElement.updateComplete;\n        expect(testElement.noPrevNext).to.equal(undefined);\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should have correct default value\", () => {\n        expect(testElement.noPrevNext).to.equal(false);\n      });\n    });\n\n    describe(\"noButtons property\", () => {\n      it(\"should accept boolean values and maintain accessibility\", async () => {\n        testElement.noButtons = true;\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(true);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = false;\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(false);\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should accept non-boolean values but maintain type in JavaScript\", async () => {\n        testElement.noButtons = 42;\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(42);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = \"false\";\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(\"false\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = [];\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.deep.equal([]);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = { test: true };\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.deep.equal({ test: true });\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should accept falsy values and maintain accessibility\", async () => {\n        testElement.noButtons = 0;\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(0);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = \"\";\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(\"\");\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = null;\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(null);\n        await expect(testElement).shadowDom.to.be.accessible();\n\n        testElement.noButtons = undefined;\n        await testElement.updateComplete;\n        expect(testElement.noButtons).to.equal(undefined);\n        await expect(testElement).shadowDom.to.be.accessible();\n      });\n\n      it(\"should have correct default value\", () => {\n        expect(testElement.noButtons).to.equal(false);\n      });\n    });\n  });\n\n  describe(\"Attribute to property mapping\", () => {\n    it(\"should set noPrevNext property from no-prev-next attribute\", async () => {\n      const testElement = await fixture(html`\n        <a11y-carousel no-prev-next>\n          <figure id=\"test-figure-1\">\n            <img src=\"//placekitten.com/200/200\" alt=\"Test Image 1\" />\n            <figcaption>Test Image 1</figcaption>\n          </figure>\n        </a11y-carousel>\n      `);\n      expect(testElement.noPrevNext).to.equal(true);\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should set noButtons property from no-buttons attribute\", async () => {\n      const testElement = await fixture(html`\n        <a11y-carousel no-buttons>\n          <figure id=\"test-figure-1\">\n            <img src=\"//placekitten.com/200/200\" alt=\"Test Image 1\" />\n            <figcaption>Test Image 1</figcaption>\n          </figure>\n        </a11y-carousel>\n      `);\n      expect(testElement.noButtons).to.equal(true);\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n  });\n\n  describe(\"Accessibility scenarios with different property combinations\", () => {\n    it(\"should remain accessible with no navigation buttons\", async () => {\n      const testElement = await fixture(html`\n        <a11y-carousel no-prev-next no-buttons>\n          <figure id=\"fig-1\">\n            <img src=\"//placekitten.com/200/200\" alt=\"Image 1\" />\n            <figcaption>Image 1</figcaption>\n          </figure>\n          <figure id=\"fig-2\">\n            <img src=\"//placekitten.com/300/200\" alt=\"Image 2\" />\n            <figcaption>Image 2</figcaption>\n          </figure>\n        </a11y-carousel>\n      `);\n      await testElement.updateComplete;\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should remain accessible with custom labels via properties\", async () => {\n      const testElement = await fixture(html`\n        <a11y-carousel>\n          <figure id=\"fig-1\">\n            <img src=\"//placekitten.com/200/200\" alt=\"Image 1\" />\n            <figcaption>Image 1</figcaption>\n          </figure>\n          <figure id=\"fig-2\">\n            <img src=\"//placekitten.com/300/200\" alt=\"Image 2\" />\n            <figcaption>Image 2</figcaption>\n          </figure>\n        </a11y-carousel>\n      `);\n      // Set properties programmatically since attributes don't map to properties automatically\n      testElement.nextLabel = \"Go Forward\";\n      testElement.prevLabel = \"Go Back\";\n      await testElement.updateComplete;\n      expect(testElement.nextLabel).to.equal(\"Go Forward\");\n      expect(testElement.prevLabel).to.equal(\"Go Back\");\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should handle edge case of programmatically set empty labels\", async () => {\n      const testElement = await fixture(html`\n        <a11y-carousel>\n          <figure id=\"fig-1\">\n            <img src=\"//placekitten.com/200/200\" alt=\"Image 1\" />\n            <figcaption>Image 1</figcaption>\n          </figure>\n          <figure id=\"fig-2\">\n            <img src=\"//placekitten.com/300/200\" alt=\"Image 2\" />\n            <figcaption>Image 2</figcaption>\n          </figure>\n        </a11y-carousel>\n      `);\n\n      // Set empty labels programmatically\n      testElement.nextLabel = \"\";\n      testElement.prevLabel = \"\";\n      await testElement.updateComplete;\n      expect(testElement.nextLabel).to.equal(\"\");\n      expect(testElement.prevLabel).to.equal(\"\");\n\n      // Note: Empty labels might cause accessibility warnings, but component should still function\n      // Skip accessibility test for empty labels as they cause violations\n    });\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: above, img, default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "a11y-collapse": {
      "element": "a11y-collapse",
      "component": {
        "properties": [
          {
            "name": "headingButton",
            "type": "Boolean",
            "attribute": "heading-button",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"heading-button\",",
            "defaultValue": "false"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "hidden",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "expanded",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"icons:expand-more\""
          },
          {
            "name": "iconExpanded",
            "type": "String",
            "attribute": "icon-expanded",
            "config": "type: String,\n        attribute: \"icon-expanded\","
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"expand\""
          },
          {
            "name": "heading",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "labelExpanded",
            "type": "String",
            "attribute": "label-expanded",
            "config": "type: String,\n        attribute: \"label-expanded\","
          },
          {
            "name": "tooltip",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"expand\""
          },
          {
            "name": "tooltipExpanded",
            "type": "String",
            "attribute": "tooltip-expanded",
            "config": "type: String,\n        attribute: \"tooltip-expanded\","
          },
          {
            "name": "accordion",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "content",
          "default"
        ],
        "events": [
          "a11y-collapse-attached",
          "a11y-collapse-detached",
          "toggle",
          "a11y-collapse-toggle",
          "expand",
          "collapse",
          "a11y-collapse-click"
        ],
        "methods": [
          "collapse",
          "toggle",
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": true,
        "hasAttributeTests": true,
        "hasSlotTests": true,
        "hasEventTests": true,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../a11y-collapse.js\";\n\ndescribe(\"a11y-collapse test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <a11y-collapse title=\"test-title\">\n        <div slot=\"heading\">Test Heading</div>\n        <div>Test content</div>\n      </a11y-collapse>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n\n  describe(\"Property type validation with accessibility (Lit-aware)\", () => {\n    let testElement;\n\n    beforeEach(async () => {\n      testElement = await fixture(html`\n        <a11y-collapse>\n          <div slot=\"heading\">Test Heading</div>\n          <div>Test content to expand/collapse</div>\n        </a11y-collapse>\n      `);\n      await testElement.updateComplete;\n    });\n\n    describe(\"Boolean properties with reflect behavior\", () => {\n      describe(\"headingButton property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.headingButton).to.equal(false);\n        });\n\n        it(\"should accept boolean values and maintain accessibility\", async () => {\n          testElement.headingButton = true;\n          await testElement.updateComplete;\n          expect(testElement.headingButton).to.equal(true);\n          expect(testElement.hasAttribute(\"heading-button\")).to.be.true;\n          await expect(testElement).shadowDom.to.be.accessible();\n\n          testElement.headingButton = false;\n          await testElement.updateComplete;\n          expect(testElement.headingButton).to.equal(false);\n          expect(testElement.hasAttribute(\"heading-button\")).to.be.false;\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n\n        it(\"should preserve JavaScript types (no automatic conversion)\", async () => {\n          testElement.headingButton = 1;\n          await testElement.updateComplete;\n          expect(testElement.headingButton).to.equal(1);\n\n          testElement.headingButton = \"true\";\n          await testElement.updateComplete;\n          expect(testElement.headingButton).to.equal(\"true\");\n\n          testElement.headingButton = null;\n          await testElement.updateComplete;\n          expect(testElement.headingButton).to.equal(null);\n        });\n      });\n\n      describe(\"disabled property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.disabled).to.equal(false);\n        });\n\n        it(\"should reflect to attribute and maintain accessibility\", async () => {\n          testElement.disabled = true;\n          await testElement.updateComplete;\n          expect(testElement.disabled).to.equal(true);\n          expect(testElement.hasAttribute(\"disabled\")).to.be.true;\n          await expect(testElement).shadowDom.to.be.accessible();\n\n          testElement.disabled = false;\n          await testElement.updateComplete;\n          expect(testElement.disabled).to.equal(false);\n          expect(testElement.hasAttribute(\"disabled\")).to.be.false;\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"expanded property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.expanded).to.equal(false);\n        });\n\n        it(\"should reflect to attribute and maintain accessibility\", async () => {\n          testElement.expanded = true;\n          await testElement.updateComplete;\n          expect(testElement.expanded).to.equal(true);\n          expect(testElement.hasAttribute(\"expanded\")).to.be.true;\n          await expect(testElement).shadowDom.to.be.accessible();\n\n          testElement.expanded = false;\n          await testElement.updateComplete;\n          expect(testElement.expanded).to.equal(false);\n          expect(testElement.hasAttribute(\"expanded\")).to.be.false;\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"hidden property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.hidden).to.equal(false);\n        });\n\n        it(\"should reflect to attribute\", async () => {\n          testElement.hidden = true;\n          await testElement.updateComplete;\n          expect(testElement.hidden).to.equal(true);\n          expect(testElement.hasAttribute(\"hidden\")).to.be.true;\n\n          testElement.hidden = false;\n          await testElement.updateComplete;\n          expect(testElement.hidden).to.equal(false);\n          expect(testElement.hasAttribute(\"hidden\")).to.be.false;\n        });\n      });\n\n      describe(\"accordion property (deprecated)\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.accordion).to.equal(false);\n        });\n\n        it(\"should reflect to attribute and maintain accessibility\", async () => {\n          testElement.accordion = true;\n          await testElement.updateComplete;\n          expect(testElement.accordion).to.equal(true);\n          expect(testElement.hasAttribute(\"accordion\")).to.be.true;\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n    });\n\n    describe(\"String properties\", () => {\n      describe(\"icon property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.icon).to.equal(\"icons:expand-more\");\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.icon = \"icons:keyboard-arrow-down\";\n          await testElement.updateComplete;\n          expect(testElement.icon).to.equal(\"icons:keyboard-arrow-down\");\n          await expect(testElement).shadowDom.to.be.accessible();\n\n          testElement.icon = \"\";\n          await testElement.updateComplete;\n          expect(testElement.icon).to.equal(\"\");\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n\n        it(\"should preserve JavaScript types\", async () => {\n          testElement.icon = 123;\n          await testElement.updateComplete;\n          expect(testElement.icon).to.equal(123);\n\n          testElement.icon = null;\n          await testElement.updateComplete;\n          expect(testElement.icon).to.equal(null);\n        });\n      });\n\n      describe(\"label property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.label).to.equal(\"expand\");\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.label = \"Show details\";\n          await testElement.updateComplete;\n          expect(testElement.label).to.equal(\"Show details\");\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"heading property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.heading).to.equal(null);\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.heading = \"Section Title\";\n          await testElement.updateComplete;\n          expect(testElement.heading).to.equal(\"Section Title\");\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"tooltip property\", () => {\n        it(\"should have correct default value\", () => {\n          expect(testElement.tooltip).to.equal(\"expand\");\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.tooltip = \"Click to expand section\";\n          await testElement.updateComplete;\n          expect(testElement.tooltip).to.equal(\"Click to expand section\");\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"iconExpanded property (with attribute mapping)\", () => {\n        it(\"should have no default value\", () => {\n          expect(testElement.iconExpanded).to.be.undefined;\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.iconExpanded = \"icons:expand-less\";\n          await testElement.updateComplete;\n          expect(testElement.iconExpanded).to.equal(\"icons:expand-less\");\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"labelExpanded property (with attribute mapping)\", () => {\n        it(\"should have no default value\", () => {\n          expect(testElement.labelExpanded).to.be.undefined;\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.labelExpanded = \"Hide details\";\n          await testElement.updateComplete;\n          expect(testElement.labelExpanded).to.equal(\"Hide details\");\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n\n      describe(\"tooltipExpanded property (with attribute mapping)\", () => {\n        it(\"should have no default value\", () => {\n          expect(testElement.tooltipExpanded).to.be.undefined;\n        });\n\n        it(\"should accept string values and maintain accessibility\", async () => {\n          testElement.tooltipExpanded = \"Click to collapse section\";\n          await testElement.updateComplete;\n          expect(testElement.tooltipExpanded).to.equal(\n            \"Click to collapse section\",\n          );\n          await expect(testElement).shadowDom.to.be.accessible();\n        });\n      });\n    });\n  });\n\n  describe(\"Attribute to property mapping\", () => {\n    it(\"should map heading-button attribute to headingButton property\", async () => {\n      const testElement = await fixture(html`\n        <a11y-collapse heading-button>\n          <div slot=\"heading\">Test</div>\n          <div>Content</div>\n        </a11y-collapse>\n      `);\n      expect(testElement.headingButton).to.equal(true);\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should map icon-expanded attribute to iconExpanded property\", async () => {\n      const testElement = await fixture(html`\n        <a11y-collapse icon-expanded=\"icons:expand-less\">\n          <div slot=\"heading\">Test</div>\n          <div>Content</div>\n        </a11y-collapse>\n      `);\n      expect(testElement.iconExpanded).to.equal(\"icons:expand-less\");\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should map label-expanded attribute to labelExpanded property\", async () => {\n      const testElement = await fixture(html`\n        <a11y-collapse label-expanded=\"collapse\">\n          <div slot=\"heading\">Test</div>\n          <div>Content</div>\n        </a11y-collapse>\n      `);\n      expect(testElement.labelExpanded).to.equal(\"collapse\");\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should map tooltip-expanded attribute to tooltipExpanded property\", async () => {\n      const testElement = await fixture(html`\n        <a11y-collapse tooltip-expanded=\"Click to hide\">\n          <div slot=\"heading\">Test</div>\n          <div>Content</div>\n        </a11y-collapse>\n      `);\n      expect(testElement.tooltipExpanded).to.equal(\"Click to hide\");\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n  });\n\n  describe(\"Functional behavior with accessibility\", () => {\n    let testElement;\n\n    beforeEach(async () => {\n      testElement = await fixture(html`\n        <a11y-collapse>\n          <div slot=\"heading\">Collapsible Section</div>\n          <div>This content can be expanded or collapsed</div>\n        </a11y-collapse>\n      `);\n      await testElement.updateComplete;\n    });\n\n    it(\"should toggle expanded state and maintain accessibility\", async () => {\n      expect(testElement.expanded).to.equal(false);\n\n      testElement.toggle(true);\n      await testElement.updateComplete;\n      expect(testElement.expanded).to.equal(true);\n      await expect(testElement).shadowDom.to.be.accessible();\n\n      testElement.toggle(false);\n      await testElement.updateComplete;\n      expect(testElement.expanded).to.equal(false);\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should handle disabled state properly\", async () => {\n      testElement.disabled = true;\n      await testElement.updateComplete;\n      expect(testElement.disabled).to.equal(true);\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n\n    it(\"should work with heading-button mode\", async () => {\n      testElement.headingButton = true;\n      await testElement.updateComplete;\n      expect(testElement.headingButton).to.equal(true);\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n  });\n\n  describe(\"Edge cases and property combinations\", () => {\n    it(\"should remain accessible with multiple properties set\", async () => {\n      const testElement = await fixture(html`\n        <a11y-collapse\n          heading-button\n          expanded\n          tooltip=\"Click to collapse\"\n          icon-expanded=\"icons:expand-less\"\n        >\n          <div slot=\"heading\">Advanced Section</div>\n          <div>Complex content with multiple properties configured</div>\n        </a11y-collapse>\n      `);\n      await testElement.updateComplete;\n\n      expect(testElement.headingButton).to.equal(true);\n      expect(testElement.expanded).to.equal(true);\n      // Note: label and tooltip get automatically set to \"collapse\" when expanded=true in _fireToggleEvents\n      expect(testElement.label).to.equal(\"collapse\");\n      expect(testElement.tooltip).to.equal(\"collapse\");\n      expect(testElement.iconExpanded).to.equal(\"icons:expand-less\");\n\n      await expect(testElement).shadowDom.to.be.accessible();\n    });\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"a11y-collapse passes accessibility test\", async () => {\n    const el = await fixture(html` <a11y-collapse></a11y-collapse> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"a11y-collapse passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<a11y-collapse aria-labelledby=\"a11y-collapse\"></a11y-collapse>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"a11y-collapse can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<a11y-collapse .foo=${'bar'}></a11y-collapse>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<a11y-collapse ></a11y-collapse>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<a11y-collapse></a11y-collapse>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<a11y-collapse></a11y-collapse>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "a11y-compare-image": {
      "element": "a11y-compare-image",
      "component": {
        "properties": [
          {
            "name": "activeLayer",
            "type": "Number",
            "attribute": "active-layer",
            "config": "type: Number,\n        attribute: \"active-layer\",\n        reflect: true,"
          },
          {
            "name": "opacity",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Compare images\""
          },
          {
            "name": "position",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,\n        reflect: true,",
            "defaultValue": "50"
          },
          {
            "name": "__lower",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__upper",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__markers",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          }
        ],
        "slots": [
          "heading",
          "description",
          "default",
          "top"
        ],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../a11y-compare-image.js\";\n\ndescribe(\"Image comparison\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <a11y-compare-image opacity>\n        <h2 slot=\"heading\">Matterhorn comparison</h2>\n        <p slot=\"description\">\n          The image on the top or when slider is moved all the way to the right\n          is the\n          <span id=\"cloudy\">Matterhorn on a cloudy day without snow</span>. As\n          you move the slider to the left, the image below it reveals the\n          <span id=\"snowy\">Matterhorn on a clear day with snow</span>.\n        </p>\n        <img\n          slot=\"top\"\n          aria-describedBy=\"cloudy\"\n          .src=\"${new URL(\"../demo/images/Eagle500.jpg\", import.meta.url).href}\"\n          alt=\"Matterhorn without snow\"\n        />\n        <img\n          slot=\"bottom\"\n          aria-describedBy=\"snowy\"\n          .src=\"${new URL(\"../demo/images/Beaver2.jpg\", import.meta.url).href}\"\n          alt=\"Matterhorn with snow\"\n        />\n      </a11y-compare-image>`,\n    );\n  });\n  it(\"slotted in text\", () => {\n    const slot = element.shadowRoot.querySelector('slot[name=\"heading\"]');\n    expect(slot).to.exist;\n    expect(slot.assignedNodes({ flatten: true })[0].textContent).to.equal(\n      \"Matterhorn comparison\",\n    );\n  });\n  it(\"slot for description exists\", () => {\n    const slot = element.shadowRoot.querySelector('slot[name=\"description\"]');\n    expect(slot).to.exist;\n    expect(slot.assignedNodes({ flatten: true })[0]).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: activeLayer, opacity, label, position, __lower, __upper, __markers"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: active-layer"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-details": {
      "element": "a11y-details",
      "component": {
        "properties": [
          {
            "name": "closeText",
            "type": "String",
            "attribute": "close-text",
            "config": "type: String,\n        attribute: \"close-text\",\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "openText",
            "type": "String",
            "attribute": "open-text",
            "config": "type: String,\n        attribute: \"open-text\",\n        reflect: true,",
            "defaultValue": "\"\""
          }
        ],
        "slots": [
          "summary",
          "details",
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "toggleOpen"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../a11y-details.js\";\n\ndescribe(\"a11y-details test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <a11y-details title=\"test-title\"></a11y-details>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"a11y-details passes accessibility test\", async () => {\n    const el = await fixture(html` <a11y-details></a11y-details> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"a11y-details passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<a11y-details aria-labelledby=\"a11y-details\"></a11y-details>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"a11y-details can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<a11y-details .foo=${'bar'}></a11y-details>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<a11y-details ></a11y-details>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<a11y-details></a11y-details>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<a11y-details></a11y-details>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: closeText, openText"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: summary, details, default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-figure": {
      "element": "a11y-figure",
      "component": {
        "properties": [
          {
            "name": "imgSrc",
            "type": "String",
            "attribute": "img-src",
            "config": "type: String,\n        attribute: \"img-src\","
          },
          {
            "name": "imgAlt",
            "type": "String",
            "attribute": "img-alt",
            "config": "type: String,\n        attribute: \"img-alt\","
          },
          {
            "name": "__hasDetail",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../a11y-figure.js\";\n\ndescribe(\"a11y-figure test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <a11y-figure title=\"test-title\"></a11y-figure>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"a11y-figure passes accessibility test\", async () => {\n    const el = await fixture(html` <a11y-figure></a11y-figure> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"a11y-figure passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<a11y-figure aria-labelledby=\"a11y-figure\"></a11y-figure>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"a11y-figure can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<a11y-figure .foo=${'bar'}></a11y-figure>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<a11y-figure ></a11y-figure>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<a11y-figure></a11y-figure>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<a11y-figure></a11y-figure>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: imgSrc, imgAlt, __hasDetail"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-gif-player": {
      "element": "a11y-gif-player",
      "component": {
        "properties": [
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "describedBy",
            "type": "String",
            "attribute": "described-by",
            "config": "attribute: \"described-by\",\n        type: String,"
          },
          {
            "name": "longdesc",
            "type": "String",
            "attribute": "longdesc",
            "config": "type: String,\n        attribute: \"longdesc\","
          },
          {
            "name": "src",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "srcWithoutAnimation",
            "type": "String",
            "attribute": "src-without-animation",
            "config": "type: String,\n        attribute: \"src-without-animation\","
          },
          {
            "name": "__playing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "__gifLoaded",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "play",
          "stop",
          "toggle",
          "toggleAnimation"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../a11y-gif-player.js\";\n\ndescribe(\"a11y-gif-player test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <a11y-gif-player\n        style=\"width: 200px;\"\n        src=\"https://media0.giphy.com/media/zHaPZZvl6cVHi/giphy.gif\"\n        longdesc=\"Pepe Silvia scene from It's Always Sunny in Philadelphia. Jesus, dude, you're still making GIFs. The GIF's don't stop.\"\n        .\n      >\n        <img\n          src=\"https://media0.giphy.com/media/zHaPZZvl6cVHi/480w_s.jpg\"\n          alt=\"It's Always Sunny in Philadelphia GIF Meme\"\n        />\n      </a11y-gif-player>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"a11y-gif-player passes accessibility test\", async () => {\n    const el = await fixture(html` <a11y-gif-player></a11y-gif-player> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"a11y-gif-player passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<a11y-gif-player\n        aria-labelledby=\"a11y-gif-player\"\n      ></a11y-gif-player>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"a11y-gif-player can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<a11y-gif-player .foo=${'bar'}></a11y-gif-player>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<a11y-gif-player ></a11y-gif-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<a11y-gif-player></a11y-gif-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<a11y-gif-player></a11y-gif-player>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: alt, disabled, describedBy, longdesc, src, srcWithoutAnimation, __playing, __gifLoaded"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-media-player": {
      "element": "a11y-media-player",
      "component": {
        "properties": [
          {
            "name": "__playerReady",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "allowConcurrent",
            "type": "Boolean",
            "attribute": "allow-concurrent",
            "config": "attribute: \"allow-concurrent\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "audioOnly",
            "type": "Boolean",
            "attribute": "audio-only",
            "config": "attribute: \"audio-only\",\n        type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "autoplay",
            "type": "Boolean",
            "attribute": "autoplay",
            "config": "attribute: \"autoplay\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "captionsTrack",
            "type": "Object",
            "attribute": "captions-track",
            "config": "attribute: \"captions-track\",\n        type: Object,"
          },
          {
            "name": "cc",
            "type": "Boolean",
            "attribute": "cc",
            "config": "attribute: \"cc\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "currentTime",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "crossorigin",
            "type": "String",
            "attribute": "crossorigin",
            "config": "attribute: \"crossorigin\",\n        type: String,"
          },
          {
            "name": "disablePrintButton",
            "type": "Boolean",
            "attribute": "disable-print-button",
            "config": "attribute: \"disable-print-button\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "disableSearch",
            "type": "Boolean",
            "attribute": "disable-search",
            "config": "attribute: \"disable-search\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "disableScroll",
            "type": "Boolean",
            "attribute": "disable-scroll",
            "config": "attribute: \"disable-scroll\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "disableSeek",
            "type": "Boolean",
            "attribute": "disable-seek",
            "config": "attribute: \"disable-seek\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "darkTranscript",
            "type": "Boolean",
            "attribute": "dark-transcript",
            "config": "attribute: \"dark-transcript\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "disableFullscreen",
            "type": "Boolean",
            "attribute": "disable-fullscreen",
            "config": "attribute: \"disable-fullscreen\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "disableInteractive",
            "type": "Boolean",
            "attribute": "disable-interactive",
            "config": "attribute: \"disable-interactive\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "height",
            "type": "String",
            "attribute": "height",
            "config": "attribute: \"height\",\n        type: String,"
          },
          {
            "name": "hideElapsedTime",
            "type": "Boolean",
            "attribute": "hide-elapsed-time",
            "config": "attribute: \"hide-elapsed-time\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "hideTimestamps",
            "type": "Boolean",
            "attribute": "hide-timestamps",
            "config": "attribute: \"hide-timestamps\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "hideTranscript",
            "type": "Boolean",
            "attribute": "hide-transcript",
            "config": "attribute: \"hide-transcript\",\n        type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "id",
            "type": "String",
            "attribute": "id",
            "config": "attribute: \"id\",\n        type: String,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "lang",
            "type": "String",
            "attribute": "lang",
            "config": "attribute: \"lang\",\n        type: String,",
            "defaultValue": "\"en\""
          },
          {
            "name": "learningMode",
            "type": "Boolean",
            "attribute": "learning-mode",
            "config": "attribute: \"learning-mode\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "linkable",
            "type": "Boolean",
            "attribute": "linkable",
            "config": "attribute: \"linkable\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "localization",
            "type": "Object",
            "attribute": "localization",
            "config": "attribute: \"localization\",\n        type: Object,"
          },
          {
            "name": "loop",
            "type": "Boolean",
            "attribute": "loop",
            "config": "attribute: \"loop\",\n        type: Boolean,"
          },
          {
            "name": "mediaLang",
            "type": "String",
            "attribute": "media-lang",
            "config": "attribute: \"media-lang\",\n        type: String,"
          },
          {
            "name": "mediaTitle",
            "type": "String",
            "attribute": "media-title",
            "config": "attribute: \"media-title\",\n        type: String,"
          },
          {
            "name": "muted",
            "type": "Boolean",
            "attribute": "muted",
            "config": "attribute: \"muted\",\n        type: Boolean,"
          },
          {
            "name": "hideYoutubeLink",
            "type": "Boolean",
            "attribute": "hide-youtube-link",
            "config": "type: Boolean,\n        attribute: \"hide-youtube-link\","
          },
          {
            "name": "playbackRate",
            "type": "Number",
            "attribute": "playback-rate",
            "config": "attribute: \"playback-rate\",\n        type: Number,"
          },
          {
            "name": "preload",
            "type": "String",
            "attribute": "preload",
            "config": "attribute: \"preload\",\n        type: String,\n        reflect: true,"
          },
          {
            "name": "responsiveSize",
            "type": "String",
            "attribute": "responsive-size",
            "config": "attribute: \"responsive-size\",\n        type: String,\n        reflect: true,"
          },
          {
            "name": "search",
            "type": "Object",
            "attribute": "search",
            "config": "attribute: \"search\",\n        type: Object,"
          },
          {
            "name": "standAlone",
            "type": "Boolean",
            "attribute": "stand-alone",
            "config": "attribute: \"stand-alone\",\n        type: Boolean,\n        reflect: true,"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          },
          {
            "name": "sources",
            "type": "Array",
            "attribute": "sources",
            "config": "attribute: \"sources\",\n        type: Array,"
          },
          {
            "name": "stackedLayout",
            "type": "Boolean",
            "attribute": "stacked-layout",
            "config": "attribute: \"stacked-layout\",\n        type: Boolean,"
          },
          {
            "name": "sticky",
            "type": "Boolean",
            "attribute": "sticky",
            "config": "attribute: \"sticky\",\n        type: Boolean,\n        reflect: true,"
          },
          {
            "name": "stickyCorner",
            "type": "String",
            "attribute": "sticky-corner",
            "config": "attribute: \"sticky-corner\",\n        type: String,\n        reflect: true,"
          },
          {
            "name": "thumbnailSrc",
            "type": "String",
            "attribute": "thumbnail-src",
            "config": "attribute: \"thumbnail-src\",\n        type: String,\n        reflect: true,"
          },
          {
            "name": "tracks",
            "type": "Array",
            "attribute": "tracks",
            "config": "attribute: \"tracks\",\n        type: Array,"
          },
          {
            "name": "transcriptTrack",
            "type": "Object",
            "attribute": "transcript-track",
            "config": "attribute: \"transcript-track\",\n        type: Object,"
          },
          {
            "name": "volume",
            "type": "Number",
            "attribute": "volume",
            "config": "attribute: \"volume\",\n        type: Number,"
          },
          {
            "name": "width",
            "type": "String",
            "attribute": "width",
            "config": "attribute: \"width\",\n        type: String,"
          },
          {
            "name": "youtubeId",
            "type": "String",
            "attribute": "youtube-id",
            "config": "attribute: \"youtube-id\",\n        reflect: true,\n        type: String,"
          },
          {
            "name": "__currentTime",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "__captionsOption",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "__cues",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "__loadedTracks",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "__playing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "__preloadedDuration",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "__settingsOpen",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "__transcriptOption",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "mute-changed",
          "transcript-downloaded",
          "transcript-printed",
          "play",
          "a11y-player-playing",
          "pause",
          "stop",
          "restart",
          "backward",
          "forward",
          "seek",
          "playback-rate-changed",
          "volume-changed",
          "cc-toggle",
          "fullscreen-toggle",
          "loop-toggle",
          "play-toggle",
          "muted-toggle",
          "settings-toggled",
          "player-sticky",
          "transcript-toggle",
          "responsive-element",
          "a11y-player"
        ],
        "methods": [
          "if",
          "download",
          "goToYoutube",
          "print",
          "play",
          "pause",
          "stop",
          "restart",
          "rewind",
          "forward",
          "seek",
          "selectCaptionByKeyEvent",
          "selectCaptionByKey",
          "selectTranscriptByKeyEvent",
          "selectTranscriptByKey",
          "getloadedTracks",
          "selectTranscript",
          "setPlaybackRate",
          "setVolume",
          "toggleCC",
          "toggleFullscreen",
          "toggleLoop",
          "togglePlay",
          "toggleMute",
          "toggleSettings",
          "toggleSticky",
          "toggleTranscript"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "FullscreenBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../a11y-media-player.js\";\n\ndescribe(\"a11y-media-player test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<a11y-media-player\n        accent-color=\"red\"\n        youtube-id=\"BKorP55Aqvg\"\n      ></a11y-media-player>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"a11y-media-player passes accessibility test\", async () => {\n    const el = await fixture(html` <a11y-media-player></a11y-media-player> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"a11y-media-player passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<a11y-media-player\n        aria-labelledby=\"a11y-media-player\"\n      ></a11y-media-player>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"a11y-media-player can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<a11y-media-player .foo=${'bar'}></a11y-media-player>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<a11y-media-player ></a11y-media-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<a11y-media-player></a11y-media-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<a11y-media-player></a11y-media-player>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: __playerReady, allowConcurrent, audioOnly, autoplay, captionsTrack, cc, currentTime, crossorigin, disablePrintButton, disableSearch, disableScroll, disableSeek, darkTranscript, disableFullscreen, disableInteractive, height, hideElapsedTime, hideTimestamps, hideTranscript, id, lang, learningMode, linkable, localization, loop, mediaLang, mediaTitle, muted, hideYoutubeLink, playbackRate, preload, responsiveSize, search, standAlone, source, sources, stackedLayout, sticky, stickyCorner, thumbnailSrc, tracks, transcriptTrack, volume, width, youtubeId, __currentTime, __captionsOption, __cues, __loadedTracks, __playing, __preloadedDuration, __settingsOpen, __transcriptOption"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: mute-changed, transcript-downloaded, transcript-printed, play, a11y-player-playing, pause, stop, restart, backward, forward, seek, playback-rate-changed, volume-changed, cc-toggle, fullscreen-toggle, loop-toggle, play-toggle, muted-toggle, settings-toggled, player-sticky, transcript-toggle, responsive-element, a11y-player"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-menu-button": {
      "element": "a11y-menu-button",
      "component": {
        "properties": [
          {
            "name": "currentItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": "disabled",
            "config": "attribute: \"disabled\",\n          type: Boolean,"
          },
          {
            "name": "expanded",
            "type": "Boolean",
            "attribute": "expanded",
            "config": "attribute: \"expanded\",\n          type: Boolean,\n          reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "focused",
            "type": "Boolean",
            "attribute": "focused",
            "config": "attribute: \"focused\",\n          type: Boolean,"
          },
          {
            "name": "hovered",
            "type": "Boolean",
            "attribute": "hovered",
            "config": "attribute: \"hovered\",\n          type: Boolean,"
          },
          {
            "name": "keepOpenOnClick",
            "type": "Boolean",
            "attribute": "keep-open-on-click",
            "config": "attribute: \"keep-open-on-click\",\n          type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "menuItems",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "noOpenOnHover",
            "type": "Boolean",
            "attribute": "no-open-on-hover",
            "config": "attribute: \"no-open-on-hover\",\n          type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "offset",
            "type": "Number",
            "attribute": "offset",
            "config": "type: Number,\n          attribute: \"offset\",",
            "defaultValue": "0"
          },
          {
            "name": "position",
            "type": "String",
            "attribute": "position",
            "config": "type: String,\n          attribute: \"position\",\n          reflect: true,",
            "defaultValue": "\"bottom\""
          },
          {
            "name": "positionAlign",
            "type": "String",
            "attribute": "position-align",
            "config": "type: String,\n          attribute: \"position-align\",\n          reflect: true,",
            "defaultValue": "\"start\""
          }
        ],
        "slots": [],
        "events": [
          "close",
          "open",
          "item-click"
        ],
        "methods": [
          "close",
          "open",
          "focus",
          "focusOn",
          "if",
          "focusByCharacter",
          "for",
          "getItemIndex",
          "getItem",
          "addItem",
          "removeItem",
          "switch"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "A11yMenuButtonBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../lib/a11y-menu-button-item.js\";\nimport \"../a11y-menu-button.js\";\ndescribe(\"a11y-menu-button test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <a11y-menu-button>\n        <span slot=\"button\">Menu</span>\n        <a11y-menu-button-item href=\"#top\">Anchor</a11y-menu-button-item>\n        <a11y-menu-button-item id=\"button\" disabled\n          >Button</a11y-menu-button-item\n        >\n        <a11y-menu-button-item href=\"../\">Link</a11y-menu-button-item>\n      </a11y-menu-button>\n    `);\n  });\n\n  it(\"basic setup for testing the link case\", async () => {\n    // case 1 of the menu item\n    const item = element.querySelector(\n      \"a11y-menu-button a11y-menu-button-item[href='../']\",\n    );\n    expect(element).to.exist;\n    expect(item.shadowRoot.querySelector(\"a[role='menuitem']\")).to.exist;\n    expect(\n      item.shadowRoot.querySelector(\"slot\").assignedNodes({ flatten: true })[0]\n        .textContent,\n    ).to.equal(\"Link\");\n    expect(item.href).to.equal(\"../\");\n  });\n  it(\"basic setup for testing the button case\", async () => {\n    // case 2 with a button\n    const button = element.querySelector(\n      \"a11y-menu-button a11y-menu-button-item#button\",\n    );\n    expect(element).to.exist;\n    expect(button.shadowRoot.querySelector(\"button[role='menuitem']\")).to.exist;\n    expect(\n      button.shadowRoot\n        .querySelector(\"slot\")\n        .assignedNodes({ flatten: true })[0].textContent,\n    ).to.equal(\"Button\");\n    expect(button.disabled).to.equal(true);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: currentItem, disabled, expanded, focused, hovered, keepOpenOnClick, menuItems, noOpenOnHover, offset, position, positionAlign"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: close, open, item-click"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: disabled, expanded, focused, hovered, keep-open-on-click, no-open-on-hover, offset, position, position-align"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-tabs": {
      "element": "a11y-tabs",
      "component": {
        "properties": [
          {
            "name": "ariaLabel",
            "type": "String",
            "attribute": "aria-label",
            "config": "type: String,\n        reflect: true,\n        attribute: \"aria-label\","
          },
          {
            "name": "activeTab",
            "type": "String",
            "attribute": "active-tab",
            "config": "type: String,\n        reflect: true,\n        attribute: \"active-tab\","
          },
          {
            "name": "fullWidth",
            "type": "Boolean",
            "attribute": "full-width",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"full-width\",",
            "defaultValue": "false"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": "disabled",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"disabled\",",
            "defaultValue": "false"
          },
          {
            "name": "hidden",
            "type": "Boolean",
            "attribute": "hidden",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"hidden\",",
            "defaultValue": "false"
          },
          {
            "name": "iconBreakpoint",
            "type": "Number",
            "attribute": "icon-breakpoint",
            "config": "type: Number,\n        attribute: \"icon-breakpoint\","
          },
          {
            "name": "id",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          },
          {
            "name": "layoutBreakpoint",
            "type": "Number",
            "attribute": "layout-breakpoint",
            "config": "type: Number,\n        attribute: \"layout-breakpoint\","
          },
          {
            "name": "responsiveSize",
            "type": "String",
            "attribute": "responsive-size",
            "config": "type: String,\n        reflect: true,\n        attribute: \"responsive-size\","
          },
          {
            "name": "sticky",
            "type": "Boolean",
            "attribute": "sticky",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"sticky\","
          },
          {
            "name": "__tabs",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "__tabButtons",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "__tabFocus",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "0"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "a11y-tabs-active-changed"
        ],
        "methods": [
          "if",
          "selectTab",
          "updateTabs"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "ResponsiveUtilityBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../a11y-tabs.js\";\n\ndescribe(\"a11y-tabs test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <a11y-tabs title=\"test-title\"></a11y-tabs> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"a11y-tabs passes accessibility test\", async () => {\n    const el = await fixture(html` <a11y-tabs></a11y-tabs> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"a11y-tabs passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<a11y-tabs aria-labelledby=\"a11y-tabs\"></a11y-tabs>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"a11y-tabs can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<a11y-tabs .foo=${'bar'}></a11y-tabs>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<a11y-tabs ></a11y-tabs>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<a11y-tabs></a11y-tabs>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<a11y-tabs></a11y-tabs>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: ariaLabel, activeTab, fullWidth, disabled, hidden, iconBreakpoint, id, layoutBreakpoint, responsiveSize, sticky, __tabs, __tabButtons, __tabFocus"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: a11y-tabs-active-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "a11y-utils": {
      "element": "a11y-utils",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": false,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": ""
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_A11Y_TESTS",
          "message": "Add accessibility tests using await expect(element).shadowDom.to.be.accessible()"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "absolute-position-behavior": {
      "element": "absolute-position-behavior",
      "component": {
        "properties": [
          {
            "name": "allowOverlap",
            "type": "Boolean",
            "attribute": "allow-overlap",
            "config": "type: Boolean,\n          attribute: \"allow-overlap\","
          },
          {
            "name": "auto",
            "type": "Boolean",
            "attribute": "auto",
            "config": "type: Boolean,\n          attribute: \"auto\",",
            "defaultValue": "false"
          },
          {
            "name": "fitToVisibleBounds",
            "type": "Boolean",
            "attribute": "fit-to-visible-bounds",
            "config": "type: Boolean,\n          attribute: \"fit-to-visible-bounds\",",
            "defaultValue": "false"
          },
          {
            "name": "hidden",
            "type": "Boolean",
            "attribute": "hidden",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"hidden\",",
            "defaultValue": "false"
          },
          {
            "name": "for",
            "type": "String",
            "attribute": "for",
            "config": "type: String,\n          attribute: \"for\",\n          reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "offset",
            "type": "Number",
            "attribute": "offset",
            "config": "type: Number,\n          attribute: \"offset\",",
            "defaultValue": "0"
          },
          {
            "name": "sticky",
            "type": "Boolean",
            "attribute": "sticky",
            "config": "type: Boolean,\n          attribute: \"sticky\",\n          reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "position",
            "type": "String",
            "attribute": "position",
            "config": "type: String,\n          attribute: \"position\",\n          reflect: true,",
            "defaultValue": "\"bottom\""
          },
          {
            "name": "positionAlign",
            "type": "String",
            "attribute": "position-align",
            "config": "type: String,\n          attribute: \"position-align\",\n          reflect: true,"
          },
          {
            "name": "justify",
            "type": "Boolean",
            "attribute": "justify",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"justify\","
          },
          {
            "name": "target",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,",
            "defaultValue": "null"
          },
          {
            "name": "__positions",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "setPosition",
          "unsetPosition",
          "updatePosition"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "AbsolutePositionBehaviorClass"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../absolute-position-behavior.js\";\n\ndescribe(\"absolute-position-behavior test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <absolute-position-behavior\n        title=\"test-title\"\n      ></absolute-position-behavior>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"absolute-position-behavior passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <absolute-position-behavior></absolute-position-behavior> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"absolute-position-behavior passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<absolute-position-behavior\n        aria-labelledby=\"absolute-position-behavior\"\n      ></absolute-position-behavior>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"absolute-position-behavior can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<absolute-position-behavior .foo=${'bar'}></absolute-position-behavior>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<absolute-position-behavior ></absolute-position-behavior>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<absolute-position-behavior></absolute-position-behavior>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<absolute-position-behavior></absolute-position-behavior>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: allowOverlap, auto, fitToVisibleBounds, hidden, for, offset, sticky, position, positionAlign, justify, target, __positions"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "accent-card": {
      "element": "accent-card",
      "component": {
        "properties": [
          {
            "name": "accentBackground",
            "type": "Boolean",
            "attribute": "accent-background",
            "config": "type: Boolean,\n        attribute: \"accent-background\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "accentHeading",
            "type": "Boolean",
            "attribute": "accent-heading",
            "config": "type: Boolean,\n        attribute: \"accent-heading\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "flat",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "horizontal",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "imageAlign",
            "type": "String",
            "attribute": "image-align",
            "config": "type: String,\n        attribute: \"image-align\",\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "imageSrc",
            "type": "String",
            "attribute": "image-src",
            "config": "type: String,\n        attribute: \"image-src\",",
            "defaultValue": "null"
          },
          {
            "name": "imageValign",
            "type": "String",
            "attribute": "image-valign",
            "config": "type: String,\n        attribute: \"image-valign\",\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "noBorder",
            "type": "Boolean",
            "attribute": "no-border",
            "config": "type: Boolean,\n        attribute: \"no-border\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "ready",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "link",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "iconSize",
            "type": "String",
            "attribute": "icon-size",
            "config": "type: String,\n        reflect: true,\n        attribute: \"icon-size\","
          },
          {
            "name": "imageWidth",
            "type": "String",
            "attribute": "image-width",
            "config": "type: String,\n        reflect: true,\n        attribute: \"image-width\","
          }
        ],
        "slots": [
          "image-corner",
          "heading",
          "corner",
          "subheading",
          "content",
          "footer"
        ],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../accent-card.js\";\n\ndescribe(\"accent-card test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <accent-card title=\"test-title\"></accent-card>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"accent-card passes accessibility test\", async () => {\n    const el = await fixture(html` <accent-card></accent-card> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"accent-card passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<accent-card aria-labelledby=\"accent-card\"></accent-card>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"accent-card can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<accent-card .foo=${'bar'}></accent-card>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<accent-card ></accent-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<accent-card></accent-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<accent-card></accent-card>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: accentBackground, accentHeading, flat, horizontal, imageAlign, imageSrc, imageValign, noBorder, ready, link, iconSize, imageWidth"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: image-corner, heading, corner, subheading, content, footer"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "aframe-player": {
      "element": "aframe-player",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "height",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"480px\""
          },
          {
            "name": "width",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"640px\""
          },
          {
            "name": "skyColor",
            "type": "String",
            "attribute": "sky-color",
            "config": "type: String,\n        attribute: \"sky-color\",",
            "defaultValue": "\"#DCDCDC\""
          },
          {
            "name": "ar",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "x",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"0\""
          },
          {
            "name": "y",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"0\""
          },
          {
            "name": "z",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"0\""
          },
          {
            "name": "position",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "createRenderRoot"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n/*\nimport \"../aframe-player.js\";\n\ndescribe(\"aframe-player test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <aframe-player title=\"test-title\"></aframe-player> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});*/\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"aframe-player passes accessibility test\", async () => {\n    const el = await fixture(html` <aframe-player></aframe-player> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"aframe-player passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<aframe-player aria-labelledby=\"aframe-player\"></aframe-player>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"aframe-player can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<aframe-player .foo=${'bar'}></aframe-player>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<aframe-player ></aframe-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<aframe-player></aframe-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<aframe-player></aframe-player>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, height, width, skyColor, ar, x, y, z, position"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "air-horn": {
      "element": "air-horn",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../air-horn.js\";\n\ndescribe(\"air-horn test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <air-horn title=\"test-title\"></air-horn> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"air-horn passes accessibility test\", async () => {\n    const el = await fixture(html` <air-horn></air-horn> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"air-horn passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<air-horn aria-labelledby=\"air-horn\"></air-horn>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"air-horn can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<air-horn .foo=${'bar'}></air-horn>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<air-horn ></air-horn>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<air-horn></air-horn>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<air-horn></air-horn>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "anchor-behaviors": {
      "element": "anchor-behaviors",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../anchor-behaviors.js\";\n\ndescribe(\"anchor-behaviors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <anchor-behaviors title=\"test-title\"></anchor-behaviors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"anchor-behaviors passes accessibility test\", async () => {\n    const el = await fixture(html` <anchor-behaviors></anchor-behaviors> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"anchor-behaviors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<anchor-behaviors\n        aria-labelledby=\"anchor-behaviors\"\n      ></anchor-behaviors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"anchor-behaviors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<anchor-behaviors .foo=${'bar'}></anchor-behaviors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<anchor-behaviors ></anchor-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<anchor-behaviors></anchor-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<anchor-behaviors></anchor-behaviors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "app-hax": {
      "element": "app-hax",
      "component": {
        "properties": [
          {
            "name": "unlockComingSoon",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "unlockTerrible",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "courses",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "userName",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "activeItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "soundIcon",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "searchTerm",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "appMode",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "isNewUser",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "phrases",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "userMenuOpen",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "siteReady",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "basePath",
            "type": "String",
            "attribute": "base-path",
            "config": "type: String, attribute: \"base-path\""
          },
          {
            "name": "token",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [
          "app-header-pre"
        ],
        "events": [
          "jwt-login-logout",
          "simple-modal-show",
          "app-hax-loaded"
        ],
        "methods": [
          "if",
          "playSound",
          "goToLocation",
          "reset",
          "fireTerrible",
          "fireUnlocked",
          "logout",
          "login",
          "helpClick",
          "toggleMenu",
          "closeMenu",
          "openMerlin",
          "getNewWord",
          "appBody",
          "switch",
          "templateHome",
          "templateCreate",
          "siteReadyToGo",
          "template404",
          "startJourney"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../app-hax.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <base href=\"/elements/app-hax/demo/\" />\n        <app-hax base-path=\"/elements/app-hax/demo/\">\n          <a href=\"https://www.psu.edu\" slot=\"app-header-pre\"\n            ><img\n              src=\"https://iam.hax.psu.edu/assets/psu.png\"\n              style=\"height:48px;display:inline-flex;vertical-align:top;\"\n              alt=\"Pennsylvania State University\"\n          /></a>\n        </app-hax>`,\n    );\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: unlockComingSoon, unlockTerrible, courses, userName, activeItem, soundIcon, searchTerm, appMode, isNewUser, phrases, userMenuOpen, siteReady, basePath, token"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: jwt-login-logout, simple-modal-show, app-hax-loaded"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: base-path"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "audio-player": {
      "element": "audio-player",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": false,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../audio-player.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <audio-player\n        source=\"https://inline-audio-mocha.vercel.app/assets/whopper.mp3\"\n      ></audio-player>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_A11Y_TESTS",
          "message": "Add accessibility tests using await expect(element).shadowDom.to.be.accessible()"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "awesome-explosion": {
      "element": "awesome-explosion",
      "component": {
        "properties": [
          {
            "name": "state",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"stop\""
          },
          {
            "name": "stopped",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "playing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "paused",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "new URL(\"./assets/explode.gif\", import.meta.url).href"
          },
          {
            "name": "sound",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "new URL(\n      \"./assets/273320__clagnut__fireworks.mp3\",\n      import.meta.url,\n    ).href"
          },
          {
            "name": "size",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"medium\""
          },
          {
            "name": "color",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "resetSound",
            "type": "Boolean",
            "attribute": "reset-sound",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"reset-sound\",",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "awesome-event"
        ],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../awesome-explosion.js\";\n\ndescribe(\"awesome-explosion test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <awesome-explosion title=\"test-title\"></awesome-explosion>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"awesome-explosion passes accessibility test\", async () => {\n    const el = await fixture(html` <awesome-explosion></awesome-explosion> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"awesome-explosion passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<awesome-explosion\n        aria-labelledby=\"awesome-explosion\"\n      ></awesome-explosion>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"awesome-explosion can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<awesome-explosion .foo=${'bar'}></awesome-explosion>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<awesome-explosion ></awesome-explosion>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<awesome-explosion></awesome-explosion>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<awesome-explosion></awesome-explosion>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: state, stopped, playing, paused, image, sound, size, color, resetSound"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: awesome-event"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "b-r": {
      "element": "b-r",
      "component": {
        "properties": [
          {
            "name": "amount",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "0"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "renderBR",
          "if",
          "while"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../b-r.js\";\ndescribe(\"b-r test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <b-r amount=\"22\"></b-r> `);\n  });\n\n  it(\"test that 22 brs are there\", async () => {\n    expect(element).to.exist;\n    expect(element.amount).to.equal(22);\n    expect(element.shadowRoot.querySelectorAll(\"br\").length).to.equal(22);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: amount"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "barcode-reader": {
      "element": "barcode-reader",
      "component": {
        "properties": [
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "\"\""
          },
          {
            "name": "scale",
            "type": "Number",
            "attribute": null,
            "config": "type: Number, reflect: true"
          },
          {
            "name": "hideinput",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "value-changed"
        ],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": false,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": ""
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_A11Y_TESTS",
          "message": "Add accessibility tests using await expect(element).shadowDom.to.be.accessible()"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: value, scale, hideinput"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: value-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "baseline-build-hax": {
      "element": "baseline-build-hax",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": false,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": ""
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_A11Y_TESTS",
          "message": "Add accessibility tests using await expect(element).shadowDom.to.be.accessible()"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "beaker-broker": {
      "element": "beaker-broker",
      "component": {
        "properties": [
          {
            "name": "archive",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "datUrl",
            "type": "String",
            "attribute": "dat-url",
            "config": "type: String,\n        attribute: \"dat-url\",",
            "defaultValue": "globalThis.location.host"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "archive-changed",
          "dat-url-changed"
        ],
        "methods": [
          "if",
          "switch"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../beaker-broker.js\";\n/*\ndescribe(\"beaker-broker test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <beaker-broker title=\"test-title\"></beaker-broker> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"beaker-broker passes accessibility test\", async () => {\n    const el = await fixture(html` <beaker-broker></beaker-broker> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"beaker-broker passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<beaker-broker aria-labelledby=\"beaker-broker\"></beaker-broker>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"beaker-broker can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<beaker-broker .foo=${'bar'}></beaker-broker>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<beaker-broker ></beaker-broker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<beaker-broker></beaker-broker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<beaker-broker></beaker-broker>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: archive, datUrl"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: archive-changed, dat-url-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "bootstrap-theme": {
      "element": "bootstrap-theme",
      "component": {
        "properties": [
          {
            "name": "searchTerm",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "menuOpen",
            "type": "Boolean",
            "attribute": "menu-open",
            "config": "type: Boolean,\n        attribute: \"menu-open\",\n        reflect: true,",
            "defaultValue": "true"
          },
          {
            "name": "colorTheme",
            "type": "String",
            "attribute": "color-theme",
            "config": "type: String,\n        attribute: \"color-theme\",\n        reflect: true,",
            "defaultValue": "\"0\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "searchChanged",
          "if",
          "searchItemSelected",
          "for",
          "getBasePath"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "HAXCMSThemeParts"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": false,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": ""
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_A11Y_TESTS",
          "message": "Add accessibility tests using await expect(element).shadowDom.to.be.accessible()"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: searchTerm, menuOpen, colorTheme"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: menu-open, color-theme"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "chartist-render": {
      "element": "chartist-render",
      "component": {
        "properties": [
          {
            "name": "chartTitle",
            "type": "String",
            "attribute": "chart-title",
            "config": "type: String,\n          attribute: \"chart-title\","
          },
          {
            "name": "chartData",
            "type": "Array",
            "attribute": "chart-data",
            "config": "type: Array,\n          attribute: \"chart-data\","
          },
          {
            "name": "chartDesc",
            "type": "String",
            "attribute": "chart-desc",
            "config": "type: String,\n          attribute: \"chart-desc\","
          },
          {
            "name": "data",
            "type": "Object",
            "attribute": "data",
            "config": "type: Object,\n          attribute: \"data\",",
            "defaultValue": "[]"
          },
          {
            "name": "dataSource",
            "type": "String",
            "attribute": "data-source",
            "config": "type: String,\n          attribute: \"data-source\",\n          reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "id",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"chart\""
          },
          {
            "name": "options",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "axisX",
            "type": "String",
            "attribute": null,
            "config": "axisTitle: \"Time (mins)\", offset: { x: 0, y: 50"
          },
          {
            "name": "axisY",
            "type": "String",
            "attribute": null,
            "config": "axisTitle: \"Goals\", axisClass: \"ct-axis-title\", offset: { x: 0, y: -1"
          }
        ],
        "slots": [
          "heading",
          "desc",
          "default"
        ],
        "events": [
          "chartist-render-ready",
          "chart-data-changed",
          "data-source-changed",
          "data-changed",
          "chartist-render-data",
          "chartist-render-created",
          "chartist-render-draw"
        ],
        "methods": [
          "if",
          "makeChart",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "ChartistRenderSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../chartist-render.js\";\n\ndescribe(\"chartist-render test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<chartist-render id=\"pie-chart\" type=\"pie\" scale=\"ct-square\">\n        <h3 slot=\"heading\">A pie chart of favorite pies (chart)</h3>\n        <table>\n          <caption>\n            A pie chart of favorite pies (table)\n          </caption>\n          <thead>\n            <tr>\n              <th scope=\"col\">Key Lime</th>\n              <th scope=\"col\">Lemon Merangue</th>\n              <th scope=\"col\">Apple</th>\n              <th scope=\"col\">Pumpkin</th>\n              <th scope=\"col\">Cherry</th>\n              <th scope=\"col\">Pecan</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>23</td>\n              <td>15</td>\n              <td>40</td>\n              <td>30</td>\n              <td>12</td>\n              <td>20</td>\n            </tr>\n          </tbody>\n        </table>\n      </chartist-render>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: chartTitle, chartData, chartDesc, data, dataSource, id, options, axisX, axisY"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: chartist-render-ready, chart-data-changed, data-source-changed, data-changed, chartist-render-data, chartist-render-created, chartist-render-draw"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: chart-title, chart-data, chart-desc, data, data-source"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "chat-agent": {
      "element": "chat-agent",
      "component": {
        "properties": [
          {
            "name": "isFullView",
            "type": "Boolean",
            "attribute": "is-full-view",
            "config": "type: Boolean,\n        attribute: \"is-full-view\",\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "isInterfaceHidden",
            "type": "Boolean",
            "attribute": "is-interface-hidden",
            "config": "type: Boolean,\n        attribute: \"is-interface-hidden\",\n        reflect: true,",
            "defaultValue": "null"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../chat-agent.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<chat-agent></chat-agent>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: isFullView, isInterfaceHidden"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: is-full-view, is-interface-hidden"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "check-it-out": {
      "element": "check-it-out",
      "component": {
        "properties": [
          {
            "name": "checkedOut",
            "type": "Boolean",
            "attribute": "checked-out",
            "config": "type: Boolean,\n        attribute: \"checked-out\",\n        reflect: true,"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__computedSource",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "type",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          },
          {
            "name": "filePath",
            "type": "String",
            "attribute": "file-path",
            "config": "type: String,\n        attribute: \"file-path\","
          },
          {
            "name": "modalTitle",
            "type": "String",
            "attribute": "modal-title",
            "config": "type: String,\n        attribute: \"modal-title\","
          },
          {
            "name": "hideExplorer",
            "type": "Boolean",
            "attribute": "hide-explorer",
            "config": "type: Boolean,\n        attribute: \"hide-explorer\","
          },
          {
            "name": "ctl",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "view",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "modal",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "renderLogic",
          "if",
          "haxHooks",
          "haxactiveElementChanged",
          "haxeditModeChanged",
          "checkType",
          "checkStackblitzProps"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../check-it-out.js\";\n\ndescribe(\"check-it-out test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<check-it-out\n        modal\n        type=\"code\"\n        modal-title=\"React ew\"\n        ctl\n        view=\"both\"\n        source=\"https://stackblitz.com/edit/react-brwwcr?embed=1&file=src/App.js\"\n      >\n        Click me\n      </check-it-out>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: checkedOut, source, icon, __computedSource, type, label, filePath, modalTitle, hideExplorer, ctl, view, modal"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: checked-out, file-path, modal-title, hide-explorer"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "citation-element": {
      "element": "citation-element",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "scope",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"sibling\""
          },
          {
            "name": "displayMethod",
            "type": "String",
            "attribute": "display-method",
            "config": "type: String,\n        reflect: true,\n        attribute: \"display-method\","
          },
          {
            "name": "creator",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "date",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "licenseName",
            "type": "String",
            "attribute": "license-name",
            "config": "type: String,\n        attribute: \"license-name\","
          },
          {
            "name": "licenseLink",
            "type": "String",
            "attribute": "license-link",
            "config": "type: String,\n        attribute: \"license-link\","
          },
          {
            "name": "license",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../citation-element.js\";\n\ndescribe(\"citation-element test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <citation-element title=\"test-title\"></citation-element>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"citation-element passes accessibility test\", async () => {\n    const el = await fixture(html` <citation-element></citation-element> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"citation-element passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<citation-element\n        aria-labelledby=\"citation-element\"\n      ></citation-element>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"citation-element can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<citation-element .foo=${'bar'}></citation-element>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<citation-element ></citation-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<citation-element></citation-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<citation-element></citation-element>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, scope, displayMethod, creator, source, date, licenseName, licenseLink, license"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "clean-one": {
      "element": "clean-one",
      "component": {
        "properties": [
          {
            "name": "searchTerm",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "searchChanged",
          "if",
          "HAXCMSGlobalStyleSheetContent",
          "for",
          "prevPage",
          "nextPage"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "LTIResizingMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "// local development and mobx\nwindow.process = window.process || {\n  env: {\n    NODE_ENV: \"development\",\n  },\n};\nimport { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../clean-one.js\";\n/*\ndescribe(\"clean-one test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <clean-one title=\"test-title\"></clean-one> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"clean-one passes accessibility test\", async () => {\n    const el = await fixture(html` <clean-one></clean-one> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"clean-one passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<clean-one aria-labelledby=\"clean-one\"></clean-one>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"clean-one can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<clean-one .foo=${'bar'}></clean-one>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<clean-one ></clean-one>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<clean-one></clean-one>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<clean-one></clean-one>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: searchTerm"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "clean-portfolio-theme": {
      "element": "clean-portfolio-theme",
      "component": {
        "properties": [
          {
            "name": "activeItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "activeParent",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "ancestorItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "prevSibling",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "nextSibling",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "topItems",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "activeTags",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "categoryTags",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "allTags",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "menuOverflow",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "menuOpen",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "copyrightYear",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "pageCurrent",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "pageTotal",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "siteTitle",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "homeLink",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "activeLayout",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"text\""
          },
          {
            "name": "selectedTag",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "lastUpdated",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "licenseName",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "licenseLink",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "licenseImage",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "dataPrimary",
            "type": "String",
            "attribute": "data-primary",
            "config": "type: String, attribute: \"data-primary\", reflect: true",
            "defaultValue": "2"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "switch",
          "for",
          "HAXCMSGlobalStyleSheetContent",
          "testEditMode",
          "HAXSiteRenderXTagsItems",
          "setLayout",
          "toggleSiteTheme"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "DDDSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../clean-portfolio-theme.js\";\n\ndescribe(\"CleanPortfolioTheme test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <clean-portfolio-theme\n        title=\"title\"\n      ></clean-portfolio-theme>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: activeItem, activeParent, ancestorItem, prevSibling, nextSibling, topItems, items, activeTags, categoryTags, allTags, menuOverflow, menuOpen, copyrightYear, pageCurrent, pageTotal, siteTitle, homeLink, activeLayout, selectedTag, lastUpdated, licenseName, licenseLink, licenseImage, dataPrimary"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: data-primary"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "clean-two": {
      "element": "clean-two",
      "component": {
        "properties": [
          {
            "name": "searchTerm",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "prevPage",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "nextPage",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "pageTimestamp",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "searchItemSelected",
          "searchChanged",
          "siteModalForceClick",
          "siteModalClick",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "LTIResizingMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "// local development and mobx\nwindow.process = window.process || {\n  env: {\n    NODE_ENV: \"development\",\n  },\n};\nimport { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../clean-two.js\";\n/*\ndescribe(\"clean-two test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <clean-two title=\"test-title\"></clean-two> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"clean-two passes accessibility test\", async () => {\n    const el = await fixture(html` <clean-two></clean-two> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"clean-two passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<clean-two aria-labelledby=\"clean-two\"></clean-two>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"clean-two can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<clean-two .foo=${'bar'}></clean-two>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<clean-two ></clean-two>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<clean-two></clean-two>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<clean-two></clean-two>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: searchTerm, prevPage, nextPage, pageTimestamp"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "cms-hax": {
      "element": "cms-hax",
      "component": {
        "properties": [
          {
            "name": "ready",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "openDefault",
            "type": "Boolean",
            "attribute": "open-default",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"open-default\","
          },
          {
            "name": "hidePanelOps",
            "type": "Boolean",
            "attribute": "hide-panel-ops",
            "config": "type: Boolean,\n        attribute: \"hide-panel-ops\","
          },
          {
            "name": "offsetMargin",
            "type": "String",
            "attribute": "offset-margin",
            "config": "type: String,\n        reflect: true,\n        attribute: \"offset-margin\","
          },
          {
            "name": "elementAlign",
            "type": "String",
            "attribute": "element-align",
            "config": "type: String,\n        attribute: \"element-align\","
          },
          {
            "name": "allowedTags",
            "type": "Array",
            "attribute": "allowed-tags",
            "config": "type: Array,\n        attribute: \"allowed-tags\","
          },
          {
            "name": "endPoint",
            "type": "String",
            "attribute": "end-point",
            "config": "type: String,\n        attribute: \"end-point\","
          },
          {
            "name": "method",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "appStoreConnection",
            "type": "String",
            "attribute": "app-store-connection",
            "config": "type: String,\n        attribute: \"app-store-connection\","
          },
          {
            "name": "__appStore",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "syncBody",
            "type": "Boolean",
            "attribute": "sync-body",
            "config": "type: Boolean,\n        attribute: \"sync-body\","
          },
          {
            "name": "bodyValue",
            "type": "String",
            "attribute": "body-value",
            "config": "type: String,\n        attribute: \"body-value\","
          },
          {
            "name": "hideMessage",
            "type": "Boolean",
            "attribute": "hide-message",
            "config": "type: Boolean,\n        attribute: \"hide-message\","
          },
          {
            "name": "redirectLocation",
            "type": "String",
            "attribute": "redirect-location",
            "config": "type: String,\n        attribute: \"redirect-location\","
          },
          {
            "name": "redirectOnSave",
            "type": "Boolean",
            "attribute": "redirect-on-save",
            "config": "type: Boolean,\n        attribute: \"redirect-on-save\","
          },
          {
            "name": "__imported",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          }
        ],
        "slots": [],
        "events": [
          "hax-body-content-changed",
          "cms-hax-saved"
        ],
        "methods": [
          "decodeHTMLEntities",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../cms-hax.js\";\n\ndescribe(\"cms-hax test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<cms-hax\n        element-align=\"left\"\n        end-point=\"/dmd100/hax-node-save/1848/VXfGSpbA2T_bCl31L3E5k8YDlnqf30fvTUu2cP5Y-n8\"\n        app-store-connection='{\"url\":\"${new URL(\n          \"../demo/sample-store.json\",\n          import.meta.url,\n        ).href}\"}'\n        redirect-location=\"/dmd100/node/1848\"\n        ><template\n          ><p>\n            Feedback can come in various forms, including advice, compliments,\n            ambiguous remarks, big picture insights, etc. Learn how to listen\n            carefully and diligently to what is being said so you can translate\n            the feedback to be understandable, useful, and ultimately\n            actionable. If someone gives you ambiguous feedback, this means that\n            they can intuitively see a weakness but might not know why something\n            isn't working. You should follow up with their comments with probing\n            questions to better understand their perspective.\n          </p>\n          <p>\n            If an instructor gives you advice and that they want you to do\n            something, you should try it and see if it works. If it doesn't work\n            well, then bring that up in the next critique. The instructor is not\n            responsible for the choices you make when creating work, only for\n            guiding and responding to those choices. If you make work that is\n            sub-par as a result of the instructor asking you to try something,\n            don't blame the instructor. You should have the ability to identify\n            emergent weaknesses that the instructor did not anticipate, and\n            pivot before showing that work in the next critique.\n          </p>\n          <h3>Interpreting feedback</h3>\n          <p>\n            Let's say you just pulled an all-nighter to get a project finished\n            (unfortunately very common for art and design students). It's a\n            masterpiece, and you can't wait to unveil it to unfettered acclaim\n            from your peers. However, you show your work to everyone, and the\n            response you get does not sound like praise. In fact, they say\n            things like \"it's not working\" or \"I don't understand why you did\n            that ...\" and you are devastated.\n          </p>\n          <p>\n            Unless you had brutally honest parents growing up, you might not be\n            used to a negative response to your creative work, particularly work\n            in which you have invested considerable effort. Letting go of\n            emotional attachment to your work will greatly help you with the\n            ability to self-evaluate more objectively. That \"eye\" that people\n            mention that perhaps got you into the field in the first place comes\n            from this ability to objectively evaluate. Praise can certainly\n            happen in feedback or critique and is a great way to communicate\n            when you've done something well, but you should remain skeptical of\n            too much praise. Unwarranted praise can really hold your work back,\n            blinding you from where your weaknesses lie. If your work needs\n            improvement, you need to know about it in order to improve, and this\n            is the main goal of feedback.\n          </p>\n          <p>\n            Though feedback typically centers on your work, sometimes comments\n            are aimed at you and not your work. The emotional trauma of being\n            criticized can be painful. Step back and remind yourself that the\n            purpose of the feedback is to help and encourage you, not to be\n            condescending or cruel. This objectivity is really important so that\n            you can learn from the feedback. Some students have trouble trying\n            anything outside of their comfort zone. This is often obvious in a\n            feedback session or critique. Signs include defensiveness to\n            negative feedback, sense of arrogance or overconfidence, dismissal\n            of instructor comments or suggestions, and outright refusal to make\n            changes according to feedback. This is not a professional attitude\n            or outlook, and will keep you from the opportunities that will grow\n            you as an artist or designer. Failure must happen rapidly so you can\n            improve at a quick pace. Closed-mindedness causes failure to happen\n            slowly over a long period of time. Your instructors are genuinely\n            invested in your success and it is their job to point out\n            shortcomings. Most student interpretations of overt \"insensitivity\"\n            or \"hardness\" by an instructor typically results from a situation\n            such as the one described.\n          </p>\n          <h3>Giving feedback</h3>\n          <p>\n            Keep it positive. A tried and true technique for feedback, where\n            appropriate, is called the \"critique sandwich.\" This is the Happy\n            Meal of the critique process. Essentially, you will start and end a\n            critique with positive comments (the bread), using the comments in\n            between (the meat or meat-flavored tofu) for the important, possibly\n            negative-sounding feedback. This makes hard-to-swallow comments more\n            palatable, yet still communicates the important issues.\n          </p>\n          <h3>Trolling</h3>\n          <meme-maker\n            bottom-text=\"Trolling be\"\n            image-url=\"https://courses.elmsln-dev.vmhost.psu.edu/dmd100/sites/courses/aa/dmd100/files/headshot40581.19999998598.jpg\"\n            imageurl=\"https://courses.elmsln-dev.vmhost.psu.edu/dmd100/sites/courses/aa/dmd100/files/headshot40581.19999998598.jpg\"\n            style=\"width: 50%;\"\n            top-text=\"I can haz\"\n          ></meme-maker>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p>\n            Anyone can intentionally or unintentionally become a troll. A troll\n            is a person who is intent on disrupting constructive discussion by\n            posting inflammatory remarks to halt the progress of a discussion —\n            typically for the purpose of self-amusement or for the emotional\n            high of winning an argument. This happens in online (and sometimes\n            offline) spaces that lack established social norms or policy\n            enforcement.\n          </p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p>\n            In an academic setting, the instructor sets the social norms of the\n            classroom and maintains authority over moderating a discussion. It\n            is not an instructor's job to be \"thought police.\" Therefore, if a\n            student has an opinion that is counter to the general opinions of\n            the class, voicing those opinions are encouraged to provoke\n            thoughtful discussion. However, disrespectful remarks meant to\n            oppress another student will be considered trolling behavior and\n            will not be allowed to continue without consequence.\n          </p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p>\n            Trolling is the antithetical to meaningful discussion and learning,\n            so try to be mindful that your remarks (possibly being written under\n            some emotional stress) don't accidentally veer off course and shut\n            down a potentially helpful conversation.\n          </p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p> </template\n      ></cms-hax>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"cms-hax passes accessibility test\", async () => {\n    const el = await fixture(html` <cms-hax></cms-hax> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"cms-hax passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<cms-hax aria-labelledby=\"cms-hax\"></cms-hax>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"cms-hax can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<cms-hax .foo=${'bar'}></cms-hax>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<cms-hax ></cms-hax>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<cms-hax></cms-hax>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<cms-hax></cms-hax>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: ready, openDefault, hidePanelOps, offsetMargin, elementAlign, allowedTags, endPoint, method, appStoreConnection, __appStore, syncBody, bodyValue, hideMessage, redirectLocation, redirectOnSave, __imported"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: hax-body-content-changed, cms-hax-saved"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "code-editor": {
      "element": "code-editor",
      "component": {
        "properties": [
          {
            "name": "libPath",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "globalThis.WCGlobalBasePath"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "showCodePen",
            "type": "Boolean",
            "attribute": "show-code-pen",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"show-code-pen\",",
            "defaultValue": "false"
          },
          {
            "name": "readOnly",
            "type": "Boolean",
            "attribute": "read-only",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"read-only\",",
            "defaultValue": "false"
          },
          {
            "name": "codePenData",
            "type": "Object",
            "attribute": "code-pen-data",
            "config": "type: Object,\n        attribute: \"code-pen-data\",",
            "defaultValue": "null"
          },
          {
            "name": "editorValue",
            "type": "String",
            "attribute": "editor-value",
            "config": "type: String,\n        attribute: \"editor-value\","
          },
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "theme",
            "type": "String",
            "attribute": "theme",
            "config": "type: String,\n        reflect: true,\n        attribute: \"theme\",",
            "defaultValue": "\"vs-dark\""
          },
          {
            "name": "mode",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "language",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"javascript\""
          },
          {
            "name": "fontSize",
            "type": "Number",
            "attribute": "font-size",
            "config": "type: Number,\n        attribute: \"font-size\",",
            "defaultValue": "16"
          },
          {
            "name": "wordWrap",
            "type": "Boolean",
            "attribute": "word-wrap",
            "config": "type: Boolean,\n        attribute: \"word-wrap\",",
            "defaultValue": "false"
          },
          {
            "name": "autofocus",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "hideLineNumbers",
            "type": "Boolean",
            "attribute": "hide-line-numbers",
            "config": "type: Boolean,\n        attribute: \"hide-line-numbers\",",
            "defaultValue": "false"
          },
          {
            "name": "focused",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "tabSize",
            "type": "Number",
            "attribute": "tab-size",
            "config": "type: Number,\n        attribute: \"tab-size\",",
            "defaultValue": "2"
          },
          {
            "name": "ready",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "show-code-pen-changed",
          "value-changed",
          "focused-changed"
        ],
        "methods": [
          "if",
          "getTheme",
          "updateEditorValue",
          "for",
          "haxHooks",
          "haxactiveElementChanged",
          "haxpreProcessNodeToContent",
          "getValueAsNode",
          "editorReady"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../code-editor.js\";\n\ndescribe(\"code-editor test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <code-editor title=\"test-title\"></code-editor>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"code-editor passes accessibility test\", async () => {\n    const el = await fixture(html` <code-editor></code-editor> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"code-editor passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<code-editor aria-labelledby=\"code-editor\"></code-editor>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"code-editor can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<code-editor .foo=${'bar'}></code-editor>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<code-editor ></code-editor>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<code-editor></code-editor>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<code-editor></code-editor>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: libPath, title, showCodePen, readOnly, codePenData, editorValue, value, theme, mode, language, fontSize, wordWrap, autofocus, hideLineNumbers, focused, tabSize, ready"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: show-code-pen-changed, value-changed, focused-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "code-sample": {
      "element": "code-sample",
      "component": {
        "properties": [
          {
            "name": "editMode",
            "type": "Boolean",
            "attribute": "edit-mode",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"edit-mode\",",
            "defaultValue": "false"
          },
          {
            "name": "_haxstate",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "copyClipboardButton",
            "type": "Boolean",
            "attribute": "copy-clipboard-button",
            "config": "type: Boolean,\n        attribute: \"copy-clipboard-button\",",
            "defaultValue": "false"
          },
          {
            "name": "theme",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,",
            "defaultValue": "oneDark"
          },
          {
            "name": "type",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"html\""
          },
          {
            "name": "highlightStart",
            "type": "Number",
            "attribute": "highlight-start",
            "config": "type: Number,\n        reflect: true,\n        attribute: \"highlight-start\",",
            "defaultValue": "null"
          },
          {
            "name": "highlightEnd",
            "type": "Number",
            "attribute": "highlight-end",
            "config": "type: Number,\n        reflect: true,\n        attribute: \"highlight-end\",",
            "defaultValue": "null"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "getMinHeight",
          "haxHooks",
          "haxpreProcessNodeToContent",
          "haxeditModeChanged",
          "if",
          "haxactiveElementChanged",
          "haxgizmoRegistration",
          "for",
          "haxinlineContextMenu",
          "haxToggleEdit",
          "getExample",
          "switch",
          "highlightLines"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../code-sample.js\";\n\ndescribe(\"code-sample test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <code-sample title=\"test-title\"></code-sample>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"code-sample passes accessibility test\", async () => {\n    const el = await fixture(html` <code-sample></code-sample> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"code-sample passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<code-sample aria-labelledby=\"code-sample\"></code-sample>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"code-sample can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<code-sample .foo=${'bar'}></code-sample>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<code-sample ></code-sample>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<code-sample></code-sample>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<code-sample></code-sample>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: editMode, _haxstate, copyClipboardButton, theme, type, highlightStart, highlightEnd"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "collection-list": {
      "element": "collection-list",
      "component": {
        "properties": [
          {
            "name": "responsiveSize",
            "type": "String",
            "attribute": "responsive-size",
            "config": "type: String,\n        reflect: true,\n        attribute: \"responsive-size\",",
            "defaultValue": "\"lg\""
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../collection-list.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<collection-list></collection-list>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: responsiveSize"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: responsive-size"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "count-up": {
      "element": "count-up",
      "component": {
        "properties": [
          {
            "name": "start",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "0"
          },
          {
            "name": "end",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "100"
          },
          {
            "name": "duration",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "2.5"
          },
          {
            "name": "noeasing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "decimalplaces",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "0"
          },
          {
            "name": "separator",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\",\""
          },
          {
            "name": "decimal",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\".\""
          },
          {
            "name": "prefixtext",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\" \""
          },
          {
            "name": "suffixtext",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\" \""
          },
          {
            "name": "thresholds",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "rootMargin",
            "type": "String",
            "attribute": "root-margin",
            "config": "type: String,\n        attribute: \"root-margin\","
          },
          {
            "name": "ratio",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,\n        reflect: true,"
          },
          {
            "name": "elementVisible",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          }
        ],
        "slots": [
          "prefix",
          "suffix"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../count-up.js\";\n\ndescribe(\"count-up test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <count-up title=\"test-title\"></count-up> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"count-up passes accessibility test\", async () => {\n    const el = await fixture(html` <count-up></count-up> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"count-up passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<count-up aria-labelledby=\"count-up\"></count-up>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"count-up can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<count-up .foo=${'bar'}></count-up>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<count-up ></count-up>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<count-up></count-up>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<count-up></count-up>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: start, end, duration, noeasing, decimalplaces, separator, decimal, prefixtext, suffixtext, thresholds, rootMargin, ratio, elementVisible"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: prefix, suffix"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "course-design": {
      "element": "course-design",
      "component": {
        "properties": [],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../course-design.js\";\n\ndescribe(\"course-design test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <course-design title=\"test-title\"></course-design>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"course-design passes accessibility test\", async () => {\n    const el = await fixture(html` <course-design></course-design> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"course-design passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<course-design aria-labelledby=\"course-design\"></course-design>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"course-design can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<course-design .foo=${'bar'}></course-design>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<course-design ></course-design>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<course-design></course-design>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<course-design></course-design>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "course-model": {
      "element": "course-model",
      "component": {
        "properties": [
          {
            "name": "visible",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"model\""
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "src",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [
          "logo",
          "default",
          "detail",
          "animation",
          "check"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": true,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n//import \"../course-model.js\";\n/*\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<course-model\n      title=\"Colt 1911 Default\"\n      src=\"${new URL(\n        \"../demo/models/guns/colt-1911/colt_1911_full.gltf\",\n        import.meta.url\n      ).href}\"\n      alt=\"A 3D model of a Colt 1911 handgun.\"\n    >\n      <a href=\"https://odl.science.psu.edu/\" target=\"_blank\" slot=\"logo\">\n        <img\n          title=\"ECOS Office of Digital Learning\"\n          id=\"brand\"\n          src=\"${new URL(\"../demo/img/ecosodl.png\", import.meta.url).href}\"\n          alt=\"The Office of Digital Learning\"\n        />\n      </a>\n      <model-option\n        title=\"Colt 1911 (.45 Caliber)\"\n        src=\"${new URL(\n          \"../demo/models/guns/colt-1911/colt_1911_full.gltf\",\n          import.meta.url\n        ).href}\"\n      >\n        <span> Default view of the Colt 1911 (.45 Caliber). </span>\n      </model-option>\n      <model-option\n        title=\"Colt 1911 Cross Section\"\n        src=\"${new URL(\n          \"../demo/models/guns/colt-1911/colt_1911_half.gltf\",\n          import.meta.url\n        ).href}\"\n      >\n        <span> Cross section view of the Colt 1911 (.45 Caliber). </span>\n      </model-option>\n      <model-option\n        title=\"Colt 1911 Parts\"\n        src=\"${new URL(\n          \"../demo/models/guns/colt-1911/colt_1911_parts.gltf\",\n          import.meta.url\n        ).href}\"\n      >\n        <span> Parts view of the Colt 1911 (.45 Caliber). </span>\n      </model-option>\n      <model-option\n        title=\"Colt 1911 Clip / Ammunition\"\n        src=\"${new URL(\n          \"../demo/models/guns/colt-1911/colt_1911_clip.gltf\",\n          import.meta.url\n        ).href}\"\n      >\n        <span>\n          Cross section view of the Colt 1911 (.45 Caliber) clip / ammunition.\n        </span>\n      </model-option>\n      <div slot=\"detail\">\n        <model-info title=\"Colt 1911 Handgun (.45 Caliber)\">\n          <p>\n            This is a 3D representation of the M1911, also known as the Colt\n            1911, or the Colt Government, is a single-action, semi-automatic,\n            magazine-fed, recoil-operated pistol chambered for the .45 ACP\n            cartridge. It served as the standard-issue sidearm for the United\n            States Armed Forces from 1911 to 1985. It was widely used in World\n            War I, World War II, the Korean War, and the Vietnam War.\n          </p>\n          <p>\n            Designed by John Browning, the M1911 is the best-known of his\n            designs to use the short recoil principle in its basic design. The\n            pistol was widely copied, and this operating system rose to become\n            the preeminent type of the 20th century and of nearly all modern\n            centerfire pistols.\n          </p>\n          <p>\n            Following its success in trials, the Colt pistol was formally\n            adopted by the Army on March 29, 1911, when it was designated Model\n            of 1911, later changed to Model 1911, in 1917, and then M1911, in\n            the mid-1920s. The Director of Civilian Marksmanship began\n            manufacture of M1911 pistols for members of the National Rifle\n            Association in August 1912. Approximately 100 pistols stamped\n            \"N.R.A.\" below the serial number were manufactured at Springfield\n            Armory and by Colt. The M1911 was formally adopted by the U.S. Navy\n            and Marine Corps in 1913. The .45 ACP \"Model of 1911 U.S. Army\" was\n            used by both US Army Cavalry Troops and Infantry Soldiers during the\n            United States' Punitive Expedition into Mexico against Pancho Villa\n            in 1916.\n          </p>\n          <p>\n            By the beginning of 1917, a total of 68,533 M1911 pistols had been\n            delivered to U.S. armed forces by Colt's Patent Firearms\n            Manufacturing Company and the U.S. government's Springfield Armory.\n          </p>\n          <div id=\"images\" slot=\"images\">\n            <media-image\n              source=\"${new URL(\n                \"../demo/models/guns/img/colt1911-1.jpeg\",\n                import.meta.url\n              ).href}\"\n              figure-label-title=\"1.1\"\n              figure-label-description=\"This is\n            the description of the figure.\"\n              alt=\"Descriptive image text\n            here.\"\n            >\n            </media-image>\n            <media-image\n              source=\"${new URL(\n                \"../demo/models/guns/img/colt1911-2.png\",\n                import.meta.url\n              ).href}\"\n              figure-label-title=\"2.1\"\n              figure-label-description=\"This is\n            the description of the figure.\"\n              alt=\"Descriptive image text\n            here.\"\n            >\n            </media-image>\n            <media-image\n              source=\"${new URL(\n                \"../demo/models/guns/img/colt1911-3.jpeg\",\n                import.meta.url\n              ).href}\"\n              figure-label-title=\"2.2\"\n              figure-label-description=\"This is\n            the description of the figure.\"\n              alt=\"Descriptive image text\n            here.\"\n            >\n            </media-image>\n          </div>\n        </model-info>\n      </div>\n      <div slot=\"animation\">\n        <video-player source=\"https://youtu.be/JzXMrzvh1UM\"> </video-player>\n      </div>\n      <div id=\"check\" slot=\"check\">\n        <iframe\n          src=\"https://media.ed.science.psu.edu/h5p/embed/5783?entity_iframe=1\"\n          width=\"950\"\n          height=\"350\"\n          frameborder=\"0\"\n          allowfullscreen=\"\"\n        ></iframe>\n        <script\n          src=\"https://media.ed.science.psu.edu/sites/all/modules/local_contrib/h5p/library/js/h5p-resizer.js\"\n          charset=\"UTF-8\"\n        ></script>\n      </div>\n    </course-model>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: visible, title, src, alt"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "csv-render": {
      "element": "csv-render",
      "component": {
        "properties": [
          {
            "name": "dataSource",
            "type": "String",
            "attribute": "data-source",
            "config": "type: String,\n        attribute: \"data-source\","
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "caption",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "summary",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "table",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "tableHeadings",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "tableData",
            "type": "String",
            "attribute": "table-data",
            "config": "type: String,\n        attribute: \"table-data\",",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "handleResponse",
          "CSVtoArray",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../csv-render.js\";\n\ndescribe(\"csv-render test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <csv-render\n        data-source=\"../demo/demo.csv\"\n        summary=\"This shows student scores from the previous 12 month period.\"\n        caption=\"Student semester scores\"\n      ></csv-render>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"csv-render passes accessibility test\", async () => {\n    const el = await fixture(html` <csv-render></csv-render> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"csv-render passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<csv-render aria-labelledby=\"csv-render\"></csv-render>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"csv-render can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<csv-render .foo=${'bar'}></csv-render>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<csv-render ></csv-render>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<csv-render></csv-render>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<csv-render></csv-render>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: dataSource, loading, caption, summary, table, tableHeadings, tableData"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "d-d-d": {
      "element": "d-d-d",
      "component": {
        "properties": [
          {
            "name": "dataPulse",
            "type": "String",
            "attribute": "data-pulse",
            "config": "type: String, reflect: true, attribute: \"data-pulse\"",
            "defaultValue": "null"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "removePulseEffect",
          "togglePulseEffect",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "DDDSuper",
          "DDDSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../d-d-d.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<d-d-d></d-d-d>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: dataPulse"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: data-pulse"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "d-d-docs": {
      "element": "d-d-docs",
      "component": {
        "properties": [
          {
            "name": "option",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"*\""
          },
          {
            "name": "options",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "Object.keys(styleGuideTopics)"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "renderDataAttributes",
          "renderHeaderSample",
          "for",
          "if",
          "renderDDDelementsList",
          "renderBorders",
          "renderBreakpoints",
          "renderDefaultColors",
          "renderDefaultFunctionalColors",
          "renderGradients",
          "renderRadius",
          "renderShadows",
          "renderSpacing",
          "renderTypography",
          "renderRichText",
          "renderCards",
          "renderStepsList",
          "renderButtons",
          "renderPageSections",
          "renderInstructionalComponents",
          "selectOption"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../d-d-docs.js\";\n\ndescribe(\"DDDocs test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <d-d-docs\n        title=\"title\"\n      ></d-d-docs>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: option, options"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "data-viz": {
      "element": "data-viz",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "showDataFunction",
          "hideDataViz",
          "showDataViz"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../data-viz.js\";\n/*\ndescribe(\"data-viz test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <data-viz title=\"test-title\"></data-viz> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"data-viz passes accessibility test\", async () => {\n    const el = await fixture(html` <data-viz></data-viz> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"data-viz passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<data-viz aria-labelledby=\"data-viz\"></data-viz>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"data-viz can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<data-viz .foo=${'bar'}></data-viz>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<data-viz ></data-viz>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<data-viz></data-viz>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<data-viz></data-viz>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "date-card": {
      "element": "date-card",
      "component": {
        "properties": [
          {
            "name": "month",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "date",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "day",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "startTime",
            "type": "String",
            "attribute": "start-time",
            "config": "type: String, attribute: \"start-time\""
          },
          {
            "name": "endTime",
            "type": "String",
            "attribute": "end-time",
            "config": "type: String, attribute: \"end-time\""
          },
          {
            "name": "location",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "borderSpacing",
            "type": "Number",
            "attribute": "border-spacing",
            "config": "type: Number, attribute: \"border-spacing\"",
            "defaultValue": "5"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "nth",
          "if",
          "switch"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../date-card.js\";\n\ndescribe(\"date-card test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <date-card title=\"test-title\"></date-card> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"date-card passes accessibility test\", async () => {\n    const el = await fixture(html` <date-card></date-card> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"date-card passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<date-card aria-labelledby=\"date-card\"></date-card>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"date-card can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<date-card .foo=${'bar'}></date-card>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<date-card ></date-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<date-card></date-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<date-card></date-card>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: month, date, day, title, startTime, endTime, location, borderSpacing"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "deduping-fix": {
      "element": "deduping-fix",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "discord-embed": {
      "element": "discord-embed",
      "component": {
        "properties": [
          {
            "name": "height",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "500"
          },
          {
            "name": "width",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"100%\""
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../discord-embed.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<discord-embed></discord-embed>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: height, width, source"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "disqus-embed": {
      "element": "disqus-embed",
      "component": {
        "properties": [
          {
            "name": "loadingText",
            "type": "String",
            "attribute": "loading-text",
            "config": "type: String, attribute: \"loading-text\"",
            "defaultValue": "\"Loading comments..\""
          },
          {
            "name": "pageURL",
            "type": "String",
            "attribute": "page-url",
            "config": "type: String,\n        attribute: \"page-url\",",
            "defaultValue": "null"
          },
          {
            "name": "pageIdentifier",
            "type": "String",
            "attribute": "page-identifier",
            "config": "type: String,\n        attribute: \"page-identifier\",",
            "defaultValue": "null"
          },
          {
            "name": "pageTitle",
            "type": "String",
            "attribute": "page-title",
            "config": "type: String,\n        attribute: \"page-title\",",
            "defaultValue": "null"
          },
          {
            "name": "shortName",
            "type": "String",
            "attribute": "short-name",
            "config": "type: String,\n        attribute: \"short-name\",",
            "defaultValue": "null"
          },
          {
            "name": "lang",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"en\""
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "while",
          "createEmbedScript",
          "rebuildConfiguration",
          "renderToTarget",
          "apiCallback",
          "switch",
          "function"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../disqus-embed.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<disqus-embed></disqus-embed>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: loadingText, pageURL, pageIdentifier, pageTitle, shortName, lang"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: loading-text, page-url, page-identifier, page-title, short-name"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "dl-behavior": {
      "element": "dl-behavior",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "value",
          "downloadFromData",
          "downloadFromURI"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../dl-behavior.js\";\n\ndescribe(\"dl-behavior test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <dl-behavior title=\"test-title\"></dl-behavior>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"dl-behavior passes accessibility test\", async () => {\n    const el = await fixture(html` <dl-behavior></dl-behavior> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"dl-behavior passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<dl-behavior aria-labelledby=\"dl-behavior\"></dl-behavior>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"dl-behavior can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<dl-behavior .foo=${'bar'}></dl-behavior>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<dl-behavior ></dl-behavior>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<dl-behavior></dl-behavior>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<dl-behavior></dl-behavior>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "documentation-player": {
      "element": "documentation-player",
      "component": {
        "properties": [
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "haxSchema",
            "type": "Array",
            "attribute": null,
            "config": "type: Array, attribute: false",
            "defaultValue": "[]"
          },
          {
            "name": "imageUrl",
            "type": "String",
            "attribute": "image-url",
            "config": "type: String, attribute: \"image-url\"",
            "defaultValue": "\"\""
          },
          {
            "name": "url",
            "type": "String",
            "attribute": "url",
            "config": "type: String, attribute: \"url\"",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [
          "hax-insert"
        ],
        "methods": [
          "for",
          "if",
          "codePenData",
          "renderPlayListTemplate",
          "renderHAXInjectButton"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../documentation-player.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<documentation-player></documentation-player>`,\n    );\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: label, haxSchema, imageUrl, url"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: hax-insert"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: image-url, url"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "dynamic-import-registry": {
      "element": "dynamic-import-registry",
      "component": {
        "properties": [],
        "slots": [],
        "events": [
          "dynamic-import-registry-loaded",
          "dynamic-import-registry-failure"
        ],
        "methods": [
          "if",
          "register",
          "registerDefinitionEvent",
          "getPathToTag"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../dynamic-import-registry.js\";\n\ndescribe(\"dynamic-import-registry test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <dynamic-import-registry title=\"test-title\"></dynamic-import-registry>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"dynamic-import-registry passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <dynamic-import-registry></dynamic-import-registry> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"dynamic-import-registry passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<dynamic-import-registry\n        aria-labelledby=\"dynamic-import-registry\"\n      ></dynamic-import-registry>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"dynamic-import-registry can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<dynamic-import-registry .foo=${'bar'}></dynamic-import-registry>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<dynamic-import-registry ></dynamic-import-registry>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<dynamic-import-registry></dynamic-import-registry>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<dynamic-import-registry></dynamic-import-registry>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: dynamic-import-registry-loaded, dynamic-import-registry-failure"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "editable-table": {
      "element": "editable-table",
      "component": {
        "properties": [
          {
            "name": "editMode",
            "type": "Boolean",
            "attribute": "edit-mode",
            "config": "type: Boolean,\n        attribute: \"edit-mode\",\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "toggle-edit-mode"
        ],
        "methods": [
          "haxHooks",
          "if",
          "sync",
          "focus",
          "setTimeout",
          "toggleEditMode"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "editBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../editable-table.js\";\n\ndescribe(\"editable-table test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<editable-table\n        id=\"food-table\"\n        bordered\n        condensed\n        filter\n        printable\n        responsive\n        sort\n        striped\n      >\n        <table>\n          <caption>\n            Is it a\n            <em>sandwich</em\n            >? Food classification chart.\n          </caption>\n          <thead>\n            <tr>\n              <th scope=\"row\">Food</th>\n              <th scope=\"col\">Enclosure</th>\n              <th scope=\"col\">Contents</th>\n              <th scope=\"col\">Orientation</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Hamburger</th>\n              <td>one bun, split into two</td>\n              <td>meat, vegetables, cheese, <i>and/or</i> condiments</td>\n              <td>horizontal</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Hoagie</th>\n              <td>one bun</td>\n              <td>meat, vegetables, cheese, <i>and/or</i> condiments</td>\n              <td>vertical</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Hot Dog</th>\n              <td>one bun</td>\n              <td>meat, vegetables, cheese, <i>and/or</i> condiments</td>\n              <td>vertical</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Hot Pocket</th>\n              <td>two crusts sealed together</td>\n              <td>meat, vegetables, cheese, <i>and/or</i> condiments</td>\n              <td>horizontal</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Pie</th>\n              <td>two crusts sealed together</td>\n              <td>fruit or meat, vegetables, <i>and/or</i> cheese</td>\n              <td>horizontal</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Taco</th>\n              <td>one shell</td>\n              <td>meat, vegetables, cheese, <i>and/or</i> condiments</td>\n              <td>vertical</td>\n            </tr>\n          </tbody>\n        </table>\n      </editable-table> `,\n    );\n  });\n\n  it(\"passes the a11y audit\", () => {\n    expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"editable-table passes accessibility test\", async () => {\n    const el = await fixture(html` <editable-table></editable-table> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"editable-table passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<editable-table aria-labelledby=\"editable-table\"></editable-table>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"editable-table can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<editable-table .foo=${'bar'}></editable-table>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<editable-table ></editable-table>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<editable-table></editable-table>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<editable-table></editable-table>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: editMode"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: toggle-edit-mode"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "elmsln-loading": {
      "element": "elmsln-loading",
      "component": {
        "properties": [
          {
            "name": "dark",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "color",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "contrast",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "size",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"medium\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../elmsln-loading.js\";\n/*\ndescribe(\"elmsln-loading test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <elmsln-loading title=\"test-title\"></elmsln-loading> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"elmsln-loading passes accessibility test\", async () => {\n    const el = await fixture(html` <elmsln-loading></elmsln-loading> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"elmsln-loading passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<elmsln-loading aria-labelledby=\"elmsln-loading\"></elmsln-loading>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"elmsln-loading can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<elmsln-loading .foo=${'bar'}></elmsln-loading>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<elmsln-loading ></elmsln-loading>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<elmsln-loading></elmsln-loading>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<elmsln-loading></elmsln-loading>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: dark, color, contrast, size"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "enhanced-text": {
      "element": "enhanced-text",
      "component": {
        "properties": [
          {
            "name": "wikipedia",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "vide",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "fixationPoint",
            "type": "Number",
            "attribute": "fixation-point",
            "config": "type: Number,\n        attribute: \"fixation-point\",",
            "defaultValue": "4"
          },
          {
            "name": "haxcmsGlossary",
            "type": "Boolean",
            "attribute": "haxcms-glossary",
            "config": "type: Boolean,\n        attribute: \"haxcms-glossary\",",
            "defaultValue": "false"
          },
          {
            "name": "haxcmsSiteLocation",
            "type": "String",
            "attribute": "haxcms-site-location",
            "config": "type: String,\n        attribute: \"haxcms-site-location\",",
            "defaultValue": "\"\""
          },
          {
            "name": "haxcmsSite",
            "type": "Object",
            "attribute": "haxcms-site",
            "config": "type: Object,\n        attribute: \"haxcms-site\",",
            "defaultValue": "null"
          },
          {
            "name": "haxcmsMarkAll",
            "type": "Boolean",
            "attribute": "haxcms-mark-all",
            "config": "type: Boolean,\n        attribute: \"haxcms-mark-all\",",
            "defaultValue": "false"
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "auto",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "applyTermFromList",
          "for",
          "enahncedTextResponse"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../enhanced-text.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<enhanced-text></enhanced-text>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: wikipedia, vide, fixationPoint, haxcmsGlossary, haxcmsSiteLocation, haxcmsSite, haxcmsMarkAll, loading, auto"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: fixation-point, haxcms-glossary, haxcms-site-location, haxcms-site, haxcms-mark-all"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "es-global-bridge": {
      "element": "es-global-bridge",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "event-badge": {
      "element": "event-badge",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"haxor\""
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"https://avatars1.githubusercontent.com/u/329735?s=400&v=4\""
          },
          {
            "name": "name",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"bto.pro\""
          },
          {
            "name": "position",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"1337 dev\""
          },
          {
            "name": "logo",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "organization",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"Penn State\""
          },
          {
            "name": "tvcolor",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"light-blue\""
          },
          {
            "name": "knobcolor",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"purple\""
          },
          {
            "name": "sepia",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "blackwhite",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../event-badge.js\";\n\ndescribe(\"event-badge test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <event-badge></event-badge> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, image, name, position, logo, organization, tvcolor, knobcolor, sepia, blackwhite"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "example-hax-element": {
      "element": "example-hax-element",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "DDDSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../example-hax-element.js\";\n\ndescribe(\"ExampleHaxElement test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <example-hax-element\n        title=\"title\"\n      ></example-hax-element>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "example-haxcms-theme": {
      "element": "example-haxcms-theme",
      "component": {
        "properties": [
          {
            "name": "activeId",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "_items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "HAXCMSGlobalStyleSheetContent"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../example-haxcms-theme.js\";\n\ndescribe(\"ExampleHaxcmsTheme test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <example-haxcms-theme\n        title=\"title\"\n      ></example-haxcms-theme>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: activeId, _items"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "figure-label": {
      "element": "figure-label",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "description",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../figure-label.js\";\n\ndescribe(\"figure-label test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <figure-label title=\"test-title\"></figure-label>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"figure-label passes accessibility test\", async () => {\n    const el = await fixture(html` <figure-label></figure-label> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"figure-label passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<figure-label aria-labelledby=\"figure-label\"></figure-label>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"figure-label can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<figure-label .foo=${'bar'}></figure-label>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<figure-label ></figure-label>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<figure-label></figure-label>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<figure-label></figure-label>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, description"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "file-system-broker": {
      "element": "file-system-broker",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "typeToAccept",
          "switch",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../file-system-broker.js\";\n\ndescribe(\"file-system-broker test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <file-system-broker title=\"test-title\"></file-system-broker>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"file-system-broker passes accessibility test\", async () => {\n    const el = await fixture(html` <file-system-broker></file-system-broker> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"file-system-broker passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<file-system-broker\n        aria-labelledby=\"file-system-broker\"\n      ></file-system-broker>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"file-system-broker can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<file-system-broker .foo=${'bar'}></file-system-broker>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<file-system-broker ></file-system-broker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<file-system-broker></file-system-broker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<file-system-broker></file-system-broker>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "fill-in-the-blanks": {
      "element": "fill-in-the-blanks",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "renderDirections",
          "isCorrect",
          "for",
          "if",
          "resetAnswer",
          "guessCount",
          "rebuildWordList",
          "renderInteraction",
          "shuffleArray",
          "refreshEvent",
          "renderFillInBlankField"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "flash-card": {
      "element": "flash-card",
      "component": {
        "properties": [
          {
            "name": "inverted",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "imgSource",
            "type": "String",
            "attribute": "img-source",
            "config": "type: String, attribute: \"img-source\", reflect: true",
            "defaultValue": "\"\""
          },
          {
            "name": "imgKeyword",
            "type": "String",
            "attribute": "img-keyword",
            "config": "type: String, attribute: \"img-keyword\"",
            "defaultValue": "\"\""
          },
          {
            "name": "status",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "statusChanged",
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../flash-card.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<flash-card></flash-card>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: inverted, imgSource, imgKeyword, status"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: img-source, img-keyword"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "fluid-type": {
      "element": "fluid-type",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../fluid-type.js\";\n\ndescribe(\"fluid-type test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <fluid-type title=\"test-title\"></fluid-type>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"fluid-type passes accessibility test\", async () => {\n    const el = await fixture(html` <fluid-type></fluid-type> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"fluid-type passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<fluid-type aria-labelledby=\"fluid-type\"></fluid-type>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"fluid-type can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<fluid-type .foo=${'bar'}></fluid-type>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<fluid-type ></fluid-type>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<fluid-type></fluid-type>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<fluid-type></fluid-type>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "full-width-image": {
      "element": "full-width-image",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          },
          {
            "name": "caption",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../full-width-image.js\";\n\ndescribe(\"full-width-image test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <full-width-image title=\"test-title\"></full-width-image>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"full-width-image passes accessibility test\", async () => {\n    const el = await fixture(html` <full-width-image></full-width-image> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"full-width-image passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<full-width-image\n        aria-labelledby=\"full-width-image\"\n      ></full-width-image>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"full-width-image can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<full-width-image .foo=${'bar'}></full-width-image>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<full-width-image ></full-width-image>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<full-width-image></full-width-image>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<full-width-image></full-width-image>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, caption"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "fullscreen-behaviors": {
      "element": "fullscreen-behaviors",
      "component": {
        "properties": [
          {
            "name": "fullscreen",
            "type": "Boolean",
            "attribute": "fullscreen",
            "config": "type: Boolean, attribute: \"fullscreen\", reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "fullscreenEnabled",
            "type": "Boolean",
            "attribute": "fullscreen-enabled",
            "config": "type: Boolean,\n          attribute: \"fullscreen-enabled\",\n          reflect: true,",
            "defaultValue": "globalThis.document.fullscreenEnabled"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "toggleFullscreen"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "FullscreenBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../fullscreen-behaviors.js\";\n\ndescribe(\"fullscreen-behaviors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <fullscreen-behaviors title=\"test-title\"></fullscreen-behaviors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"fullscreen-behaviors passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <fullscreen-behaviors></fullscreen-behaviors> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"fullscreen-behaviors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<fullscreen-behaviors\n        aria-labelledby=\"fullscreen-behaviors\"\n      ></fullscreen-behaviors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"fullscreen-behaviors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<fullscreen-behaviors .foo=${'bar'}></fullscreen-behaviors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<fullscreen-behaviors ></fullscreen-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<fullscreen-behaviors></fullscreen-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<fullscreen-behaviors></fullscreen-behaviors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: fullscreen, fullscreenEnabled"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "future-terminal-text": {
      "element": "future-terminal-text",
      "component": {
        "properties": [],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "SimpleColorsSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../future-terminal-text.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<future-terminal-text></future-terminal-text>`,\n    );\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "git-corner": {
      "element": "git-corner",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "corner",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          },
          {
            "name": "size",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../git-corner.js\";\n\ndescribe(\"git-corner test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <git-corner title=\"test-title\"></git-corner>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"git-corner passes accessibility test\", async () => {\n    const el = await fixture(html` <git-corner></git-corner> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"git-corner passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<git-corner aria-labelledby=\"git-corner\"></git-corner>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"git-corner can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<git-corner .foo=${'bar'}></git-corner>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<git-corner ></git-corner>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<git-corner></git-corner>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<git-corner></git-corner>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, alt, corner, size"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "github-preview": {
      "element": "github-preview",
      "component": {
        "properties": [
          {
            "name": "repo",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "org",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__description",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "repoLang",
            "type": "String",
            "attribute": "repo-lang",
            "config": "type: String,\n        attribute: \"repo-lang\",\n        reflect: true,"
          },
          {
            "name": "__stars",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "__forks",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "__assetAvailable",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "extended",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "readmeExtended",
            "type": "Boolean",
            "attribute": "readme-extended",
            "config": "type: Boolean,\n        attribute: \"readme-extended\",\n        reflect: true,"
          },
          {
            "name": "headers",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "viewMoreText",
            "type": "String",
            "attribute": "view-more-text",
            "config": "type: String,\n        attribute: \"view-more-text\",",
            "defaultValue": "\"View More\""
          },
          {
            "name": "notFoundText",
            "type": "String",
            "attribute": "not-found-text",
            "config": "type: String,\n        attribute: \"not-found-text\",",
            "defaultValue": "\"Asset not found\""
          },
          {
            "name": "__readmeText",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "branch",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"master\""
          },
          {
            "name": "url",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"https://github.com\""
          },
          {
            "name": "apiUrl",
            "type": "String",
            "attribute": "api-url",
            "config": "type: String,\n        attribute: \"api-url\",",
            "defaultValue": "\"https://api.github.com\""
          },
          {
            "name": "rawUrl",
            "type": "String",
            "attribute": "raw-url",
            "config": "type: String,\n        attribute: \"raw-url\",",
            "defaultValue": "\"https://raw.githubusercontent.com\""
          },
          {
            "name": "readMe",
            "type": "String",
            "attribute": "read-me",
            "config": "type: String,\n        attribute: \"read-me\",",
            "defaultValue": "\"README.md\""
          }
        ],
        "slots": [],
        "events": [
          "hax-register-app"
        ],
        "methods": [
          "if",
          "fetchGithubData",
          "readmeViewMoreHandler",
          "handleResponse",
          "haxHooks",
          "haxgizmoRegistration",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../github-preview.js\";\n\ndescribe(\"github-preview test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <github-preview title=\"test-title\"></github-preview>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"github-preview passes accessibility test\", async () => {\n    const el = await fixture(html` <github-preview></github-preview> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"github-preview passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<github-preview aria-labelledby=\"github-preview\"></github-preview>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"github-preview can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<github-preview .foo=${'bar'}></github-preview>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<github-preview ></github-preview>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<github-preview></github-preview>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<github-preview></github-preview>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: repo, org, __description, repoLang, __stars, __forks, __assetAvailable, extended, readmeExtended, headers, viewMoreText, notFoundText, __readmeText, branch, url, apiUrl, rawUrl, readMe"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: hax-register-app"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "glossy-portfolio-theme": {
      "element": "glossy-portfolio-theme",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "siteDescription",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "relatedItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "isHome",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "items",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "DDDSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../glossy-portfolio-theme.js\";\n\ndescribe(\"GlossyPortfolioTheme test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <glossy-portfolio-theme\n        title=\"title\"\n      ></glossy-portfolio-theme>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, siteDescription, relatedItem, isHome, items"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "grade-book": {
      "element": "grade-book",
      "component": {
        "properties": [
          {
            "name": "displayMode",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "settings",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "ready",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "activeStudent",
            "type": "Number",
            "attribute": "active-student",
            "config": "type: Number, attribute: \"active-student\""
          },
          {
            "name": "activeAssignment",
            "type": "Number",
            "attribute": "active-assignment",
            "config": "type: Number, attribute: \"active-assignment\""
          },
          {
            "name": "totalScore",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "scoreLock",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"googledocs\""
          },
          {
            "name": "sourceData",
            "type": "String",
            "attribute": "source-data",
            "config": "type: String, attribute: \"source-data\""
          },
          {
            "name": "activeSubmission",
            "type": "String",
            "attribute": null,
            "config": "type: String, attribute: false"
          },
          {
            "name": "database",
            "type": "Object",
            "attribute": null,
            "config": "type: Object, attribute: false"
          },
          {
            "name": "activeRubric",
            "type": "Object",
            "attribute": null,
            "config": "type: Object, attribute: false"
          },
          {
            "name": "assessmentView",
            "type": "Object",
            "attribute": null,
            "config": "type: Object, attribute: false"
          },
          {
            "name": "activeGrading",
            "type": "Object",
            "attribute": null,
            "config": "type: Object, attribute: false"
          },
          {
            "name": "activeStudentSubmissions",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          }
        ],
        "slots": [
          "app-name"
        ],
        "events": [
          "simple-tag-drop",
          "simple-tag-dragstart"
        ],
        "methods": [
          "if",
          "for",
          "resetAssessmentView",
          "getStudentSubmissions",
          "getAssignmentByShortName",
          "getCurrentScore",
          "getActiveRubric",
          "switch",
          "importStateCleanup",
          "transformTable",
          "maintainScrollPosition",
          "processassignmentsData",
          "processtagsData",
          "processrubricsData",
          "processrosterData",
          "processsettingsData",
          "renderSubmission",
          "studentLetterGradeHistoryClick",
          "activateOption",
          "mouseHighlight",
          "mouseLeave",
          "settingChanged",
          "handleGridScaling",
          "checkTabHeight",
          "studentreportClick",
          "openWindow",
          "renderSubmissionInWindow",
          "selectSource",
          "loadFromSource",
          "loadFromExistingSource",
          "loadFromFilesystem",
          "rubricCriteriaPointsChange",
          "updateTotalScore",
          "totalScoreChangedEvent",
          "toggleLock",
          "updateStudentReport",
          "getCriteriaScore",
          "getCriteriaFeedback",
          "qualitativeFeedbackUpdate",
          "keyDown",
          "pickColor",
          "while",
          "setDragTransfer"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "UIRenderPieces"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../grade-book.js\";\n\ndescribe(\"grade-book test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <grade-book-lite\n        accent-color=\"blue\"\n        source=\"googledocs\"\n        source-data=\"2PACX-1vQWAKQNyYk6TmE6AaArXZNJY6BZxfbzVb3a1zRVYZzPO0HG-Jcjm4yVHWICVgX9jM8Ef_sKYAv3WnRq\"\n      >\n      </grade-book-lite>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"grade-book passes accessibility test\", async () => {\n    const el = await fixture(html` <grade-book></grade-book> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"grade-book passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<grade-book aria-labelledby=\"grade-book\"></grade-book>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"grade-book can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<grade-book .foo=${'bar'}></grade-book>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<grade-book ></grade-book>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<grade-book></grade-book>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<grade-book></grade-book>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: displayMode, settings, disabled, loading, ready, activeStudent, activeAssignment, totalScore, scoreLock, source, sourceData, activeSubmission, database, activeRubric, assessmentView, activeGrading, activeStudentSubmissions"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: app-name"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: simple-tag-drop, simple-tag-dragstart"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "grid-plate": {
      "element": "grid-plate",
      "component": {
        "properties": [
          {
            "name": "itemPadding",
            "type": "Number",
            "attribute": "item-padding",
            "config": "type: Number,\n        reflect: true,\n        attribute: \"item-padding\","
          },
          {
            "name": "itemMargin",
            "type": "Number",
            "attribute": "item-margin",
            "config": "type: Number,\n        reflect: true,\n        attribute: \"item-margin\","
          },
          {
            "name": "breakpointSm",
            "type": "Number",
            "attribute": "breakpoint-sm",
            "config": "type: Number,\n        attribute: \"breakpoint-sm\","
          },
          {
            "name": "breakpointMd",
            "type": "Number",
            "attribute": "breakpoint-md",
            "config": "type: Number,\n        attribute: \"breakpoint-md\","
          },
          {
            "name": "breakpointLg",
            "type": "Number",
            "attribute": "breakpoint-lg",
            "config": "type: Number,\n        attribute: \"breakpoint-lg\","
          },
          {
            "name": "breakpointXl",
            "type": "Number",
            "attribute": "breakpoint-xl",
            "config": "type: Number,\n        attribute: \"breakpoint-xl\","
          },
          {
            "name": "columns",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,\n        reflect: true,"
          },
          {
            "name": "dataHaxRay",
            "type": "String",
            "attribute": "data-hax-ray",
            "config": "type: String,\n        attribute: \"data-hax-ray\",\n        reflect: true,"
          },
          {
            "name": "disableResponsive",
            "type": "Boolean",
            "attribute": "disable-responsive",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"disable-responsive\","
          },
          {
            "name": "layout",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          }
        ],
        "slots": [
          "col-${num}"
        ],
        "events": [
          "responsive-element",
          "disable-responsive-changed",
          "resize"
        ],
        "methods": [
          "for",
          "switch",
          "if",
          "resize",
          "haxactiveElementChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../grid-plate.js\";\n\ndescribe(\"grid-plate test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <grid-plate title=\"test-title\"></grid-plate>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"grid-plate passes accessibility test\", async () => {\n    const el = await fixture(html` <grid-plate></grid-plate> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"grid-plate passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<grid-plate aria-labelledby=\"grid-plate\"></grid-plate>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"grid-plate can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<grid-plate .foo=${'bar'}></grid-plate>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<grid-plate ></grid-plate>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<grid-plate></grid-plate>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<grid-plate></grid-plate>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: itemPadding, itemMargin, breakpointSm, breakpointMd, breakpointLg, breakpointXl, columns, dataHaxRay, disableResponsive, layout"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: col-${num}"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: responsive-element, disable-responsive-changed, resize"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "h-a-x": {
      "element": "h-a-x",
      "component": {
        "properties": [],
        "slots": [],
        "events": [
          "hax-save-body-value"
        ],
        "methods": [
          "if",
          "cancelEvent",
          "storeReady",
          "importSlotToHaxBody",
          "for",
          "appStoreReady",
          "applyHAX",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../h-a-x.js\";\ndescribe(\"h-a-x test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <h-a-x\n        app-store='{\"url\": \"${new URL(\"../demo/appstore.json\", import.meta.url)\n          .href}\"}'\n        offset-margin=\"0px 0px 0px 48px\"\n        element-align=\"right\"\n      >\n        <p>This is h-a-x</p>\n        <ul>\n          <li>You'll love this because...</li>\n          <li>You'll love this because...</li>\n        </ul>\n        <p>This is h-a-x</p>\n        <p>This is h-a-x</p>\n      </h-a-x>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"h-a-x passes accessibility test\", async () => {\n    const el = await fixture(html` <h-a-x></h-a-x> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"h-a-x passes accessibility negation\", async () => {\n    const el = await fixture(html`<h-a-x aria-labelledby=\"h-a-x\"></h-a-x>`);\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"h-a-x can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<h-a-x .foo=${'bar'}></h-a-x>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<h-a-x ></h-a-x>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<h-a-x></h-a-x>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<h-a-x></h-a-x>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: hax-save-body-value"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "h5p-element": {
      "element": "h5p-element",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "name: \"source\",\n        type: String,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "setTimeout",
          "createRenderRoot",
          "if",
          "generateUUID",
          "for",
          "h5pReadyCallback",
          "getJSONPromise",
          "libraryPath",
          "findMainLibrary",
          "findAllDependencies",
          "add",
          "sort",
          "clear"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../h5p-element.js\";\n\ndescribe(\"h5p-element test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <h5p-element title=\"test-title\"></h5p-element>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"h5p-element passes accessibility test\", async () => {\n    const el = await fixture(html` <h5p-element></h5p-element> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"h5p-element passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<h5p-element aria-labelledby=\"h5p-element\"></h5p-element>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"h5p-element can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<h5p-element .foo=${'bar'}></h5p-element>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<h5p-element ></h5p-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<h5p-element></h5p-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<h5p-element></h5p-element>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "hal-9000": {
      "element": "hal-9000",
      "component": {
        "properties": [
          {
            "name": "toast",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "commands",
            "type": "Object",
            "attribute": null,
            "config": "name: \"commands\",\n        type: Object,"
          },
          {
            "name": "respondsTo",
            "type": "String",
            "attribute": "responds-to",
            "config": "name: \"respondsTo\",\n        type: String,\n        attribute: \"responds-to\","
          },
          {
            "name": "debug",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"debug\",\n        type: Boolean,"
          },
          {
            "name": "auto",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"auto\",\n        type: Boolean,\n        reflect: true,"
          },
          {
            "name": "enabled",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"enabled\",\n        type: Boolean,\n        reflect: true,"
          },
          {
            "name": "pitch",
            "type": "Number",
            "attribute": null,
            "config": "name: \"pitch\",\n        type: Number,\n        reflect: true,"
          },
          {
            "name": "rate",
            "type": "Number",
            "attribute": null,
            "config": "name: \"rate\",\n        type: Number,\n        reflect: true,"
          },
          {
            "name": "language",
            "type": "String",
            "attribute": null,
            "config": "name: \"language\",\n        type: String,\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [
          "super-daemon-toast-hide",
          "super-daemon-toast-show"
        ],
        "methods": [
          "for",
          "if",
          "addCommands",
          "speak",
          "setToast"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hal-9000.js\";\n\ndescribe(\"hal-9000 test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <hal-9000 title=\"test-title\"></hal-9000> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hal-9000 passes accessibility test\", async () => {\n    const el = await fixture(html` <hal-9000></hal-9000> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hal-9000 passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hal-9000 aria-labelledby=\"hal-9000\"></hal-9000>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hal-9000 can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hal-9000 .foo=${'bar'}></hal-9000>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hal-9000 ></hal-9000>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hal-9000></hal-9000>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hal-9000></hal-9000>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: toast, commands, respondsTo, debug, auto, enabled, pitch, rate, language"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: super-daemon-toast-hide, super-daemon-toast-show"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "hax-body": {
      "element": "hax-body",
      "component": {
        "properties": [
          {
            "name": "_useristyping",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "haxMover",
            "type": "Boolean",
            "attribute": "hax-mover",
            "config": "type: Boolean,\n        attribute: \"hax-mover\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "editMode",
            "type": "Boolean",
            "attribute": "edit-mode",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"edit-mode\",",
            "defaultValue": "false"
          },
          {
            "name": "elementAlign",
            "type": "String",
            "attribute": "element-align",
            "config": "type: String,\n        reflect: true,\n        attribute: \"element-align\","
          },
          {
            "name": "trayDetail",
            "type": "String",
            "attribute": "tray-detail",
            "config": "type: String,\n        reflect: true,\n        attribute: \"tray-detail\","
          },
          {
            "name": "trayStatus",
            "type": "String",
            "attribute": "tray-status",
            "config": "type: String,\n        reflect: true,\n        attribute: \"tray-status\","
          },
          {
            "name": "activeNode",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,",
            "defaultValue": "null"
          },
          {
            "name": "canMoveElement",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "viewSourceToggle",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "hax-register-body",
          "place-holder-file-drop",
          "hax-drop-focus-event"
        ],
        "methods": [
          "if",
          "dragEndBody",
          "scrollerFixclickEvent",
          "blurEvent",
          "dragEnterBody",
          "revealMenuIfHidden",
          "calcClasses",
          "HAXBODYStyleSheetContent",
          "switch",
          "keyboardShortCutProcess",
          "setActiveNode",
          "elementMidViewport",
          "replacePlaceholder",
          "getAllSlotConfig",
          "getParentGrid",
          "getSlotConfig",
          "for",
          "haxClearBody",
          "haxInsert",
          "hideContextMenus",
          "positionContextMenus",
          "haxMoveGridPlate",
          "haxReplaceNode",
          "haxChangeTagName",
          "haxDeleteNode",
          "importContent",
          "while",
          "sortGridSlots",
          "scrollHere",
          "undo",
          "redo",
          "function",
          "undoManagerStackLogic",
          "dropEvent",
          "dragEnter",
          "handleMousemove",
          "dragLeave",
          "toggleElementEditMode",
          "unsetElementEditMode",
          "setElementEditMode",
          "unsetSlotEditMode",
          "setSlotEditMode"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hax-body.js\";\n/*\ndescribe(\"hax-body test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <hax-body title=\"test-title\"></hax-body> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hax-body passes accessibility test\", async () => {\n    const el = await fixture(html` <hax-body></hax-body> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hax-body passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hax-body aria-labelledby=\"hax-body\"></hax-body>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hax-body can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hax-body .foo=${'bar'}></hax-body>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hax-body ></hax-body>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hax-body></hax-body>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hax-body></hax-body>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: _useristyping, haxMover, editMode, elementAlign, trayDetail, trayStatus, activeNode, canMoveElement, viewSourceToggle"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: hax-register-body, place-holder-file-drop, hax-drop-focus-event"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "hax-body-behaviors": {
      "element": "hax-body-behaviors",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hax-body-behaviors.js\";\n\ndescribe(\"hax-body-behaviors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <hax-body-behaviors title=\"test-title\"></hax-body-behaviors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hax-body-behaviors passes accessibility test\", async () => {\n    const el = await fixture(html` <hax-body-behaviors></hax-body-behaviors> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hax-body-behaviors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hax-body-behaviors\n        aria-labelledby=\"hax-body-behaviors\"\n      ></hax-body-behaviors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hax-body-behaviors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hax-body-behaviors .foo=${'bar'}></hax-body-behaviors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hax-body-behaviors ></hax-body-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hax-body-behaviors></hax-body-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hax-body-behaviors></hax-body-behaviors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "hax-bookmarklet": {
      "element": "hax-bookmarklet",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hax-bookmarklet.js\";\n\ndescribe(\"hax-bookmarklet test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <hax-bookmarklet title=\"test-title\"></hax-bookmarklet>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hax-bookmarklet passes accessibility test\", async () => {\n    const el = await fixture(html` <hax-bookmarklet></hax-bookmarklet> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hax-bookmarklet passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hax-bookmarklet\n        aria-labelledby=\"hax-bookmarklet\"\n      ></hax-bookmarklet>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hax-bookmarklet can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hax-bookmarklet .foo=${'bar'}></hax-bookmarklet>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hax-bookmarklet ></hax-bookmarklet>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hax-bookmarklet></hax-bookmarklet>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hax-bookmarklet></hax-bookmarklet>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "hax-cloud": {
      "element": "hax-cloud",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "createRenderRoot",
          "if",
          "loadLocalHax"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../hax-cloud.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<hax-cloud></hax-cloud>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "hax-iconset": {
      "element": "hax-iconset",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hax-iconset.js\";\n\ndescribe(\"hax-iconset test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <hax-iconset title=\"test-title\"></hax-iconset>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hax-iconset passes accessibility test\", async () => {\n    const el = await fixture(html` <hax-iconset></hax-iconset> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hax-iconset passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hax-iconset aria-labelledby=\"hax-iconset\"></hax-iconset>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hax-iconset can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hax-iconset .foo=${'bar'}></hax-iconset>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hax-iconset ></hax-iconset>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hax-iconset></hax-iconset>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hax-iconset></hax-iconset>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "hax-logo": {
      "element": "hax-logo",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hax-logo.js\";\n\ndescribe(\"hax-logo test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <hax-logo title=\"test-title\"></hax-logo> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hax-logo passes accessibility test\", async () => {\n    const el = await fixture(html` <hax-logo></hax-logo> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hax-logo passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hax-logo aria-labelledby=\"hax-logo\"></hax-logo>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hax-logo can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hax-logo .foo=${'bar'}></hax-logo>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hax-logo ></hax-logo>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hax-logo></hax-logo>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hax-logo></hax-logo>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "haxcms-elements": {
      "element": "haxcms-elements",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "// local development and mobx\nimport { fixture, expect, html } from \"@open-wc/testing\";\nimport \"@haxtheweb/haxcms-elements/lib/core/haxcms-site-builder.js\";\ndescribe(\"haxcms-elements test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<haxcms-site-builder\n        id=\"site\"\n        file=\"${new URL(\"../demo/site.json\", import.meta.url).href}\"\n      ></haxcms-site-builder>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"haxcms-elements passes accessibility test\", async () => {\n    const el = await fixture(html` <haxcms-elements></haxcms-elements> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"haxcms-elements passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<haxcms-elements\n        aria-labelledby=\"haxcms-elements\"\n      ></haxcms-elements>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"haxcms-elements can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<haxcms-elements .foo=${'bar'}></haxcms-elements>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<haxcms-elements ></haxcms-elements>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<haxcms-elements></haxcms-elements>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<haxcms-elements></haxcms-elements>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "haxor-slevin": {
      "element": "haxor-slevin",
      "component": {
        "properties": [
          {
            "name": "color",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "selectedPage",
            "type": "Number",
            "attribute": "selected-page",
            "config": "type: Number,\n        reflect: true,\n        attribute: \"selected-page\","
          },
          {
            "name": "activeManifestIndexCounter",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "activeItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "stateClass",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__mainPosts",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "__followUpPosts",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          }
        ],
        "slots": [],
        "events": [
          "resize"
        ],
        "methods": [
          "if",
          "siteModalClick",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "HAXCMSThemeParts"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../haxor-slevin.js\";\n/*\ndescribe(\"haxor-slevin test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <haxor-slevin title=\"test-title\"></haxor-slevin> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"haxor-slevin passes accessibility test\", async () => {\n    const el = await fixture(html` <haxor-slevin></haxor-slevin> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"haxor-slevin passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<haxor-slevin aria-labelledby=\"haxor-slevin\"></haxor-slevin>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"haxor-slevin can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<haxor-slevin .foo=${'bar'}></haxor-slevin>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<haxor-slevin ></haxor-slevin>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<haxor-slevin></haxor-slevin>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<haxor-slevin></haxor-slevin>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: color, selectedPage, activeManifestIndexCounter, activeItem, stateClass, __mainPosts, __followUpPosts"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: resize"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "hex-picker": {
      "element": "hex-picker",
      "component": {
        "properties": [
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"#000000FF\""
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "largeDisplay",
            "type": "Boolean",
            "attribute": "large-display",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"large-display\","
          }
        ],
        "slots": [],
        "events": [
          "value-changed"
        ],
        "methods": [
          "if",
          "renderFieldSet"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hex-picker.js\";\n\ndescribe(\"hex-picker test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <hex-picker title=\"test-title\"></hex-picker>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hex-picker passes accessibility test\", async () => {\n    const el = await fixture(html` <hex-picker></hex-picker> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hex-picker passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hex-picker aria-labelledby=\"hex-picker\"></hex-picker>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hex-picker can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hex-picker .foo=${'bar'}></hex-picker>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hex-picker ></hex-picker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hex-picker></hex-picker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hex-picker></hex-picker>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: value, disabled, largeDisplay"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: value-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "hexagon-loader": {
      "element": "hexagon-loader",
      "component": {
        "properties": [
          {
            "name": "color",
            "type": "String",
            "attribute": null,
            "config": "name: \"color\",\n        type: String,\n        reflect: true,"
          },
          {
            "name": "size",
            "type": "String",
            "attribute": null,
            "config": "name: \"size\",\n        type: String,\n        reflect: true,"
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"loading\",\n        type: Boolean,\n        reflect: true,"
          },
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "name: \"items\",\n        type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "itemCount",
            "type": "Number",
            "attribute": "item-count",
            "config": "name: \"itemCount\",\n        type: Number,\n        reflect: true,\n        attribute: \"item-count\",",
            "defaultValue": "37"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../hexagon-loader.js\";\n\ndescribe(\"hexagon-loader test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <hexagon-loader title=\"test-title\"></hexagon-loader>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"hexagon-loader passes accessibility test\", async () => {\n    const el = await fixture(html` <hexagon-loader></hexagon-loader> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"hexagon-loader passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<hexagon-loader aria-labelledby=\"hexagon-loader\"></hexagon-loader>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"hexagon-loader can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<hexagon-loader .foo=${'bar'}></hexagon-loader>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<hexagon-loader ></hexagon-loader>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<hexagon-loader></hexagon-loader>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<hexagon-loader></hexagon-loader>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: color, size, loading, items, itemCount"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "html-block": {
      "element": "html-block",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../html-block.js\";\n\ndescribe(\"html-block test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <html-block title=\"test-title\"></html-block>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"html-block passes accessibility test\", async () => {\n    const el = await fixture(html` <html-block></html-block> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"html-block passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<html-block aria-labelledby=\"html-block\"></html-block>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"html-block can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<html-block .foo=${'bar'}></html-block>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<html-block ></html-block>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<html-block></html-block>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<html-block></html-block>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "i18n-manager": {
      "element": "i18n-manager",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "changeLanguageEvent",
          "registerLocalizationEvent",
          "detailNormalize",
          "registerLocalization",
          "for",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../i18n-manager.js\";\n\ndescribe(\"i18n-manager test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <i18n-manager title=\"test-title\"></i18n-manager>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"i18n-manager passes accessibility test\", async () => {\n    const el = await fixture(html` <i18n-manager></i18n-manager> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"i18n-manager passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<i18n-manager aria-labelledby=\"i18n-manager\"></i18n-manager>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"i18n-manager can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<i18n-manager .foo=${'bar'}></i18n-manager>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<i18n-manager ></i18n-manager>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<i18n-manager></i18n-manager>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<i18n-manager></i18n-manager>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "iframe-loader": {
      "element": "iframe-loader",
      "component": {
        "properties": [
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "true"
          },
          {
            "name": "height",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "500"
          },
          {
            "name": "width",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"100%\""
          },
          {
            "name": "isPDF",
            "type": "Boolean",
            "attribute": "is-pdf",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"is-pdf\",",
            "defaultValue": "false"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "this.__iframe.getAttribute(\"src\")"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "iframeLoadingCallback",
          "haxHooks",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../iframe-loader.js\";\n\ndescribe(\"iframe-loader test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <iframe-loader>\n        <iframe src=\"https://btopro.com\" height=\"400px\" width=\"100%\"></iframe>\n      </iframe-loader>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"iframe-loader passes accessibility test\", async () => {\n    const el = await fixture(html` <iframe-loader></iframe-loader> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"iframe-loader passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<iframe-loader aria-labelledby=\"iframe-loader\"></iframe-loader>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"iframe-loader can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<iframe-loader .foo=${'bar'}></iframe-loader>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<iframe-loader ></iframe-loader>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<iframe-loader></iframe-loader>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<iframe-loader></iframe-loader>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: loading, height, width, isPDF, disabled, source"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "image-compare-slider": {
      "element": "image-compare-slider",
      "component": {
        "properties": [
          {
            "name": "bottomAlt",
            "type": "String",
            "attribute": "bottom-alt",
            "config": "type: String,\n        attribute: \"bottom-alt\",",
            "defaultValue": "\"\""
          },
          {
            "name": "bottomDescriptionId",
            "type": "String",
            "attribute": "bottom-description-id",
            "config": "type: String,\n        attribute: \"bottom-description-id\","
          },
          {
            "name": "bottomSrc",
            "type": "String",
            "attribute": "bottom-src",
            "config": "type: String,\n        attribute: \"bottom-src\","
          },
          {
            "name": "opacity",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "position",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "50"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "topAlt",
            "type": "String",
            "attribute": "top-alt",
            "config": "type: String,\n        attribute: \"top-alt\",",
            "defaultValue": "\"\""
          },
          {
            "name": "topDescriptionId",
            "type": "String",
            "attribute": "top-description-id",
            "config": "type: String,\n        attribute: \"top-description-id\","
          },
          {
            "name": "topSrc",
            "type": "String",
            "attribute": "top-src",
            "config": "type: String,\n        attribute: \"top-src\","
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../image-compare-slider.js\";\ndescribe(\"Image comparison\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <image-compare-slider\n        top-description-id=\"cloudy\"\n        top-src=\"https://placekitten.com/400/200\"\n        top-alt=\"Matterhorn without snow\"\n        bottom-description-id=\"snowy\"\n        bottom-src=\"https://placekitten.com/400/201\"\n        bottom-alt=\"Matterhorn with snow\"\n      >\n        <h2 slot=\"heading\">Default Compare Mode</h2>\n        <div slot=\"description\">\n          The slider will fade away the top image\n          <span id=\"cloudy\">(Matterhorn on a cloudy day without snow)</span>\n          to reveal the bottom image\n          <span id=\"snowy\">(Matterhorn on a clear day with snow)</span>.\n        </div>\n      </image-compare-slider>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: bottomAlt, bottomDescriptionId, bottomSrc, opacity, position, title, topAlt, topDescriptionId, topSrc"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: bottom-alt, bottom-description-id, bottom-src, top-alt, top-description-id, top-src"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "image-inspector": {
      "element": "image-inspector",
      "component": {
        "properties": [
          {
            "name": "noLeft",
            "type": "Boolean",
            "attribute": "no-left",
            "config": "type: Boolean,\n        attribute: \"no-left\",",
            "defaultValue": "false"
          },
          {
            "name": "degrees",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,\n        reflect: true,",
            "defaultValue": "0"
          },
          {
            "name": "src",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "hoverClass",
            "type": "String",
            "attribute": "hover-class",
            "config": "type: String,\n        attribute: \"hover-class\","
          }
        ],
        "slots": [
          "toolbar",
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "rotateRight",
          "mirrorImage",
          "zoomIn",
          "zoomOut"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../image-inspector.js\";\n\ndescribe(\"image-inspector test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<image-inspector\n        src=\"https://placekitten.com/400/200\"\n      ></image-inspector>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"image-inspector passes accessibility test\", async () => {\n    const el = await fixture(html` <image-inspector></image-inspector> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"image-inspector passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<image-inspector\n        aria-labelledby=\"image-inspector\"\n      ></image-inspector>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"image-inspector can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<image-inspector .foo=${'bar'}></image-inspector>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<image-inspector ></image-inspector>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<image-inspector></image-inspector>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<image-inspector></image-inspector>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: noLeft, degrees, src, hoverClass"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: toolbar, default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "img-pan-zoom": {
      "element": "img-pan-zoom",
      "component": {
        "properties": [
          {
            "name": "src",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "sources",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "page",
            "type": "Number",
            "attribute": "page",
            "config": "type: Number,\n        attribute: \"page\",",
            "defaultValue": "0"
          },
          {
            "name": "describedBy",
            "type": "String",
            "attribute": "described-by",
            "config": "type: String,\n        attribute: \"described-by\","
          },
          {
            "name": "dzi",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "fadeIn",
            "type": "Boolean",
            "attribute": "fade-in",
            "config": "type: Boolean,\n        attribute: \"fade-in\",",
            "defaultValue": "true"
          },
          {
            "name": "fullscreenToggled",
            "type": "Boolean",
            "attribute": "fullscreen-toggled",
            "config": "type: Boolean,\n        attribute: \"fullscreen-toggled\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "flipToggled",
            "type": "Boolean",
            "attribute": "flip-toggled",
            "config": "type: Boolean,\n        attribute: \"flip-toggled\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "hideSpinner",
            "type": "Boolean",
            "attribute": "hide-spinner",
            "config": "type: Boolean,\n        attribute: \"hide-spinner\",",
            "defaultValue": "false"
          },
          {
            "name": "loaded",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "showNavigationControl",
            "type": "Boolean",
            "attribute": "show-navigation-control",
            "config": "type: Boolean,\n        attribute: \"show-navigation-control\",",
            "defaultValue": "false"
          },
          {
            "name": "showNavigator",
            "type": "Boolean",
            "attribute": "show-navigator",
            "config": "type: Boolean,\n        attribute: \"show-navigator\",",
            "defaultValue": "false"
          },
          {
            "name": "zoomPerClick",
            "type": "Number",
            "attribute": "zoom-per-click",
            "config": "type: Number,\n        attribute: \"zoom-per-click\",",
            "defaultValue": "2.0"
          },
          {
            "name": "zoomPerScroll",
            "type": "Number",
            "attribute": "zoom-per-scroll",
            "config": "type: Number,\n        attribute: \"zoom-per-scroll\",",
            "defaultValue": "1.2"
          },
          {
            "name": "animationTime",
            "type": "Number",
            "attribute": "animation-time",
            "config": "type: Number,\n        attribute: \"animation-time\",",
            "defaultValue": "1.2"
          },
          {
            "name": "navPrevNextWrap",
            "type": "Boolean",
            "attribute": "nav-prev-next-wrap",
            "config": "type: Boolean,\n        attribute: \"nav-prev-next-wrap\",",
            "defaultValue": "false"
          },
          {
            "name": "showRotationControl",
            "type": "Boolean",
            "attribute": "show-rotation-control",
            "config": "type: Boolean,\n        attribute: \"show-rotation-control\",",
            "defaultValue": "false"
          },
          {
            "name": "minZoomImageRatio",
            "type": "Number",
            "attribute": "min-zoom-image-ratio",
            "config": "type: Number,\n        attribute: \"min-zoom-image-ratio\",",
            "defaultValue": "1"
          },
          {
            "name": "maxZoomPixelRatio",
            "type": "Number",
            "attribute": "max-zoom-pixel-ratio",
            "config": "type: Number,\n        attribute: \"max-zoom-pixel-ratio\",",
            "defaultValue": "1.1"
          },
          {
            "name": "constrainDuringPan",
            "type": "Boolean",
            "attribute": "constrain-during-pan",
            "config": "type: Boolean,\n        attribute: \"constrain-during-pan\",",
            "defaultValue": "false"
          },
          {
            "name": "visibilityRatio",
            "type": "Number",
            "attribute": "visibility-ratio",
            "config": "type: Number,\n        attribute: \"visibility-ratio\",",
            "defaultValue": "1"
          },
          {
            "name": "navigatorAutoFade",
            "type": "Boolean",
            "attribute": "navigator-auto-fade",
            "config": "type: Boolean,\n        attribute: \"navigator-auto-fade\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "navigatorPosition",
            "type": "String",
            "attribute": "navigator-position",
            "config": "type: String,\n        attribute: \"navigator-position\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "navigatorTop",
            "type": "String",
            "attribute": "navigator-top",
            "config": "type: String, attribute: \"navigator-top\", reflect: true"
          },
          {
            "name": "navigatorBottom",
            "type": "String",
            "attribute": "navigator-bottom",
            "config": "type: String,\n        attribute: \"navigator-bottom\",\n        reflect: true,"
          },
          {
            "name": "navigatorLeft",
            "type": "String",
            "attribute": "navigator-left",
            "config": "type: String,\n        attribute: \"navigator-left\",\n        reflect: true,"
          },
          {
            "name": "navigatorRight",
            "type": "String",
            "attribute": "navigator-right",
            "config": "type: String,\n        attribute: \"navigator-right\",\n        reflect: true,"
          },
          {
            "name": "navigatorHeight",
            "type": "String",
            "attribute": "navigator-height",
            "config": "type: String,\n        attribute: \"navigator-height\",\n        reflect: true,"
          },
          {
            "name": "navigatorWidth",
            "type": "String",
            "attribute": "navigator-width",
            "config": "type: String,\n        attribute: \"navigator-width\",\n        reflect: true,"
          },
          {
            "name": "navigatorToggled",
            "type": "Boolean",
            "attribute": "navigator-toggled",
            "config": "type: Boolean,\n        attribute: \"navigator-toggled\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "sequenceMode",
            "type": "Boolean",
            "attribute": "sequence-mode",
            "config": "type: Boolean, attribute: \"sequence-mode\"",
            "defaultValue": "false"
          },
          {
            "name": "preserveViewport",
            "type": "Boolean",
            "attribute": "preserve-viewport",
            "config": "type: Boolean, attribute: \"preserve-viewport\"",
            "defaultValue": "false"
          },
          {
            "name": "showReferenceStrip",
            "type": "Boolean",
            "attribute": "show-reference-strip",
            "config": "type: Boolean, attribute: \"show-reference-strip\"",
            "defaultValue": "false"
          },
          {
            "name": "referenceStripScroll",
            "type": "String",
            "attribute": "reference-strip-scroll",
            "config": "type: String,\n        attribute: \"reference-strip-scroll\",",
            "defaultValue": "\"horizontal\""
          },
          {
            "name": "previousButton",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "nextButton",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "homeButton",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "zoomInButton",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "zoomOutButton",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "fullScreenButton",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [],
        "events": [
          "loading-changed",
          "loaded-changed",
          "zoom",
          "page",
          "pan",
          "update-viewport",
          "viewport-changed"
        ],
        "methods": [
          "if",
          "destroy",
          "rotateTo",
          "rotate",
          "pan",
          "zoomIn",
          "zoomOut",
          "toggleFullscreen",
          "toggleFlip",
          "resetZoom",
          "loadedChangedEvent",
          "loadingChangedEvent"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../img-pan-zoom.js\";\n\ndescribe(\"img-pan-zoom test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <img-pan-zoom title=\"test-title\"></img-pan-zoom>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"img-pan-zoom passes accessibility test\", async () => {\n    const el = await fixture(html` <img-pan-zoom></img-pan-zoom> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"img-pan-zoom passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<img-pan-zoom aria-labelledby=\"img-pan-zoom\"></img-pan-zoom>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"img-pan-zoom can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<img-pan-zoom .foo=${'bar'}></img-pan-zoom>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<img-pan-zoom ></img-pan-zoom>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<img-pan-zoom></img-pan-zoom>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<img-pan-zoom></img-pan-zoom>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: src, sources, page, describedBy, dzi, fadeIn, fullscreenToggled, flipToggled, loading, hideSpinner, loaded, showNavigationControl, showNavigator, zoomPerClick, zoomPerScroll, animationTime, navPrevNextWrap, showRotationControl, minZoomImageRatio, maxZoomPixelRatio, constrainDuringPan, visibilityRatio, navigatorAutoFade, navigatorPosition, navigatorTop, navigatorBottom, navigatorLeft, navigatorRight, navigatorHeight, navigatorWidth, navigatorToggled, sequenceMode, preserveViewport, showReferenceStrip, referenceStripScroll, previousButton, nextButton, homeButton, zoomInButton, zoomOutButton, fullScreenButton"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: loading-changed, loaded-changed, zoom, page, pan, update-viewport, viewport-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "img-view-modal": {
      "element": "img-view-modal",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "modal",
            "type": "Object",
            "attribute": null,
            "config": "type: Object",
            "defaultValue": "globalThis.SimpleModal.requestAvailability()"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "modal-button-click"
        ],
        "methods": [
          "modalOpen",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../img-view-modal.js\";\n\ndescribe(\"img-view-modal test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <img-view-modal title=\"test-title\"></img-view-modal>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"img-view-modal passes accessibility test\", async () => {\n    const el = await fixture(html` <img-view-modal></img-view-modal> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"img-view-modal passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<img-view-modal aria-labelledby=\"img-view-modal\"></img-view-modal>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"img-view-modal can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<img-view-modal .foo=${'bar'}></img-view-modal>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<img-view-modal ></img-view-modal>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<img-view-modal></img-view-modal>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<img-view-modal></img-view-modal>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, modal"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: modal-button-click"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "inline-audio": {
      "element": "inline-audio",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "aria",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "playing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "shiny",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "playing-changed"
        ],
        "methods": [
          "handleProgress",
          "if",
          "handlePlaythrough",
          "audioController",
          "load",
          "play",
          "pause",
          "haxHooks",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../inline-audio.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <p>\n        Richard Stallman once sang the\n        <inline-audio\n          shiny\n          dark\n          accent-color=\"purple\"\n          source=\"https://inline-audio-mocha.vercel.app/assets/whopper.mp3\"\n          >Open Source song.</inline-audio\n        >\n        The King of Burgers made a decree. The decree came in the form of a\n        song. Not just any song, but a legendary song that bellowed to the\n        world. This song was of\n        <inline-audio\n          accent-color=\"purple\"\n          source=\"https://inline-audio-mocha.vercel.app/assets/whopper.mp3\"\n          ><span>whoppers, toppers, boppers, and boopers.</span></inline-audio\n        >\n        The seven seas were aghast with the tune of\n        <inline-audio\n          dark\n          accent-color=\"red\"\n          source=\"https://inline-audio-mocha.vercel.app/assets/whopper.mp3\"\n          >?</inline-audio\n        >\n        over the wind. Did you know that the critically acclaimed MMORPG Final\n        Fantasy XIV has a free trial, and includes the entirety of A Realm\n        Reborn AND the award-winning Heavensward expansion up to level 60 with\n        no restrictions on playtime? Sign up, and enjoy Eorzea today!\n      </p>`,\n    );\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, icon, aria, title, playing, shiny"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: playing-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "intersection-element": {
      "element": "intersection-element",
      "component": {
        "error": "Main JS file not found: /home/bto108a/Documents/git/haxtheweb/webcomponents/elements/intersection-element/intersection-element.js",
        "properties": [],
        "slots": [],
        "events": [],
        "methods": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "journey-theme": {
      "element": "journey-theme",
      "component": {
        "properties": [
          {
            "name": "_items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "activeItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "ancestorItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "location",
            "type": "Object",
            "attribute": null,
            "config": "type: Object",
            "defaultValue": "null"
          },
          {
            "name": "basePath",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "dataPrimary",
            "type": "String",
            "attribute": "data-primary",
            "config": "type: String, reflect: true, attribute: \"data-primary\"",
            "defaultValue": "2"
          },
          {
            "name": "siteTheme",
            "type": "String",
            "attribute": "site-theme",
            "config": "type: String, reflect: true, attribute: \"site-theme\"",
            "defaultValue": "UserScaffoldInstance.readMemory(\"HAXCMSSiteTheme\") || \"\""
          },
          {
            "name": "licenseName",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "licenseLink",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "licenseImage",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "lastUpdated",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "copyrightYear",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "pageCurrent",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "pageTotal",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "getItemChildren",
          "switch",
          "HAXSiteRenderXTagsItems",
          "HAXCMSGlobalStyleSheetContent",
          "for",
          "toggleSiteTheme"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../journey-theme.js\";\n\ndescribe(\"JourneyTheme test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <journey-theme\n        title=\"title\"\n      ></journey-theme>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: _items, activeItem, ancestorItem, location, basePath, dataPrimary, siteTheme, licenseName, licenseLink, licenseImage, lastUpdated, copyrightYear, pageCurrent, pageTotal"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: data-primary, site-theme"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "json-outline-schema": {
      "element": "json-outline-schema",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for",
          "clone",
          "newItem",
          "addItem",
          "validateItem",
          "removeItem",
          "updateItem",
          "save",
          "generateUUID",
          "attributeChangedCallback",
          "updateMetadata",
          "getItemValues",
          "getItemSchema",
          "switch",
          "itemsToNodes",
          "treeToNodes",
          "unflattenItems",
          "scrubElementJOSData",
          "nodesToItems",
          "getChildOutline",
          "while"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../json-outline-schema.js\";\n\ndescribe(\"json-outline-schema test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <json-outline-schema title=\"test-title\"></json-outline-schema>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"json-outline-schema passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <json-outline-schema></json-outline-schema> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"json-outline-schema passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<json-outline-schema\n        aria-labelledby=\"json-outline-schema\"\n      ></json-outline-schema>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"json-outline-schema can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<json-outline-schema .foo=${'bar'}></json-outline-schema>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<json-outline-schema ></json-outline-schema>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<json-outline-schema></json-outline-schema>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<json-outline-schema></json-outline-schema>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "jwt-login": {
      "element": "jwt-login",
      "component": {
        "properties": [
          {
            "name": "auto",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "refreshUrl",
            "type": "String",
            "attribute": "refresh-url",
            "config": "type: String,\n        attribute: \"refresh-url\","
          },
          {
            "name": "redirectUrl",
            "type": "String",
            "attribute": "redirect-url",
            "config": "type: String,\n        attribute: \"redirect-url\","
          },
          {
            "name": "logoutUrl",
            "type": "String",
            "attribute": "logout-url",
            "config": "type: String,\n        attribute: \"logout-url\","
          },
          {
            "name": "url",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "method",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"GET\""
          },
          {
            "name": "body",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "key",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "jwt",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [
          "jwt-login-refresh-error",
          "jwt-changed",
          "jwt-logged-in",
          "jwt-token",
          "jwt-login-login-failed"
        ],
        "methods": [
          "lastErrorChanged",
          "if",
          "requestRefreshToken",
          "generateRequest",
          "toggleLogin",
          "loginRequest",
          "logoutRequest",
          "isDifferentDomain",
          "loginResponse",
          "switch"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../jwt-login.js\";\n\ndescribe(\"jwt-login test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <jwt-login title=\"test-title\"></jwt-login> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"jwt-login passes accessibility test\", async () => {\n    const el = await fixture(html` <jwt-login></jwt-login> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"jwt-login passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<jwt-login aria-labelledby=\"jwt-login\"></jwt-login>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"jwt-login can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<jwt-login .foo=${'bar'}></jwt-login>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<jwt-login ></jwt-login>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<jwt-login></jwt-login>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<jwt-login></jwt-login>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: auto, refreshUrl, redirectUrl, logoutUrl, url, method, body, key, jwt"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: jwt-login-refresh-error, jwt-changed, jwt-logged-in, jwt-token, jwt-login-login-failed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "la-tex": {
      "element": "la-tex",
      "component": {
        "properties": [
          {
            "name": "hydrated",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "initialText",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "this.innerText"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "hydrateLaTeX",
          "if",
          "haxHooks",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../la-tex.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<la-tex></la-tex>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: hydrated, initialText"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lazy-image-helpers": {
      "element": "lazy-image-helpers",
      "component": {
        "properties": [
          {
            "name": "imageLoaded",
            "type": "Boolean",
            "attribute": "image-loaded",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"image-loaded\",",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "renderSVGLoader"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin",
          "LoadingHelper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lazy-image-helpers.js\";\n\ndescribe(\"lazy-image-helpers test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <lazy-image-helpers title=\"test-title\"></lazy-image-helpers>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lazy-image-helpers passes accessibility test\", async () => {\n    const el = await fixture(html` <lazy-image-helpers></lazy-image-helpers> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lazy-image-helpers passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lazy-image-helpers\n        aria-labelledby=\"lazy-image-helpers\"\n      ></lazy-image-helpers>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lazy-image-helpers can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lazy-image-helpers .foo=${'bar'}></lazy-image-helpers>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lazy-image-helpers ></lazy-image-helpers>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lazy-image-helpers></lazy-image-helpers>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lazy-image-helpers></lazy-image-helpers>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: imageLoaded"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lazy-import-discover": {
      "element": "lazy-import-discover",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lazy-import-discover.js\";\n/*\ndescribe(\"lazy-import-discover test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <lazy-import-discover title=\"test-title\"></lazy-import-discover> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lazy-import-discover passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <lazy-import-discover></lazy-import-discover> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"lazy-import-discover passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lazy-import-discover\n        aria-labelledby=\"lazy-import-discover\"\n      ></lazy-import-discover>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lazy-import-discover can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lazy-import-discover .foo=${'bar'}></lazy-import-discover>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lazy-import-discover ></lazy-import-discover>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lazy-import-discover></lazy-import-discover>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lazy-import-discover></lazy-import-discover>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "learn-two-theme": {
      "element": "learn-two-theme",
      "component": {
        "properties": [
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "siteModalClick",
          "toggleDrawer"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "LTIResizingMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../learn-two-theme.js\";\n/*\ndescribe(\"learn-two-theme test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <learn-two-theme title=\"test-title\"></learn-two-theme> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"learn-two-theme passes accessibility test\", async () => {\n    const el = await fixture(html` <learn-two-theme></learn-two-theme> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"learn-two-theme passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<learn-two-theme\n        aria-labelledby=\"learn-two-theme\"\n      ></learn-two-theme>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"learn-two-theme can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<learn-two-theme .foo=${'bar'}></learn-two-theme>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<learn-two-theme ></learn-two-theme>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<learn-two-theme></learn-two-theme>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<learn-two-theme></learn-two-theme>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: opened"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lesson-overview": {
      "element": "lesson-overview",
      "component": {
        "properties": [],
        "slots": [
          "prefix",
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "updateSmartHighlightElements",
          "switch"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../lesson-overview.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<lesson-overview></lesson-overview>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: prefix, default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "license-element": {
      "element": "license-element",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "creator",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"(author)\""
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "licenseName",
            "type": "String",
            "attribute": "license-name",
            "config": "type: String,\n        attribute: \"license-name\","
          },
          {
            "name": "licenseImage",
            "type": "String",
            "attribute": "license-image",
            "config": "type: String,\n        attribute: \"license-image\","
          },
          {
            "name": "licenseLink",
            "type": "String",
            "attribute": "license-link",
            "config": "type: String,\n        attribute: \"license-link\","
          },
          {
            "name": "license",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "moreLabel",
            "type": "String",
            "attribute": "more-label",
            "config": "type: String,\n        attribute: \"more-label\",",
            "defaultValue": "\"on the licensing details page\""
          },
          {
            "name": "moreLink",
            "type": "String",
            "attribute": "more-link",
            "config": "type: String,\n        attribute: \"more-link\","
          },
          {
            "name": "hasMore",
            "type": "Boolean",
            "attribute": "has-more",
            "config": "type: Boolean,\n        attribute: \"has-more\","
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../license-element.js\";\n\ndescribe(\"license-element test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <license-element title=\"test-title\"></license-element>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"license-element passes accessibility test\", async () => {\n    const el = await fixture(html` <license-element></license-element> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"license-element passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<license-element\n        aria-labelledby=\"license-element\"\n      ></license-element>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"license-element can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<license-element .foo=${'bar'}></license-element>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<license-element ></license-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<license-element></license-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<license-element></license-element>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, creator, source, licenseName, licenseImage, licenseLink, license, moreLabel, moreLink, hasMore"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lorem-data": {
      "element": "lorem-data",
      "component": {
        "properties": [
          {
            "name": "schemas",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "saveAll",
          "getJson",
          "saveDataUrl",
          "filterQuery",
          "dateFormat",
          "draw",
          "randomArray",
          "randomAspect",
          "randomBool",
          "randomColor",
          "randomHex",
          "randomIcon",
          "randomPlaceImg",
          "randomPicsum",
          "randomKitten",
          "randomFlickr",
          "randomImage",
          "randomImageData",
          "randomProfileImage",
          "randomLink",
          "randomNumber",
          "randomObject",
          "randomOption",
          "randomParagraph",
          "randomSentence",
          "randomType",
          "switch",
          "randomWeightedOption",
          "for",
          "randomWord",
          "shuffle",
          "sortDates",
          "titleCase"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "LoremDataBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lorem-data.js\";\n\ndescribe(\"lorem-data test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <lorem-data title=\"test-title\"></lorem-data>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lorem-data passes accessibility test\", async () => {\n    const el = await fixture(html` <lorem-data></lorem-data> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lorem-data passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lorem-data aria-labelledby=\"lorem-data\"></lorem-data>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lorem-data can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lorem-data .foo=${'bar'}></lorem-data>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lorem-data ></lorem-data>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lorem-data></lorem-data>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lorem-data></lorem-data>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: schemas"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrn-gitgraph": {
      "element": "lrn-gitgraph",
      "component": {
        "properties": [
          {
            "name": "commits",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "template",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"blackarrow\""
          },
          {
            "name": "orientation",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"horizontal\""
          },
          {
            "name": "mode",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "reverseArrow",
            "type": "Boolean",
            "attribute": "reverse-arrow",
            "config": "type: Boolean,\n        attribute: \"reverse-arrow\",",
            "defaultValue": "false"
          },
          {
            "name": "config",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrn-gitgraph.js\";\n\ndescribe(\"lrn-gitgraph test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <lrn-gitgraph title=\"test-title\"></lrn-gitgraph>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrn-gitgraph passes accessibility test\", async () => {\n    const el = await fixture(html` <lrn-gitgraph></lrn-gitgraph> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrn-gitgraph passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrn-gitgraph aria-labelledby=\"lrn-gitgraph\"></lrn-gitgraph>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrn-gitgraph can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrn-gitgraph .foo=${'bar'}></lrn-gitgraph>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrn-gitgraph ></lrn-gitgraph>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrn-gitgraph></lrn-gitgraph>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrn-gitgraph></lrn-gitgraph>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: commits, template, orientation, mode, reverseArrow, config"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrn-math": {
      "element": "lrn-math",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "AuthorInit",
          "typeset",
          "haxHooks",
          "haxactiveElementChanged",
          "if",
          "haxeditModeChanged",
          "updateMath",
          "attributeChangedCallback",
          "switch",
          "refresh"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrn-math.js\";\n/*\ndescribe(\"lrn-math test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <lrn-math title=\"test-title\"></lrn-math> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrn-math passes accessibility test\", async () => {\n    const el = await fixture(html` <lrn-math></lrn-math> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrn-math passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrn-math aria-labelledby=\"lrn-math\"></lrn-math>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrn-math can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrn-math .foo=${'bar'}></lrn-math>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrn-math ></lrn-math>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrn-math></lrn-math>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrn-math></lrn-math>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "lrn-table": {
      "element": "lrn-table",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "csvFile",
            "type": "String",
            "attribute": "csv-file",
            "config": "type: String,\n        attribute: \"csv-file\","
          },
          {
            "name": "description",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrn-table.js\";\n\ndescribe(\"lrn-table test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <lrn-table title=\"test-title\"></lrn-table> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrn-table passes accessibility test\", async () => {\n    const el = await fixture(html` <lrn-table></lrn-table> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrn-table passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrn-table aria-labelledby=\"lrn-table\"></lrn-table>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrn-table can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrn-table .foo=${'bar'}></lrn-table>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrn-table ></lrn-table>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrn-table></lrn-table>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrn-table></lrn-table>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, csvFile, description"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrn-vocab": {
      "element": "lrn-vocab",
      "component": {
        "properties": [
          {
            "name": "term",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "haxHooks",
          "haxactiveElementChanged",
          "if",
          "haxeditModeChanged",
          "openDialog",
          "for"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrn-vocab.js\";\n\ndescribe(\"lrn-vocab test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <lrn-vocab term=\"breaching\">\n          <video-player\n            source=\"https://youtu.be/4EojXTOtNTA\"\n          ></video-player> </lrn-vocab\n        >like whales when attacking prey from underneath.`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrn-vocab passes accessibility test\", async () => {\n    const el = await fixture(html` <lrn-vocab></lrn-vocab> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrn-vocab passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrn-vocab aria-labelledby=\"lrn-vocab\"></lrn-vocab>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrn-vocab can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrn-vocab .foo=${'bar'}></lrn-vocab>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrn-vocab ></lrn-vocab>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrn-vocab></lrn-vocab>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrn-vocab></lrn-vocab>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: term"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrndesign-chart": {
      "element": "lrndesign-chart",
      "component": {
        "properties": [
          {
            "name": "accentColor",
            "type": "String",
            "attribute": "accent-color",
            "config": "type: String,\n          attribute: \"accent-color\",\n          reflect: true,"
          },
          {
            "name": "dark",
            "type": "Boolean",
            "attribute": "dark",
            "config": "type: Boolean,\n          attribute: \"dark\",\n          reflect: true,"
          },
          {
            "name": "height",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "reverseData",
            "type": "Boolean",
            "attribute": "reverse-data",
            "config": "type: Boolean,\n          attribute: \"reverse-data\","
          },
          {
            "name": "width",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "setProperties",
          "setBarLineProperties"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "ChartistRenderSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrndesign-chart.js\";\n\ndescribe(\"lrndesign-chart test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <lrndesign-chart title=\"test-title\"></lrndesign-chart>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrndesign-chart passes accessibility test\", async () => {\n    const el = await fixture(html` <lrndesign-chart></lrndesign-chart> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrndesign-chart passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrndesign-chart\n        aria-labelledby=\"lrndesign-chart\"\n      ></lrndesign-chart>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrndesign-chart can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrndesign-chart .foo=${'bar'}></lrndesign-chart>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrndesign-chart ></lrndesign-chart>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrndesign-chart></lrndesign-chart>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrndesign-chart></lrndesign-chart>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: accentColor, dark, height, reverseData, width"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrndesign-imagemap": {
      "element": "lrndesign-imagemap",
      "component": {
        "properties": [
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "src",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "hotspotDetails",
            "type": "Array",
            "attribute": "hotspot-details",
            "config": "type: Array,\n        attribute: \"hotspot-details\","
          },
          {
            "name": "subtopicOf",
            "type": "String",
            "attribute": "subtopic-of",
            "config": "type: String,\n        reflect: true,\n        attribute: \"subtopic-of\","
          },
          {
            "name": "parent",
            "type": "String",
            "attribute": "parent",
            "config": "type: String,\n        reflect: true,\n        attribute: \"parent\","
          },
          {
            "name": "__activeHotspot",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [
          "heading"
        ],
        "events": [],
        "methods": [
          "if",
          "openHotspot",
          "closeHotspot",
          "resetHotspots",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrndesign-imagemap.js\";\n/*\ndescribe(\"lrndesign-imagemap test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <lrndesign-imagemap title=\"test-title\"></lrndesign-imagemap> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrndesign-imagemap passes accessibility test\", async () => {\n    const el = await fixture(html` <lrndesign-imagemap></lrndesign-imagemap> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrndesign-imagemap passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrndesign-imagemap\n        aria-labelledby=\"lrndesign-imagemap\"\n      ></lrndesign-imagemap>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrndesign-imagemap can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrndesign-imagemap .foo=${'bar'}></lrndesign-imagemap>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrndesign-imagemap ></lrndesign-imagemap>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrndesign-imagemap></lrndesign-imagemap>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrndesign-imagemap></lrndesign-imagemap>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: label, src, hotspotDetails, subtopicOf, parent, __activeHotspot"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: heading"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrndesign-timeline": {
      "element": "lrndesign-timeline",
      "component": {
        "properties": [
          {
            "name": "events",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "timelineSize",
            "type": "String",
            "attribute": "timeline-size",
            "config": "type: String,\n        reflect: true,\n        attribute: \"timeline-size\",\n        value: \"xs\",\n        /**\n         * title of timeline\n         */\n        timelineTitle: {\n          type: String,\n          reflect: true,\n          attribute: \"timeline-title\",",
            "defaultValue": "\"xs\""
          },
          {
            "name": "title",
            "type": "String",
            "attribute": "title",
            "config": "type: String,\n          attribute: \"title\","
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "responsive-element"
        ],
        "methods": [
          "if",
          "updateTimeline"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrndesign-timeline.js\";\n/*\ndescribe(\"lrndesign-timeline test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <lrndesign-timeline id=\"mytimeline\" accent-color=\"blue\" dark>\n        <p>This is lrndesign-timeline</p>\n        <section>\n          <img\n            class=\"media\"\n            alt=\"Black and white photo original Old Main in an empty field.\"\n            src=\"https://libraries.psu.edu/sites/default/files/migrated/1287768717666.jpg\"\n          />\n          <h3>\"1856 - Construction of Old Main</h3>\n          <p>\n            Construction of Old Main (the &amp;quot;College Building&amp;quot;)\n            begun; supervised by William G. Waring, who was appointed\n            superintendent to open the school and plan farm, orchards and\n            nursery.\n          </p>\n        </section>\n        <section>\n          <img\n            class=\"media\"\n            alt=\"Black and white photo original Old Main in an empty field.\"\n            src=\"https://libraries.psu.edu/sites/default/files/migrated/1287768717666.jpg\"\n          />\n          <h3>\"1856 - Construction of Old Main</h3>\n          <p>\n            Construction of Old Main (the &amp;quot;College Building&amp;quot;)\n            begun; supervised by William G. Waring, who was appointed\n            superintendent to open the school and plan farm, orchards and\n            nursery.\n          </p>\n        </section>\n      </lrndesign-timeline>`\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrndesign-timeline passes accessibility test\", async () => {\n    const el = await fixture(html` <lrndesign-timeline></lrndesign-timeline> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrndesign-timeline passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrndesign-timeline\n        aria-labelledby=\"lrndesign-timeline\"\n      ></lrndesign-timeline>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrndesign-timeline can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrndesign-timeline .foo=${'bar'}></lrndesign-timeline>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrndesign-timeline ></lrndesign-timeline>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrndesign-timeline></lrndesign-timeline>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrndesign-timeline></lrndesign-timeline>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: events, timelineSize, title"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: responsive-element"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "lrs-elements": {
      "element": "lrs-elements",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "// local development and mobx\nwindow.process = window.process || {\n  env: {\n    NODE_ENV: \"development\",\n  },\n};\nimport { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lrs-elements.js\";\n\ndescribe(\"lrs-elements test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <lrs-elements title=\"test-title\"></lrs-elements>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lrs-elements passes accessibility test\", async () => {\n    const el = await fixture(html` <lrs-elements></lrs-elements> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lrs-elements passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lrs-elements aria-labelledby=\"lrs-elements\"></lrs-elements>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lrs-elements can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lrs-elements .foo=${'bar'}></lrs-elements>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lrs-elements ></lrs-elements>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lrs-elements></lrs-elements>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lrs-elements></lrs-elements>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "lunr-search": {
      "element": "lunr-search",
      "component": {
        "properties": [
          {
            "name": "dataSource",
            "type": "String",
            "attribute": "data-source",
            "config": "type: String,\n        attribute: \"data-source\",",
            "defaultValue": "null"
          },
          {
            "name": "__auto",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "data",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "method",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"GET\""
          },
          {
            "name": "search",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "results",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "noStopWords",
            "type": "Boolean",
            "attribute": "no-stop-words",
            "config": "type: Boolean,\n        attribute: \"no-stop-words\",",
            "defaultValue": "false"
          },
          {
            "name": "fields",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "indexNoStopWords",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "index",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "__lunrLoaded",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "limit",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "500"
          },
          {
            "name": "minScore",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "0"
          },
          {
            "name": "log",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "demo",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "searched",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lunr-search.js\";\n\ndescribe(\"lunr-search test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<lunr-search\n        data-source=\"${new URL(\"../demo/lunrSearchIndex.json\", import.meta.url)\n          .href}\"\n        demo\n      ></lunr-search>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"lunr-search passes accessibility test\", async () => {\n    const el = await fixture(html` <lunr-search></lunr-search> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"lunr-search passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<lunr-search aria-labelledby=\"lunr-search\"></lunr-search>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"lunr-search can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<lunr-search .foo=${'bar'}></lunr-search>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<lunr-search ></lunr-search>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<lunr-search></lunr-search>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<lunr-search></lunr-search>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: dataSource, __auto, data, method, search, results, noStopWords, fields, indexNoStopWords, index, __lunrLoaded, limit, minScore, log, demo"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "map-menu": {
      "element": "map-menu",
      "component": {
        "properties": [
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "editControls",
            "type": "Boolean",
            "attribute": "edit-controls",
            "config": "type: Boolean,\n        attribute: \"edit-controls\",",
            "defaultValue": "false"
          },
          {
            "name": "isFlex",
            "type": "Boolean",
            "attribute": "is-flex",
            "config": "type: Boolean,\n        attribute: \"is-flex\",",
            "defaultValue": "false"
          },
          {
            "name": "isHorizontal",
            "type": "Boolean",
            "attribute": "is-horizontal",
            "config": "type: Boolean,\n        attribute: \"is-horizontal\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "maxDepth",
            "type": "Number",
            "attribute": "max-depth",
            "config": "type: Number,\n        attribute: \"max-depth\",",
            "defaultValue": "5"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Content outline\""
          },
          {
            "name": "data",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "null"
          },
          {
            "name": "manifest",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "selected",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "activeItem",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "autoScroll",
            "type": "Boolean",
            "attribute": "auto-scroll",
            "config": "type: Boolean,\n        attribute: \"auto-scroll\",",
            "defaultValue": "false"
          },
          {
            "name": "activeIndicator",
            "type": "Boolean",
            "attribute": "active-indicator",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"active-indicator\",",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "selected",
          "map-menu-item-hidden-check"
        ],
        "methods": [
          "if",
          "refreshActiveChildren",
          "switch"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../map-menu.js\";\n\ndescribe(\"map-menu test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <map-menu title=\"test-title\"></map-menu> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"map-menu passes accessibility test\", async () => {\n    const el = await fixture(html` <map-menu></map-menu> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"map-menu passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<map-menu aria-labelledby=\"map-menu\"></map-menu>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"map-menu can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<map-menu .foo=${'bar'}></map-menu>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<map-menu ></map-menu>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<map-menu></map-menu>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<map-menu></map-menu>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: disabled, editControls, isFlex, isHorizontal, maxDepth, title, data, manifest, items, selected, activeItem, autoScroll, activeIndicator"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: selected, map-menu-item-hidden-check"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "mark-the-words": {
      "element": "mark-the-words",
      "component": {
        "properties": [
          {
            "name": "wordList",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "statement",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "missedAnswers",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "numberCorrect",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "numberGuessed",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "getGuess",
          "rebuildWordList",
          "for",
          "selectWord",
          "isCorrect",
          "if",
          "resetAnswer",
          "guessCount",
          "renderInteraction",
          "renderDirections",
          "renderFeedback"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../mark-the-words.js\";\n\ndescribe(\"mark-the-words test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <mark-the-words answers=\"this,is\">\n        This is mark-the-words\n      </mark-the-words>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"mark-the-words passes accessibility test\", async () => {\n    const el = await fixture(html` <mark-the-words></mark-the-words> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"mark-the-words passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<mark-the-words aria-labelledby=\"mark-the-words\"></mark-the-words>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"mark-the-words can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<mark-the-words .foo=${'bar'}></mark-the-words>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<mark-the-words ></mark-the-words>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<mark-the-words></mark-the-words>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<mark-the-words></mark-the-words>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: wordList, statement, missedAnswers, numberCorrect, numberGuessed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "matching-question": {
      "element": "matching-question",
      "component": {
        "properties": [
          {
            "name": "dragging",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "dragEnter",
            "type": "Boolean",
            "attribute": "drag-enter",
            "config": "type: Boolean, reflect: true, attribute: \"drag-enter\""
          },
          {
            "name": "matchTarget",
            "type": "Boolean",
            "attribute": "match-target",
            "config": "type: Boolean, reflect: true, attribute: \"match-target\""
          },
          {
            "name": "matchAnswers",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "__activeOption",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          }
        ],
        "slots": [],
        "events": [
          "simple-toast-hide"
        ],
        "methods": [
          "processInput",
          "if",
          "for",
          "cleanAnswerData",
          "cleanAnswerDataBeforeSend",
          "resetAnswer",
          "isCorrect",
          "renderInteraction",
          "renderOption",
          "handleDrag",
          "handleDragEnd",
          "dragTargetOver",
          "dragTargetLeave",
          "handleDrop",
          "renderDirections",
          "focusActive",
          "handleTagClick",
          "selectTargetChange"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "md-block": {
      "element": "md-block",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "markdown",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../md-block.js\";\n\ndescribe(\"md-block test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <md-block title=\"test-title\"></md-block> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"md-block passes accessibility test\", async () => {\n    const el = await fixture(html` <md-block></md-block> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"md-block passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<md-block aria-labelledby=\"md-block\"></md-block>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"md-block can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<md-block .foo=${'bar'}></md-block>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<md-block ></md-block>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<md-block></md-block>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<md-block></md-block>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, markdown"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "media-behaviors": {
      "element": "media-behaviors",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "cleanVideoSource",
          "getVideoType",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../media-behaviors.js\";\n\ndescribe(\"media-behaviors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <media-behaviors title=\"test-title\"></media-behaviors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"media-behaviors passes accessibility test\", async () => {\n    const el = await fixture(html` <media-behaviors></media-behaviors> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"media-behaviors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<media-behaviors\n        aria-labelledby=\"media-behaviors\"\n      ></media-behaviors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"media-behaviors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<media-behaviors .foo=${'bar'}></media-behaviors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<media-behaviors ></media-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<media-behaviors></media-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<media-behaviors></media-behaviors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "media-image": {
      "element": "media-image",
      "component": {
        "properties": [
          {
            "name": "link",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "asMd",
            "type": "Boolean",
            "attribute": "as-md",
            "config": "type: Boolean,\n        attribute: \"as-md\",",
            "defaultValue": "false"
          },
          {
            "name": "__figureLabel",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "modalTitle",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "disableZoom",
            "type": "Boolean",
            "attribute": "disable-zoom",
            "config": "type: Boolean,\n        attribute: \"disable-zoom\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "_hasCaption",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "citation",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "caption",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "size",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"wide\""
          },
          {
            "name": "round",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "card",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "box",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "offset",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"none\""
          },
          {
            "name": "figureLabelTitle",
            "type": "String",
            "attribute": "figure-label-title",
            "config": "type: String,\n        attribute: \"figure-label-title\",",
            "defaultValue": "\"\""
          },
          {
            "name": "figureLabelDescription",
            "type": "String",
            "attribute": "figure-label-description",
            "config": "type: String,\n        attribute: \"figure-label-description\",",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "haxHooks",
          "haxeditModeChanged",
          "haxactiveElementChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleModalHandler"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../media-image.js\";\n\ndescribe(\"media-image test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<media-image\n        source=\"http://unsplash.it/200\"\n        size=\"small\"\n        figure-label-title=\"1.5\"\n        figure-label-description=\"This is the figure description\"\n      >\n        <div slot=\"citation\">This is my citation.</div>\n        <div slot=\"caption\">\n          Curabitur aliquet quam id dui posuere blandit. Praesent sapien massa,\n          convallis a pellentesque nec, egestas non nisi. Vestibulum ante ipsum\n          primis in faucibus orci luctus et ultrices posuere cubilia Curae;\n          Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet\n          ligula. Cras ultricies ligula sed magna dictum porta. Proin eget\n          tortor risus. Praesent sapien massa, convallis a pellentesque nec,\n          egestas non nisi. Donec sollicitudin molestie malesuada. Mauris\n          blandit aliquet elit, eget tincidunt nibh pulvinar a. Vestibulum ac\n          diam sit amet quam vehicula elementum sed sit amet dui. Vivamus\n          suscipit tortor eget felis porttitor volutpat.\n        </div>\n      </media-image>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"media-image passes accessibility test\", async () => {\n    const el = await fixture(html` <media-image></media-image> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"media-image passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<media-image aria-labelledby=\"media-image\"></media-image>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"media-image can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<media-image .foo=${'bar'}></media-image>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<media-image ></media-image>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<media-image></media-image>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<media-image></media-image>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: link, asMd, __figureLabel, modalTitle, disableZoom, _hasCaption, source, citation, caption, alt, size, round, card, box, offset, figureLabelTitle, figureLabelDescription"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "media-quote": {
      "element": "media-quote",
      "component": {
        "properties": [
          {
            "name": "src",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "hasFilter",
            "type": "Boolean",
            "attribute": "filter",
            "config": "type: Boolean,\n        attribute: \"filter\",",
            "defaultValue": "false"
          },
          {
            "name": "quote",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "author",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "authorDetail",
            "type": "String",
            "attribute": "author-detail",
            "config": "type: String,\n        attribute: \"author-detail\",",
            "defaultValue": "\"\""
          },
          {
            "name": "caption",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          }
        ],
        "slots": [
          "quote",
          "author",
          "author-detail",
          "caption"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "meme-maker": {
      "element": "meme-maker",
      "component": {
        "properties": [
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "crossorigin",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "describedBy",
            "type": "String",
            "attribute": "described-by",
            "config": "type: String,\n        attribute: \"described-by\","
          },
          {
            "name": "imageUrl",
            "type": "String",
            "attribute": "image-url",
            "config": "type: String,\n        attribute: \"image-url\",\n        reflect: true,"
          },
          {
            "name": "topText",
            "type": "String",
            "attribute": "top-text",
            "config": "type: String,\n        attribute: \"top-text\",\n        reflect: true,"
          },
          {
            "name": "bottomText",
            "type": "String",
            "attribute": "bottom-text",
            "config": "type: String,\n        attribute: \"bottom-text\",\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [
          "i18n-manager-register-element"
        ],
        "methods": [
          "haxHooks",
          "haxgizmoRegistration",
          "haxprogressiveEnhancement"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../meme-maker.js\";\n\ndescribe(\"meme-maker test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <meme-maker\n        alt=\"Cat stalking a small toy\"\n        image-url=\"https://cdn2.thecatapi.com/images/9j5.jpg\"\n        top-text=\"I bring you\"\n        bottom-text=\"the death\"\n      ></meme-maker>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"meme-maker passes accessibility test\", async () => {\n    const el = await fixture(html` <meme-maker></meme-maker> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"meme-maker passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<meme-maker aria-labelledby=\"meme-maker\"></meme-maker>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"meme-maker can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<meme-maker .foo=${'bar'}></meme-maker>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<meme-maker ></meme-maker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<meme-maker></meme-maker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<meme-maker></meme-maker>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: alt, crossorigin, describedBy, imageUrl, topText, bottomText"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: i18n-manager-register-element"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "merit-badge": {
      "element": "merit-badge",
      "component": {
        "properties": [
          {
            "name": "badgeDate",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "badgeImage",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "badgeTitle",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "badgeDetails",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "hyperLink",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "badgeSkills",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "skillsOpened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "detailsOpened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "badgeUnlocked",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "badgeColor",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "unlockButtonClicked"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../merit-badge.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<merit-badge></merit-badge>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: badgeDate, badgeImage, badgeTitle, badgeDetails, hyperLink, badgeSkills, skillsOpened, detailsOpened, badgeUnlocked, badgeColor"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "micro-frontend-registry": {
      "element": "micro-frontend-registry",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "add",
          "define",
          "if",
          "has",
          "switch",
          "url",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "MicroFrontendRegCapabilities",
          "MicroFrontendRegCapabilities"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../micro-frontend-registry.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<micro-frontend-registry></micro-frontend-registry>`,\n    );\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "moar-sarcasm": {
      "element": "moar-sarcasm",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "processText",
          "for",
          "attributeChangedCallback",
          "switch"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../moar-sarcasm.js\";\n\ndescribe(\"moar-sarcasm test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <moar-sarcasm title=\"test-title\"></moar-sarcasm>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"moar-sarcasm passes accessibility test\", async () => {\n    const el = await fixture(html` <moar-sarcasm></moar-sarcasm> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"moar-sarcasm passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<moar-sarcasm aria-labelledby=\"moar-sarcasm\"></moar-sarcasm>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"moar-sarcasm can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<moar-sarcasm .foo=${'bar'}></moar-sarcasm>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<moar-sarcasm ></moar-sarcasm>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<moar-sarcasm></moar-sarcasm>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<moar-sarcasm></moar-sarcasm>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "moment-element": {
      "element": "moment-element",
      "component": {
        "properties": [
          {
            "name": "datetime",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "new Date()"
          },
          {
            "name": "inputFormat",
            "type": "String",
            "attribute": "input-format",
            "config": "type: String,\n        attribute: \"input-format\",",
            "defaultValue": "\"\""
          },
          {
            "name": "outputFormat",
            "type": "String",
            "attribute": "output-format",
            "config": "type: String,\n        attribute: \"output-format\",",
            "defaultValue": "\"\""
          },
          {
            "name": "from",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "to",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "output",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "libraryLoaded",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../moment-element.js\";\n\ndescribe(\"moment-element test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <moment-element title=\"test-title\"></moment-element>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"moment-element passes accessibility test\", async () => {\n    const el = await fixture(html` <moment-element></moment-element> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"moment-element passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<moment-element aria-labelledby=\"moment-element\"></moment-element>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"moment-element can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<moment-element .foo=${'bar'}></moment-element>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<moment-element ></moment-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<moment-element></moment-element>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<moment-element></moment-element>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: datetime, inputFormat, outputFormat, from, to, output, libraryLoaded"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "multiple-choice": {
      "element": "multiple-choice",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "renderDirections",
          "haxinlineContextMenu",
          "haxClickInlineAdd",
          "haxClickInlineRemove",
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../multiple-choice.js\";\n\ndescribe(\"multiple-choice test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<multiple-choice\n        id=\"basic\"\n        name=\"basic\"\n        title=\"Which are ducks????\"\n        randomize\n        question=\"Which are ducks?\"\n      >\n        <input correct value=\"Huey\" />\n        <input correct value=\"Duey\" />\n        <input correct value=\"Daffy\" />\n        <input correct value=\"Donald\" />\n        <input value=\"Mickey\" />\n        <p slot=\"correct-feedback\">Yay! Let's jump in the money pit.</p>\n        <p slot=\"incorrect-feedback\">You're despicable. What a quack!</p>\n      </multiple-choice>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"multiple-choice passes accessibility test\", async () => {\n    const el = await fixture(html` <multiple-choice></multiple-choice> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"multiple-choice passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<multiple-choice\n        aria-labelledby=\"multiple-choice\"\n      ></multiple-choice>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"multiple-choice can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<multiple-choice .foo=${'bar'}></multiple-choice>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<multiple-choice ></multiple-choice>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<multiple-choice></multiple-choice>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<multiple-choice></multiple-choice>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "music-player": {
      "element": "music-player",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "visualizer",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"staff\""
          },
          {
            "name": "noWaterfall",
            "type": "Boolean",
            "attribute": "no-waterfall",
            "config": "type: Boolean,\n        attribute: \"no-waterfall\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "noVisual",
            "type": "Boolean",
            "attribute": "no-visual",
            "config": "type: Boolean,\n        attribute: \"no-visual\",\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../music-player.js\";\n\ndescribe(\"music-player test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<music-player\n        source=\"https://magenta.github.io/magenta-js/music/demos/melody.mid\"\n      ></music-player> `,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"music-player passes accessibility test\", async () => {\n    const el = await fixture(html` <music-player></music-player> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"music-player passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<music-player aria-labelledby=\"music-player\"></music-player>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"music-player can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<music-player .foo=${'bar'}></music-player>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<music-player ></music-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<music-player></music-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<music-player></music-player>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, visualizer, noWaterfall, noVisual"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "mutation-observer-import-mixin": {
      "element": "mutation-observer-import-mixin",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "MutationObserverImportMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../mutation-observer-import-mixin.js\";\n\ndescribe(\"mutation-observer-import-mixin test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <mutation-observer-import-mixin\n        title=\"test-title\"\n      ></mutation-observer-import-mixin>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"mutation-observer-import-mixin passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <mutation-observer-import-mixin></mutation-observer-import-mixin> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"mutation-observer-import-mixin passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<mutation-observer-import-mixin\n        aria-labelledby=\"mutation-observer-import-mixin\"\n      ></mutation-observer-import-mixin>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"mutation-observer-import-mixin can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<mutation-observer-import-mixin .foo=${'bar'}></mutation-observer-import-mixin>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<mutation-observer-import-mixin ></mutation-observer-import-mixin>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<mutation-observer-import-mixin></mutation-observer-import-mixin>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<mutation-observer-import-mixin></mutation-observer-import-mixin>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "oer-schema": {
      "element": "oer-schema",
      "component": {
        "properties": [
          {
            "name": "text",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "oerProperty",
            "type": "String",
            "attribute": "oer-property",
            "config": "type: String,\n        attribute: \"oer-property\",",
            "defaultValue": "\"name\""
          },
          {
            "name": "typeof",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Resource\""
          },
          {
            "name": "relatedResource",
            "type": "String",
            "attribute": "related-resource",
            "config": "type: String,\n        attribute: \"related-resource\","
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../oer-schema.js\";\n\ndescribe(\"oer-schema test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <oer-schema title=\"test-title\"></oer-schema>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"oer-schema passes accessibility test\", async () => {\n    const el = await fixture(html` <oer-schema></oer-schema> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"oer-schema passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<oer-schema aria-labelledby=\"oer-schema\"></oer-schema>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"oer-schema can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<oer-schema .foo=${'bar'}></oer-schema>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<oer-schema ></oer-schema>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<oer-schema></oer-schema>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<oer-schema></oer-schema>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: text, oerProperty, typeof, relatedResource"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "outline-designer": {
      "element": "outline-designer",
      "component": {
        "properties": [
          {
            "name": "haxGizmos",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "hideDelete",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "activeItemForActions",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "storeTools",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "eventData",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "appReady",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "activePreview",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "activePreviewIndex",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "hideContentOps",
            "type": "Boolean",
            "attribute": "hide-content-ops",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"hide-content-ops\",",
            "defaultValue": "false"
          },
          {
            "name": "fidelity",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"medium\""
          },
          {
            "name": "liveRegionText",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [],
        "events": [
          "simple-modal-hide"
        ],
        "methods": [
          "if",
          "resetPopOver",
          "getSiteItems",
          "while",
          "hasDeletedItems",
          "toggleDelete",
          "renderActiveContentItem",
          "for",
          "setActiveItemForActions",
          "renderItem",
          "hasContents",
          "renderItemContents",
          "itemContentsOperations",
          "prependNodeToContent",
          "renderNodeAsItem",
          "switch",
          "setActivePreview",
          "modifyContentAction",
          "pageBreakHere",
          "collapseAll",
          "expandAll",
          "getItemParents",
          "getItemParentsCollapsed",
          "isCollapsed",
          "hasChildren",
          "collapseExpand",
          "toggleContent",
          "editTitle",
          "monitorTitle",
          "monitorHeading",
          "monitorEsc",
          "blurTitle",
          "handleLabelKeydown",
          "handleTreeItemKeydown",
          "focusNextItem",
          "focusPreviousItem",
          "focusFirstChild",
          "focusParent",
          "focusFirstItem",
          "focusLastItem",
          "focusItem",
          "announceNavigation",
          "announceStateChange",
          "announceAction",
          "scrollIntoViewIfNeeded",
          "addItemToTop",
          "isLocked",
          "addNewItem",
          "recurseCopyChildren",
          "recurseAction",
          "itemOp"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../outline-designer.js\";\n\ndescribe(\"outline-designer test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <outline-designer title=\"test-title\"></outline-designer>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"outline-designer passes accessibility test\", async () => {\n    const el = await fixture(html` <outline-designer></outline-designer> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"outline-designer passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<outline-designer\n        aria-labelledby=\"outline-designer\"\n      ></outline-designer>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"outline-designer can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<outline-designer .foo=${'bar'}></outline-designer>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<outline-designer ></outline-designer>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<outline-designer></outline-designer>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<outline-designer></outline-designer>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: haxGizmos, hideDelete, activeItemForActions, storeTools, eventData, items, appReady, activePreview, activePreviewIndex, hideContentOps, fidelity, liveRegionText"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: simple-modal-hide"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "outline-player": {
      "element": "outline-player",
      "component": {
        "properties": [
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          },
          {
            "name": "closed",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "activeId",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "narrow",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          }
        ],
        "slots": [
          "title",
          "default"
        ],
        "events": [
          "closed-changed",
          "resize"
        ],
        "methods": [
          "siteModalClick",
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "LTIResizingMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "// local development and mobx\nwindow.process = window.process || {\n  env: {\n    NODE_ENV: \"development\",\n  },\n};\nimport { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../outline-player.js\";\n/*\ndescribe(\"outline-player test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <outline-player title=\"test-title\"></outline-player> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"outline-player passes accessibility test\", async () => {\n    const el = await fixture(html` <outline-player></outline-player> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"outline-player passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<outline-player aria-labelledby=\"outline-player\"></outline-player>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"outline-player can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<outline-player .foo=${'bar'}></outline-player>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<outline-player ></outline-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<outline-player></outline-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<outline-player></outline-player>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: opened, closed, activeId, narrow"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: title, default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: closed-changed, resize"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "page-break": {
      "element": "page-break",
      "component": {
        "properties": [
          {
            "name": "iconType",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "noderefs",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,\n        attribute: false,"
          },
          {
            "name": "relatedItems",
            "type": "String",
            "attribute": "related-items",
            "config": "type: String,\n        attribute: \"related-items\",",
            "defaultValue": "null"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "accentColor",
            "type": "String",
            "attribute": "accent-color",
            "config": "type: String, attribute: \"accent-color\"",
            "defaultValue": "null"
          },
          {
            "name": "entityType",
            "type": "String",
            "attribute": "entity-type",
            "config": "type: String, attribute: \"entity-type\"",
            "defaultValue": "\"page\""
          },
          {
            "name": "description",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "order",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "hideInMenu",
            "type": "Boolean",
            "attribute": "hide-in-menu",
            "config": "type: Boolean, reflect: true, attribute: \"hide-in-menu\""
          },
          {
            "name": "tags",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          },
          {
            "name": "developerTheme",
            "type": "String",
            "attribute": "developer-theme",
            "config": "type: String, attribute: \"developer-theme\""
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          },
          {
            "name": "slug",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "parent",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          },
          {
            "name": "published",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "locked",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "depth",
            "type": "Number",
            "attribute": null,
            "config": "type: Number, reflect: true"
          },
          {
            "name": "itemId",
            "type": "String",
            "attribute": "item-id",
            "config": "type: String, attribute: \"item-id\", reflect: true"
          },
          {
            "name": "breakType",
            "type": "String",
            "attribute": "break-type",
            "config": "type: String, attribute: \"break-type\""
          },
          {
            "name": "status",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "pageType",
            "type": "String",
            "attribute": "page-type",
            "config": "type: String, attribute: \"page-type\""
          },
          {
            "name": "_haxState",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          }
        ],
        "slots": [],
        "events": [
          "page-break-registration",
          "page-break-change",
          "hax-refresh-tray-form"
        ],
        "methods": [
          "if",
          "setupTargetData",
          "for",
          "haxHooks",
          "while",
          "haxsetupActiveElementForm",
          "haxactiveElementChanged",
          "haxeditModeChanged",
          "haxinlineContextMenu",
          "haxClickLockInPage",
          "haxClickInlineLock",
          "haxClickInlinePublished"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../page-break.js\";\n\ndescribe(\"page-break test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <page-break title=\"test-title\"></page-break>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"page-break passes accessibility test\", async () => {\n    const el = await fixture(html` <page-break></page-break> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"page-break passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<page-break aria-labelledby=\"page-break\"></page-break>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"page-break can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<page-break .foo=${'bar'}></page-break>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<page-break ></page-break>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<page-break></page-break>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<page-break></page-break>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: iconType, noderefs, relatedItems, icon, accentColor, entityType, description, order, hideInMenu, tags, developerTheme, title, slug, image, parent, published, locked, depth, itemId, breakType, status, pageType, _haxState"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: page-break-registration, page-break-change, hax-refresh-tray-form"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "page-contents-menu": {
      "element": "page-contents-menu",
      "component": {
        "properties": [
          {
            "name": "contentContainer",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "relationship",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "position",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "mobile",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "hideSettings",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "hideIfEmpty",
            "type": "Boolean",
            "attribute": "hide-if-empty",
            "config": "type: Boolean,\n        attribute: \"hide-if-empty\",\n        reflect: true,"
          },
          {
            "name": "isEmpty",
            "type": "Boolean",
            "attribute": "is-empty",
            "config": "type: Boolean,\n        attribute: \"is-empty\",\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "keyToggle",
          "keyScroll",
          "if",
          "toggleSettings",
          "scrollToObject",
          "renderItem",
          "updateMenu",
          "for",
          "scrollFinished"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../page-contents-menu.js\";\n\ndescribe(\"page-contents-menu test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<div id=\"content\">\n        <page-contents-menu mobile relationship=\"parent\"></page-contents-menu>\n        <h1>This is a menu position to a heading</h1>\n        <p>Stuff and things</p>\n        <h2>Something else</h2>\n        <p>Stuff and things</p>\n        <h2 id=\"whatever\">Something 2</h2>\n        <p>Stuff and things</p>\n        <p>\n          Stuff and thingsStuff and thingsStuff and thingsStuff and thingsStuff\n          and thingsStuff and thingsStuff and thingsStuff and things Stuff and\n          thingsStuff and thingsStuff and thingsStuff and thingsStuff and things\n          Stuff and thingsStuff and thingsStuff and thingsStuff and things Stuff\n          and thingsStuff and thingsStuff and things\n        </p>\n        <video-player></video-player>\n        <p>Stuff and things</p>\n        <p>Stuff and things</p>\n        <h3 id=\"cool\">Something deeper</h3>\n        <p>Stuff and things</p>\n        <p>Stuff and things</p>\n        <p>Stuff and things</p>\n        <h2>Something else 2</h2>\n      </div>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"page-contents-menu passes accessibility test\", async () => {\n    const el = await fixture(html` <page-contents-menu></page-contents-menu> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"page-contents-menu passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<page-contents-menu\n        aria-labelledby=\"page-contents-menu\"\n      ></page-contents-menu>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"page-contents-menu can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<page-contents-menu .foo=${'bar'}></page-contents-menu>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<page-contents-menu ></page-contents-menu>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<page-contents-menu></page-contents-menu>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<page-contents-menu></page-contents-menu>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: contentContainer, relationship, items, position, mobile, label, hideSettings, hideIfEmpty, isEmpty"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "page-flag": {
      "element": "page-flag",
      "component": {
        "properties": [
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"note\""
          },
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "show",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "toggleOpen",
          "handleEdit",
          "handleDelete",
          "handleReply",
          "haxeditModeChanged",
          "haxHooks",
          "haxinlineContextMenu",
          "haxResolveThread",
          "userDataUpdated"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../page-flag.js\";\n\ndescribe(\"page-flag test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <style>\n          page-flag:not(:defined) {\n            display: none;\n          }\n          .wrapper {\n            max-width: 1200px;\n            margin: 0 auto;\n            position: relative;\n          }\n        </style>\n        <div class=\"wrapper\">\n          <grid-plate layout=\"1-1\">\n            <div slot=\"col-1\">\n              <h3>Basic page-flag demo</h3>\n              <page-flag accent-color=\"yellow\">\n                <page-flag-comment seed=\"Bryan\" accent-color=\"grey\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment seed=\"Other person\" accent-color=\"orange\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment seed=\"Bryan\" accent-color=\"green\"\n                  >This is a comment</page-flag-comment\n                >\n              </page-flag>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <page-flag accent-color=\"orange\">\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"2 days ago\"\n                  accent-color=\"grey\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Other person\"\n                  date=\"2 days ago\"\n                  accent-color=\"orange\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"3 days ago\"\n                  accent-color=\"green\"\n                  >This is a comment</page-flag-comment\n                >\n              </page-flag>\n              <p>Here's a bunch of content</p>\n            </div>\n            <div slot=\"col-2\">\n              <h3>Basic page-flag demo</h3>\n              <page-flag accent-color=\"yellow\">\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"2 days ago\"\n                  accent-color=\"grey\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Other person\"\n                  date=\"2 days ago\"\n                  accent-color=\"orange\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"3 days ago\"\n                  accent-color=\"green\"\n                  >This is a comment</page-flag-comment\n                >\n              </page-flag>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <page-flag>\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"2 days ago\"\n                  accent-color=\"grey\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Other person\"\n                  date=\"2 days ago\"\n                  accent-color=\"orange\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"3 days ago\"\n                  accent-color=\"green\"\n                  >This is a comment</page-flag-comment\n                >\n              </page-flag>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <p>Here's a bunch of content</p>\n              <page-flag accent-color=\"orange\">\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"2 days ago\"\n                  accent-color=\"grey\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Other person\"\n                  date=\"2 days ago\"\n                  accent-color=\"orange\"\n                  >This is a comment</page-flag-comment\n                >\n                <page-flag-comment\n                  seed=\"Bryan\"\n                  date=\"3 days ago\"\n                  accent-color=\"green\"\n                  >This is a comment</page-flag-comment\n                >\n              </page-flag>\n              <p>Here's a bunch of content</p>\n            </div>\n          </grid-plate>\n        </div>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"page-flag passes accessibility test\", async () => {\n    const el = await fixture(html` <page-flag></page-flag> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"page-flag passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<page-flag aria-labelledby=\"page-flag\"></page-flag>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"page-flag can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<page-flag .foo=${'bar'}></page-flag>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<page-flag ></page-flag>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<page-flag></page-flag>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<page-flag></page-flag>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: label, opened, show"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "page-scroll-position": {
      "element": "page-scroll-position",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "attachedCallback"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../page-scroll-position.js\";\n\ndescribe(\"page-scroll-position test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <page-scroll-position title=\"test-title\"></page-scroll-position>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"page-scroll-position passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <page-scroll-position></page-scroll-position> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"page-scroll-position passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<page-scroll-position\n        aria-labelledby=\"page-scroll-position\"\n      ></page-scroll-position>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"page-scroll-position can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<page-scroll-position .foo=${'bar'}></page-scroll-position>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<page-scroll-position ></page-scroll-position>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<page-scroll-position></page-scroll-position>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<page-scroll-position></page-scroll-position>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "page-section": {
      "element": "page-section",
      "component": {
        "properties": [
          {
            "name": "anchor",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "scrollerLabel",
            "type": "String",
            "attribute": "scroller-label",
            "config": "type: String, attribute: \"scroller-label\"",
            "defaultValue": "\"Scroll to reveal content\""
          },
          {
            "name": "filter",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "fold",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "full",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "scroller",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "bg",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "null"
          },
          {
            "name": "preset",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "null"
          }
        ],
        "slots": [
          "default",
          "entice",
          "buttons"
        ],
        "events": [],
        "methods": [
          "if",
          "cleanAnchor",
          "videoPlay",
          "videoPause",
          "switch",
          "bgStyle",
          "scrollToNextTarget"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../page-section.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<page-section></page-section>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: anchor, scrollerLabel, filter, fold, full, scroller, bg, image, preset"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default, entice, buttons"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: scroller-label"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "paper-input-flagged": {
      "element": "paper-input-flagged",
      "component": {
        "properties": [
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "maxlength",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "minlength",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "status",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          },
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "flaggedInput",
            "type": "Array",
            "attribute": "flagged-input",
            "config": "type: Array,\n        attribute: \"flagged-input\","
          },
          {
            "name": "inputSuccess",
            "type": "Object",
            "attribute": "input-success",
            "config": "type: Object,\n        attribute: \"input-success\","
          },
          {
            "name": "__activeMessage",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "valueEvent",
          "testStatus",
          "for",
          "switch"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../paper-input-flagged.js\";\n\ndescribe(\"paper-input-flagged test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<paper-input-flagged\n        value=\"Some content\"\n        label=\"URL\"\n      ></paper-input-flagged> `,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"paper-input-flagged passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <paper-input-flagged></paper-input-flagged> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"paper-input-flagged passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<paper-input-flagged\n        aria-labelledby=\"paper-input-flagged\"\n      ></paper-input-flagged>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"paper-input-flagged can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<paper-input-flagged .foo=${'bar'}></paper-input-flagged>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<paper-input-flagged ></paper-input-flagged>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<paper-input-flagged></paper-input-flagged>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<paper-input-flagged></paper-input-flagged>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: label, disabled, icon, maxlength, minlength, status, value, flaggedInput, inputSuccess, __activeMessage"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "paper-stepper": {
      "element": "paper-stepper",
      "component": {
        "properties": [
          {
            "name": "selected",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,\n        notify: true,\n        value: 0,"
          },
          {
            "name": "progressBar",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        value: false,"
          },
          {
            "name": "backLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"Back\","
          },
          {
            "name": "nextLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"Next\","
          },
          {
            "name": "disablePrevious",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        value: false,"
          },
          {
            "name": "disableNext",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        value: false,"
          },
          {
            "name": "noButtons",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        value: false,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../paper-stepper.js\";\n\ndescribe(\"paper-stepper test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <paper-stepper title=\"test-title\"></paper-stepper>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"paper-stepper passes accessibility test\", async () => {\n    const el = await fixture(html` <paper-stepper></paper-stepper> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"paper-stepper passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<paper-stepper aria-labelledby=\"paper-stepper\"></paper-stepper>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"paper-stepper can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<paper-stepper .foo=${'bar'}></paper-stepper>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<paper-stepper ></paper-stepper>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<paper-stepper></paper-stepper>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<paper-stepper></paper-stepper>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: selected, progressBar, backLabel, nextLabel, disablePrevious, disableNext, noButtons"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "parallax-image": {
      "element": "parallax-image",
      "component": {
        "properties": [
          {
            "name": "imageBg",
            "type": "String",
            "attribute": "image-bg",
            "config": "type: String,\n        attribute: \"image-bg\",\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "describedBy",
            "type": "String",
            "attribute": "described-by",
            "config": "type: String,\n        attribute: \"described-by\","
          }
        ],
        "slots": [
          "parallax_heading"
        ],
        "events": [],
        "methods": [
          "if",
          "scrollBy"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SchemaBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../parallax-image.js\";\n\ndescribe(\"parallax-image test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <parallax-image title=\"test-title\"></parallax-image>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"parallax-image passes accessibility test\", async () => {\n    const el = await fixture(html` <parallax-image></parallax-image> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"parallax-image passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<parallax-image aria-labelledby=\"parallax-image\"></parallax-image>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"parallax-image can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<parallax-image .foo=${'bar'}></parallax-image>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<parallax-image ></parallax-image>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<parallax-image></parallax-image>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<parallax-image></parallax-image>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: imageBg, describedBy"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: parallax_heading"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "pdf-browser-viewer": {
      "element": "pdf-browser-viewer",
      "component": {
        "properties": [
          {
            "name": "file",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: undefined,\n        reflectToAttribute: true,"
          },
          {
            "name": "notSupportedMessage",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value:\n          \"It appears your Web browser is not configured to display PDF files. No worries, just\","
          },
          {
            "name": "notSupportedLinkMessage",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"click here to download the PDF file.\","
          },
          {
            "name": "height",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"400px\","
          },
          {
            "name": "width",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"100%\","
          },
          {
            "name": "card",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        value: false,"
          },
          {
            "name": "downloadLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"Download\","
          },
          {
            "name": "elevation",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        value: \"1\","
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "clear"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../pdf-browser-viewer.js\";\n\ndescribe(\"pdf-browser-viewer test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <pdf-browser-viewer title=\"test-title\"></pdf-browser-viewer>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"pdf-browser-viewer passes accessibility test\", async () => {\n    const el = await fixture(html` <pdf-browser-viewer></pdf-browser-viewer> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"pdf-browser-viewer passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<pdf-browser-viewer\n        aria-labelledby=\"pdf-browser-viewer\"\n      ></pdf-browser-viewer>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"pdf-browser-viewer can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<pdf-browser-viewer .foo=${'bar'}></pdf-browser-viewer>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<pdf-browser-viewer ></pdf-browser-viewer>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<pdf-browser-viewer></pdf-browser-viewer>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<pdf-browser-viewer></pdf-browser-viewer>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: file, notSupportedMessage, notSupportedLinkMessage, height, width, card, downloadLabel, elevation"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "person-testimonial": {
      "element": "person-testimonial",
      "component": {
        "properties": [
          {
            "name": "describedBy",
            "type": "String",
            "attribute": "described-by",
            "config": "type: String,\n        attribute: \"described-by\","
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "name",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "position",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../person-testimonial.js\";\n\ndescribe(\"person-testimonial test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <person-testimonial title=\"test-title\"></person-testimonial>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"person-testimonial passes accessibility test\", async () => {\n    const el = await fixture(html` <person-testimonial></person-testimonial> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"person-testimonial passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<person-testimonial\n        aria-labelledby=\"person-testimonial\"\n      ></person-testimonial>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"person-testimonial can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<person-testimonial .foo=${'bar'}></person-testimonial>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<person-testimonial ></person-testimonial>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<person-testimonial></person-testimonial>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<person-testimonial></person-testimonial>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: describedBy, image, name, position"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "place-holder": {
      "element": "place-holder",
      "component": {
        "properties": [
          {
            "name": "iconFromType",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"editor:format-align-left\""
          },
          {
            "name": "text",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "directions",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Drag and drop file to replace\""
          },
          {
            "name": "calcText",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "type",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"text\""
          },
          {
            "name": "dragOver",
            "type": "Boolean",
            "attribute": "drag-over",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"drag-over\",",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "place-holder-replace",
          "place-holder-file-drop"
        ],
        "methods": [
          "if",
          "fireReplaceEvent",
          "switch"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../place-holder.js\";\n\ndescribe(\"place-holder test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <place-holder title=\"audio\"></place-holder>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: iconFromType, text, directions, calcText, type, dragOver"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: place-holder-replace, place-holder-file-drop"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: drag-over"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "play-list": {
      "element": "play-list",
      "component": {
        "properties": [
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "loop",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "edit",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "navigation",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "pagination",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "aspectRatio",
            "type": "String",
            "attribute": "aspect-ratio",
            "config": "type: String, reflect: true, attribute: \"aspect-ratio\"",
            "defaultValue": "\"16:9\""
          },
          {
            "name": "orientation",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "\"horizontal\""
          },
          {
            "name": "slide",
            "type": "Number",
            "attribute": null,
            "config": "type: Number, reflect: true",
            "defaultValue": "0"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "renderHAXItem",
          "slideIndexChanged",
          "haxHooks",
          "haxClickSlideIndex",
          "haxinlineContextMenu",
          "haxToggleEdit"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../play-list.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<play-list></play-list>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: items, loop, edit, navigation, pagination, aspectRatio, orientation, slide"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: aspect-ratio"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "polaris-theme": {
      "element": "polaris-theme",
      "component": {
        "properties": [
          {
            "name": "searchTerm",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "siteDescription",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "imageLink",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "imageAlt",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "pageTimestamp",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "appStoreReady",
          "siteModalClick",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "HAXCMSOperationButtons"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../polaris-theme.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<polaris-theme></polaris-theme>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: searchTerm, siteDescription, imageLink, image, imageAlt, pageTimestamp"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "portal-launcher": {
      "element": "portal-launcher",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "normalizeEventPath",
          "if",
          "click"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../portal-launcher.js\";\n\ndescribe(\"portal-launcher test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <portal-launcher title=\"test-title\"></portal-launcher>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"portal-launcher passes accessibility test\", async () => {\n    const el = await fixture(html` <portal-launcher></portal-launcher> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"portal-launcher passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<portal-launcher\n        aria-labelledby=\"portal-launcher\"\n      ></portal-launcher>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"portal-launcher can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<portal-launcher .foo=${'bar'}></portal-launcher>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<portal-launcher ></portal-launcher>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<portal-launcher></portal-launcher>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<portal-launcher></portal-launcher>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "post-card": {
      "element": "post-card",
      "component": {
        "properties": [
          {
            "name": "t",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "to",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          },
          {
            "name": "from",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          },
          {
            "name": "message",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true"
          },
          {
            "name": "photoSrc",
            "type": "String",
            "attribute": "photo-src",
            "config": "type: String, attribute: \"photo-src\", reflect: true"
          },
          {
            "name": "stampSrc",
            "type": "String",
            "attribute": "stamp-src",
            "config": "type: String, attribute: \"stamp-src\", reflect: true"
          },
          {
            "name": "postMarkLocations",
            "type": "String",
            "attribute": "post-mark-locations",
            "config": "type: String,\n        reflect: true,\n        attribute: \"post-mark-locations\","
          }
        ],
        "slots": [
          "to",
          "from",
          "message"
        ],
        "events": [
          "i18n-manager-register-element"
        ],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html } from \"lit\";\nimport { fixture, expect } from \"@open-wc/testing\";\n\nimport \"../post-card.js\";\n\ndescribe(\"PostCard\", () => {\n  let element;\n\n  beforeEach(async () => {\n    element = await fixture(\n      html`<post-card\n        post-mark-locations=\"Egypt\"\n        photoSrc=\"http://media.liveauctiongroup.net/i/11189/11535427_1.jpg?v=8CE770C8F1EEC60\"\n        to=\"Future\"\n        from=\"Past\"\n        message=\"To make a baby....\"\n      ></post-card>`,\n    );\n  });\n\n  it(\"renders an h3\", () => {\n    const h3 = element.shadowRoot.querySelector(\"h3\");\n    expect(h3).to.exist;\n  });\n\n  it(\"renders a post-card-photo\", () => {\n    const pcp = element.shadowRoot.querySelector(\"post-card-photo\");\n    expect(pcp).to.exist;\n  });\n\n  it(\"renders a post-card-stamp\", () => {\n    const pcs = element.shadowRoot.querySelector(\"post-card-stamp\");\n    expect(pcs).to.exist;\n  });\n\n  it(\"renders a correct To address\", () => {\n    const to = element.shadowRoot.querySelector('slot[name=\"to\"]');\n    expect(to).to.exist;\n    expect(to.textContent).to.equal(\"Future\");\n  });\n\n  it(\"renders a correct from address\", () => {\n    const from = element.shadowRoot.querySelector('slot[name=\"from\"]');\n    expect(from).to.exist;\n    expect(from.textContent).to.equal(\"Past\");\n  });\n\n  it(\"renders a correct message\", () => {\n    const mess = element.shadowRoot.querySelector('slot[name=\"message\"]');\n    expect(mess).to.exist;\n    expect(mess.textContent).to.equal(\"To make a baby....\");\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\ndescribe(\"PostCardPostmark\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<post-card-postmark locations=\"Europe\"></post-card-postmark>`,\n    );\n  });\n\n  it(\"renders a location\", async () => {\n    const loco = element.shadowRoot.querySelector(\"p\");\n    expect(loco).to.exist;\n    // expect(loco.textContent).to.equal('Europe')\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: t, to, from, message, photoSrc, stampSrc, postMarkLocations"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: i18n-manager-register-element"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: photo-src, stamp-src, post-mark-locations"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "pouch-db": {
      "element": "pouch-db",
      "component": {
        "properties": [],
        "slots": [],
        "events": [
          "pouch-db-show-data"
        ],
        "methods": [
          "if",
          "userEngagmentFunction",
          "switch",
          "function",
          "getDataFunction",
          "processxAPI",
          "processItems"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../pouch-db.js\";\n\ndescribe(\"pouch-db test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <pouch-db title=\"test-title\"></pouch-db> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"pouch-db passes accessibility test\", async () => {\n    const el = await fixture(html` <pouch-db></pouch-db> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"pouch-db passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<pouch-db aria-labelledby=\"pouch-db\"></pouch-db>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"pouch-db can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<pouch-db .foo=${'bar'}></pouch-db>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<pouch-db ></pouch-db>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<pouch-db></pouch-db>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<pouch-db></pouch-db>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: pouch-db-show-data"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "product-card": {
      "element": "product-card",
      "component": {
        "properties": [
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "heading",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "subheading",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "hasDemo",
            "type": "Boolean",
            "attribute": "has-demo",
            "config": "type: Boolean,\n        attribute: \"has-demo\","
          }
        ],
        "slots": [],
        "events": [
          "product-card-demo-show"
        ],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../product-card.js\";\n\ndescribe(\"product-card test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <product-card title=\"test-title\"></product-card>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"product-card passes accessibility test\", async () => {\n    const el = await fixture(html` <product-card></product-card> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"product-card passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<product-card aria-labelledby=\"product-card\"></product-card>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"product-card can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<product-card .foo=${'bar'}></product-card>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<product-card ></product-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<product-card></product-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<product-card></product-card>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: disabled, heading, subheading, icon, hasDemo"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: product-card-demo-show"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "product-glance": {
      "element": "product-glance",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "subtitle",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../product-glance.js\";\n\ndescribe(\"product-glance test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <product-glance title=\"test-title\"></product-glance>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"product-glance passes accessibility test\", async () => {\n    const el = await fixture(html` <product-glance></product-glance> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"product-glance passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<product-glance aria-labelledby=\"product-glance\"></product-glance>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"product-glance can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<product-glance .foo=${'bar'}></product-glance>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<product-glance ></product-glance>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<product-glance></product-glance>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<product-glance></product-glance>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, subtitle, icon"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "product-offering": {
      "element": "product-offering",
      "component": {
        "properties": [
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "_titleOne",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "_titleTwo",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "description",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          }
        ],
        "slots": [
          "description"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../product-offering.js\";\n\ndescribe(\"product-offering test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <product-offering title=\"test-title\"></product-offering>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"product-offering passes accessibility test\", async () => {\n    const el = await fixture(html` <product-offering></product-offering> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"product-offering passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<product-offering\n        aria-labelledby=\"product-offering\"\n      ></product-offering>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"product-offering can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<product-offering .foo=${'bar'}></product-offering>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<product-offering ></product-offering>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<product-offering></product-offering>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<product-offering></product-offering>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: alt, source, icon, title, _titleOne, _titleTwo, description"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: description"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "progress-donut": {
      "element": "progress-donut",
      "component": {
        "properties": [
          {
            "name": "animation",
            "type": "Number",
            "attribute": "animation",
            "config": "type: Number,\n        attribute: \"animation\",",
            "defaultValue": "-1"
          },
          {
            "name": "animationDelay",
            "type": "Number",
            "attribute": "animation-delay",
            "config": "type: Number,\n        attribute: \"animation-delay\",",
            "defaultValue": "0"
          },
          {
            "name": "complete",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "desc",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "imageSrc",
            "type": "String",
            "attribute": "image-src",
            "config": "attribute: \"image-src\",\n        type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "imageAlt",
            "type": "String",
            "attribute": "image-alt",
            "config": "attribute: \"image-alt\",\n        type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "addAnimation",
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../progress-donut.js\";\n\ndescribe(\"progress-donut test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<progress-donut\n        animation=\"500\"\n        animation-delay=\"500\"\n        desc=\"You have completed 5,4,8,12,6,3,4, and 3 points of work out of 50 points.\"\n        .complete=\"${[5, 4, 8, 12, 6, 3, 4, 3]}\"\n        image-src=\"${new URL(\"../demo/images/profile1.jpg\", import.meta.url)\n          .href}\"\n        style=\"width:300px\"\n        total=\"50\"\n      >\n      </progress-donut>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"progress-donut passes accessibility test\", async () => {\n    const el = await fixture(html` <progress-donut></progress-donut> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"progress-donut passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<progress-donut aria-labelledby=\"progress-donut\"></progress-donut>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"progress-donut can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<progress-donut .foo=${'bar'}></progress-donut>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<progress-donut ></progress-donut>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<progress-donut></progress-donut>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<progress-donut></progress-donut>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: animation, animationDelay, complete, desc, imageSrc, imageAlt"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "promise-progress": {
      "element": "promise-progress",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleColorsSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../promise-progress.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<promise-progress></promise-progress>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "q-r": {
      "element": "q-r",
      "component": {
        "properties": [
          {
            "name": "data",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "modulesize",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "4"
          },
          {
            "name": "margin",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "2"
          },
          {
            "name": "format",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"png\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../q-r.js\";\n\ndescribe(\"q-r test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <q-r title=\"test-title\"></q-r> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"q-r passes accessibility test\", async () => {\n    const el = await fixture(html` <q-r></q-r> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"q-r passes accessibility negation\", async () => {\n    const el = await fixture(html`<q-r aria-labelledby=\"q-r\"></q-r>`);\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"q-r can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<q-r .foo=${'bar'}></q-r>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<q-r ></q-r>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<q-r></q-r>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<q-r></q-r>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: data, title, modulesize, margin, format"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "radio-behaviors": {
      "element": "radio-behaviors",
      "component": {
        "properties": [
          {
            "name": "itemData",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "selection",
            "type": "String",
            "attribute": "selection",
            "config": "type: String,\n          attribute: \"selection\","
          }
        ],
        "slots": [],
        "events": [
          "selection-changed"
        ],
        "methods": [
          "selectItem",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../radio-behaviors.js\";\n\ndescribe(\"radio-behaviors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <radio-behaviors title=\"test-title\"></radio-behaviors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"radio-behaviors passes accessibility test\", async () => {\n    const el = await fixture(html` <radio-behaviors></radio-behaviors> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"radio-behaviors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<radio-behaviors\n        aria-labelledby=\"radio-behaviors\"\n      ></radio-behaviors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"radio-behaviors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<radio-behaviors .foo=${'bar'}></radio-behaviors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<radio-behaviors ></radio-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<radio-behaviors></radio-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<radio-behaviors></radio-behaviors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: itemData, selection"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: selection-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "relative-heading": {
      "element": "relative-heading",
      "component": {
        "properties": [
          {
            "name": "closeIcon",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "closeLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "copyMessage",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "disableLink",
            "type": "Boolean",
            "attribute": "disable-link",
            "config": "type: Boolean,\n        attribute: \"disable-link\",",
            "defaultValue": "false"
          },
          {
            "name": "linkAlignRight",
            "type": "Boolean",
            "attribute": "link-align-right",
            "config": "type: Boolean,\n        attribute: \"link-align-right\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "linkIcon",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"link\""
          },
          {
            "name": "linkLabel",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Get link\""
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../relative-heading.js\";\n\ndescribe(\"relative-heading test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<relative-heading id=\"lorem\">\n          <h1>Lorem ipsum dolor</h1>\n        </relative-heading>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n\n        <relative-heading id=\"praesent\" parent=\"lorem\">\n          <h2>Praesent ultrices</h2>\n        </relative-heading>\n        <p>\n          Mauris aliquam lorem justo. Praesent ultrices lorem nec est iaculis\n          viverra dignissim eu neque. Nullam vitae nisl diam.\n        </p>\n\n        <relative-heading id=\"suspendisse\" parent=\"praesent\">\n          <h3>Suspendisse</h3>\n        </relative-heading>\n        <p>\n          Suspendisse potenti. Nulla venenatis porta felis id feugiat. Vivamus\n          vehicula molestie sapien hendrerit ultricies.\n        </p>\n\n        <relative-heading id=\"sapien\" parent=\"suspendisse\">\n          <h4>Sapien sit amet</h4>\n        </relative-heading>\n        <p>\n          Quisque volutpat eu sapien sit amet interdum. Proin venenatis tellus\n          eu nisi congue aliquet.\n        </p>\n\n        <relative-heading id=\"sollicitudin\" parent=\"sapien\">\n          <h5>Sollicitudin</h5>\n        </relative-heading>\n        <p>\n          Nullam at velit sollicitudin, porta mi quis, lacinia velit. Praesent\n          quis mauris sem.\n        </p>\n\n        <relative-heading id=\"volutpat\" parent=\"sollicitudin\">\n          <h6>In et volutpat</h6>\n        </relative-heading>\n        <p>\n          In et volutpat nisi. Suspendisse vel nibh eu magna posuere\n          sollicitudin. Praesent ac ex varius, facilisis urna et, cursus tellus.\n        </p> `,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"relative-heading passes accessibility test\", async () => {\n    const el = await fixture(html` <relative-heading></relative-heading> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"relative-heading passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<relative-heading\n        aria-labelledby=\"relative-heading\"\n      ></relative-heading>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"relative-heading can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<relative-heading .foo=${'bar'}></relative-heading>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<relative-heading ></relative-heading>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<relative-heading></relative-heading>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<relative-heading></relative-heading>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: closeIcon, closeLabel, copyMessage, disableLink, linkAlignRight, linkIcon, linkLabel"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "replace-tag": {
      "element": "replace-tag",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "performanceBasedReplacement",
          "handleIntersectionCallback",
          "for",
          "runReplacement"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "ReplaceTagSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../replace-tag.js\";\n\ndescribe(\"replace-tag test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<replace-tag with=\"word-count\">will replace</replace-tag> `,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"replace-tag passes accessibility test\", async () => {\n    const el = await fixture(html` <replace-tag></replace-tag> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"replace-tag passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<replace-tag aria-labelledby=\"replace-tag\"></replace-tag>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"replace-tag can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<replace-tag .foo=${'bar'}></replace-tag>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<replace-tag ></replace-tag>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<replace-tag></replace-tag>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<replace-tag></replace-tag>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "responsive-grid": {
      "element": "responsive-grid",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../responsive-grid.js\";\n\ndescribe(\"responsive-grid test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <responsive-grid title=\"test-title\"></responsive-grid>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"responsive-grid passes accessibility test\", async () => {\n    const el = await fixture(html` <responsive-grid></responsive-grid> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"responsive-grid passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<responsive-grid\n        aria-labelledby=\"responsive-grid\"\n      ></responsive-grid>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"responsive-grid can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<responsive-grid .foo=${'bar'}></responsive-grid>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<responsive-grid ></responsive-grid>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<responsive-grid></responsive-grid>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<responsive-grid></responsive-grid>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "responsive-utility": {
      "element": "responsive-utility",
      "component": {
        "properties": [],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "responiveElementEvent",
          "deleteResponiveElementEvent",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../responsive-utility.js\";\n\ndescribe(\"responsive-utility test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <responsive-utility title=\"test-title\"></responsive-utility>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"responsive-utility passes accessibility test\", async () => {\n    const el = await fixture(html` <responsive-utility></responsive-utility> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"responsive-utility passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<responsive-utility\n        aria-labelledby=\"responsive-utility\"\n      ></responsive-utility>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"responsive-utility can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<responsive-utility .foo=${'bar'}></responsive-utility>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<responsive-utility ></responsive-utility>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<responsive-utility></responsive-utility>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<responsive-utility></responsive-utility>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "retro-card": {
      "element": "retro-card",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "subtitle",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "tags",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "mediaSource",
            "type": "String",
            "attribute": "media-source",
            "config": "type: String,\n        attribute: \"media-source\","
          },
          {
            "name": "url",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "hoverSource",
            "type": "String",
            "attribute": "hover-source",
            "config": "type: String,\n        attribute: \"hover-source\","
          },
          {
            "name": "hoverState",
            "type": "Boolean",
            "attribute": "hover-state",
            "config": "type: Boolean,\n        attribute: \"hover-state\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "__cardTags",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "nosource",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "__source",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "switch",
          "if",
          "haxHooks",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../retro-card.js\";\n\ndescribe(\"retro-card test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <retro-card title=\"test-title\"></retro-card>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"retro-card passes accessibility test\", async () => {\n    const el = await fixture(html` <retro-card></retro-card> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"retro-card passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<retro-card aria-labelledby=\"retro-card\"></retro-card>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"retro-card can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<retro-card .foo=${'bar'}></retro-card>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<retro-card ></retro-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<retro-card></retro-card>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<retro-card></retro-card>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, subtitle, tags, mediaSource, url, hoverSource, hoverState, __cardTags, nosource, __source"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "rich-text-editor": {
      "element": "rich-text-editor",
      "component": {
        "properties": [
          {
            "name": "id",
            "type": "String",
            "attribute": "id",
            "config": "name: \"id\",\n          type: String,\n          reflect: true,\n          attribute: \"id\",",
            "defaultValue": "\"\""
          },
          {
            "name": "contenteditable",
            "type": "String",
            "attribute": "contenteditable",
            "config": "name: \"contenteditable\",\n          type: String,\n          reflect: true,\n          attribute: \"contenteditable\","
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": "disabled",
            "config": "name: \"disabled\",\n          type: Boolean,\n          attribute: \"disabled\",\n          reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "disableHover",
            "type": "Boolean",
            "attribute": "disable-hover",
            "config": "name: \"disableHover\",\n          type: Boolean,\n          attribute: \"disable-hover\","
          },
          {
            "name": "placeholder",
            "type": "String",
            "attribute": "aria-placeholder",
            "config": "name: \"placeholder\",\n          type: String,\n          reflect: false,\n          attribute: \"aria-placeholder\",",
            "defaultValue": "\"Click to edit\""
          },
          {
            "name": "toolbarId",
            "type": "String",
            "attribute": "toolbar-id",
            "config": "name: \"toolbarId\",\n          type: String,\n          reflect: true,\n          attribute: \"toolbar-id\",",
            "defaultValue": "\"\""
          },
          {
            "name": "range",
            "type": "Object",
            "attribute": "range",
            "config": "name: \"range\",\n          type: Object,\n          attribute: \"range\",",
            "defaultValue": "undefined"
          },
          {
            "name": "rawhtml",
            "type": "String",
            "attribute": "rawhtml",
            "config": "type: String,\n          attribute: \"rawhtml\","
          },
          {
            "name": "type",
            "type": "String",
            "attribute": "type",
            "config": "name: \"type\",\n          type: String,\n          reflect: true,\n          attribute: \"type\",",
            "defaultValue": "\"rich-text-editor-toolbar\""
          },
          {
            "name": "viewSource",
            "type": "Boolean",
            "attribute": "view-source",
            "config": "type: Boolean,\n          attribute: \"view-source\",\n          reflect: true,"
          },
          {
            "name": "__codeEditorValue",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__needsUpdate",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "__focused",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "__hovered",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "focus",
          "contenteditable-change"
        ],
        "methods": [
          "if",
          "focus",
          "makeSticky"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "RichTextEditorBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../rich-text-editor.js\";\n\ndescribe(\"rich-text-editor test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <rich-text-editor>\n        <p>\n          I'm the <a href=\"#top\">easiest</a> way to implement editable rich\n          text.\n        </p>\n      </rich-text-editor>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"rich-text-editor passes accessibility test\", async () => {\n    const el = await fixture(html` <rich-text-editor></rich-text-editor> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"rich-text-editor passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<rich-text-editor\n        aria-labelledby=\"rich-text-editor\"\n      ></rich-text-editor>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"rich-text-editor can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<rich-text-editor .foo=${'bar'}></rich-text-editor>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<rich-text-editor ></rich-text-editor>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<rich-text-editor></rich-text-editor>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<rich-text-editor></rich-text-editor>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: id, contenteditable, disabled, disableHover, placeholder, toolbarId, range, rawhtml, type, viewSource, __codeEditorValue, __needsUpdate, __focused, __hovered"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: focus, contenteditable-change"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "rpg-character": {
      "element": "rpg-character",
      "component": {
        "properties": [
          {
            "name": "literalseed",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "accessories",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "height",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "142"
          },
          {
            "name": "width",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "113"
          },
          {
            "name": "base",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "face",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "faceItem",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "hair",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "pants",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "shirt",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "skin",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "hatColor",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "hat",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"none\""
          },
          {
            "name": "walking",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "leg",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "seed",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "null"
          },
          {
            "name": "speed",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "500"
          },
          {
            "name": "circle",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "fire",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "demo",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "reduceMotion",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "globalThis.matchMedia(\n        \"(prefers-reduced-motion: reduce)\",\n      ).matches"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "randomColor",
          "renderPiece",
          "switch",
          "for"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../rpg-character.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<rpg-character></rpg-character>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: literalseed, accessories, height, width, base, face, faceItem, hair, pants, shirt, skin, hatColor, hat, walking, leg, seed, speed, circle, fire, demo, reduceMotion"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "runkit-embed": {
      "element": "runkit-embed",
      "component": {
        "properties": [
          {
            "name": "nodeVersion",
            "type": "String",
            "attribute": "node-version",
            "config": "type: String, attribute: \"node-version\""
          },
          {
            "name": "mode",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "dataHaxActive",
            "type": "String",
            "attribute": "data-hax-active",
            "config": "type: String,\n        reflect: true,\n        attribute: \"data-hax-active\","
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "buildRunKit",
          "haxHooks",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "schema-behaviors": {
      "element": "schema-behaviors",
      "component": {
        "properties": [
          {
            "name": "schemaMap",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,\n          readOnly: true,\n          observer: \"_schemaMapChanged\","
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../schema-behaviors.js\";\n\ndescribe(\"schema-behaviors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <schema-behaviors title=\"test-title\"></schema-behaviors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"schema-behaviors passes accessibility test\", async () => {\n    const el = await fixture(html` <schema-behaviors></schema-behaviors> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"schema-behaviors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<schema-behaviors\n        aria-labelledby=\"schema-behaviors\"\n      ></schema-behaviors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"schema-behaviors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<schema-behaviors .foo=${'bar'}></schema-behaviors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<schema-behaviors ></schema-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<schema-behaviors></schema-behaviors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<schema-behaviors></schema-behaviors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: schemaMap"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "scroll-button": {
      "element": "scroll-button",
      "component": {
        "properties": [
          {
            "name": "target",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"icons:expand-less\""
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "_label",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "position",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "t",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [],
        "events": [
          "i18n-manager-register-element"
        ],
        "methods": [
          "if",
          "scrollEvent"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../scroll-button.js\";\n\ndescribe(\"scroll-button test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <scroll-button title=\"test-title\"></scroll-button>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"scroll-button passes accessibility test\", async () => {\n    const el = await fixture(html` <scroll-button></scroll-button> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"scroll-button passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<scroll-button aria-labelledby=\"scroll-button\"></scroll-button>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"scroll-button can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<scroll-button .foo=${'bar'}></scroll-button>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<scroll-button ></scroll-button>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<scroll-button></scroll-button>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<scroll-button></scroll-button>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: target, icon, label, _label, position, t"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: i18n-manager-register-element"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "secure-request": {
      "element": "secure-request",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "setCookies",
          "generateUrl",
          "if",
          "getEndPoint",
          "getCsrfToken",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../secure-request.js\";\n\ndescribe(\"secure-request test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <secure-request title=\"test-title\"></secure-request>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"secure-request passes accessibility test\", async () => {\n    const el = await fixture(html` <secure-request></secure-request> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"secure-request passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<secure-request aria-labelledby=\"secure-request\"></secure-request>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"secure-request can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<secure-request .foo=${'bar'}></secure-request>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<secure-request ></secure-request>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<secure-request></secure-request>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<secure-request></secure-request>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "self-check": {
      "element": "self-check",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Self-Check\""
          },
          {
            "name": "question",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "describedBy",
            "type": "String",
            "attribute": "described-by",
            "config": "type: String,\n        attribute: \"described-by\","
          },
          {
            "name": "link",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "correct",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "haxHooks",
          "haxactiveElementChanged",
          "openAnswer"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../self-check.js\";\n\ndescribe(\"self-check test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<self-check\n        accent-color=\"light-blue\"\n        title=\"Sharks Self Check\"\n        image=\"https://upload.wikimedia.org/wikipedia/commons/5/56/White_shark.jpg\"\n        alt=\"Great White Shark\"\n      >\n        <span slot=\"question\"\n          >How large can the average great white shark grow to be?</span\n        >\n        The Great White shark can grow to be 15 ft to more than 20 ft in length\n        and weigh 2.5 tons or more.\n      </self-check>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"self-check passes accessibility test\", async () => {\n    const el = await fixture(html` <self-check></self-check> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"self-check passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<self-check aria-labelledby=\"self-check\"></self-check>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"self-check can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<self-check .foo=${'bar'}></self-check>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<self-check ></self-check>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<self-check></self-check>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<self-check></self-check>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, question, image, alt, describedBy, link, correct"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "shadow-style": {
      "element": "shadow-style",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../shadow-style.js\";\n\ndescribe(\"shadow-style test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <shadow-style title=\"test-title\"></shadow-style>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"shadow-style passes accessibility test\", async () => {\n    const el = await fixture(html` <shadow-style></shadow-style> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"shadow-style passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<shadow-style aria-labelledby=\"shadow-style\"></shadow-style>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"shadow-style can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<shadow-style .foo=${'bar'}></shadow-style>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<shadow-style ></shadow-style>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<shadow-style></shadow-style>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<shadow-style></shadow-style>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "simple-autocomplete": {
      "element": "simple-autocomplete",
      "component": {
        "properties": [
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "hideInput",
            "type": "Boolean",
            "attribute": "hide-input",
            "config": "type: Boolean,\n        attribute: \"hide-input\",",
            "defaultValue": "false"
          },
          {
            "name": "selectionPosition",
            "type": "Boolean",
            "attribute": "selection-position",
            "config": "type: Boolean,\n        attribute: \"selection-position\",",
            "defaultValue": "false"
          },
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "itemLimit",
            "type": "Number",
            "attribute": "item-limit",
            "config": "type: Number,\n        attribute: \"item-limit\",",
            "defaultValue": "6"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "setValue",
          "if",
          "processInput",
          "inputChanged",
          "a11yListKeys",
          "switch",
          "hardStopEvent",
          "a11yInputKeys",
          "getSelection",
          "getRange",
          "resetFocusOnInput",
          "itemSelect",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleFilterMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-autocomplete.js\";\n\ndescribe(\"simple-autocomplete test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-autocomplete title=\"test-title\"></simple-autocomplete>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-autocomplete passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <simple-autocomplete></simple-autocomplete> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-autocomplete passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-autocomplete\n        aria-labelledby=\"simple-autocomplete\"\n      ></simple-autocomplete>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-autocomplete can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-autocomplete .foo=${'bar'}></simple-autocomplete>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-autocomplete ></simple-autocomplete>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-autocomplete></simple-autocomplete>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-autocomplete></simple-autocomplete>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: opened, hideInput, selectionPosition, value, itemLimit"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-blog": {
      "element": "simple-blog",
      "component": {
        "properties": [
          {
            "name": "selectedPage",
            "type": "Number",
            "attribute": "selected-page",
            "config": "type: Number,\n        reflect: true,\n        attribute: \"selected-page\",",
            "defaultValue": "0"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "resize"
        ],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleColorsSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "// local development and mobx\nwindow.process = window.process || {\n  env: {\n    NODE_ENV: \"development\",\n  },\n};\nimport { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-blog.js\";\n\ndescribe(\"simple-blog test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <simple-blog></simple-blog> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-blog passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-blog></simple-blog> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-blog passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-blog aria-labelledby=\"simple-blog\"></simple-blog>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-blog can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-blog .foo=${'bar'}></simple-blog>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-blog ></simple-blog>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-blog></simple-blog>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-blog></simple-blog>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: selectedPage"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: resize"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-colors": {
      "element": "simple-colors",
      "component": {
        "properties": [
          {
            "name": "accentColor",
            "type": "String",
            "attribute": "accent-color",
            "config": "attribute: \"accent-color\",\n          type: String,\n          reflect: true,",
            "defaultValue": "\"grey\""
          },
          {
            "name": "dark",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"dark\",\n          type: Boolean,\n          reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "invertShade",
          "getColorInfo",
          "makeVariable",
          "getContrastingColors",
          "getContrastingShades",
          "isContrastCompliant"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleColorsSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-colors.js\";\n\ndescribe(\"simple-colors test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-colors title=\"test-title\"></simple-colors>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-colors passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-colors></simple-colors> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-colors passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-colors aria-labelledby=\"simple-colors\"></simple-colors>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-colors can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-colors .foo=${'bar'}></simple-colors>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-colors ></simple-colors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-colors></simple-colors>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-colors></simple-colors>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: accentColor, dark"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-colors-shared-styles": {
      "element": "simple-colors-shared-styles",
      "component": {
        "properties": [
          {
            "name": "colors",
            "type": "Object",
            "attribute": "colors",
            "config": "attribute: \"colors\",\n        type: Object,"
          },
          {
            "name": "contrasts",
            "type": "Object",
            "attribute": "contrasts",
            "config": "attribute: \"contrasts\",\n        type: Object,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "getColorInfo",
          "makeVariable",
          "getContrastingShades",
          "getContrastingColors",
          "isContrastCompliant",
          "indexToShade",
          "shadeToIndex",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-colors-shared-styles.js\";\n\ndescribe(\"simple-colors-shared-styles test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-colors-shared-styles\n        title=\"test-title\"\n      ></simple-colors-shared-styles>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-colors-shared-styles passes accessibility test\", async () => {\n    const el = await fixture(\n      html` <simple-colors-shared-styles></simple-colors-shared-styles> `\n    );\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-colors-shared-styles passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-colors-shared-styles\n        aria-labelledby=\"simple-colors-shared-styles\"\n      ></simple-colors-shared-styles>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-colors-shared-styles can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-colors-shared-styles .foo=${'bar'}></simple-colors-shared-styles>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-colors-shared-styles ></simple-colors-shared-styles>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-colors-shared-styles></simple-colors-shared-styles>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-colors-shared-styles></simple-colors-shared-styles>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: colors, contrasts"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-cta": {
      "element": "simple-cta",
      "component": {
        "properties": [
          {
            "name": "link",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"icons:chevron-right\""
          },
          {
            "name": "editMode",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "hideIcon",
            "type": "Boolean",
            "attribute": "hide-icon",
            "config": "type: Boolean,\n        attribute: \"hide-icon\",",
            "defaultValue": "false"
          },
          {
            "name": "large",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "light",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "hotline",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "saturate",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "haxHooks",
          "haxeditModeChanged",
          "if",
          "haxactiveElementChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "DDDPulseEffectSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-cta.js\";\n\ndescribe(\"simple-cta test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-cta title=\"this is my title\"></simple-cta>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-cta passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-cta></simple-cta> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-cta passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-cta aria-labelledby=\"simple-cta\"></simple-cta>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-cta can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-cta .foo=${'bar'}></simple-cta>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-cta ></simple-cta>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-cta></simple-cta>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-cta></simple-cta>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: link, label, icon, editMode, hideIcon, large, light, hotline, saturate, disabled"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-datetime": {
      "element": "simple-datetime",
      "component": {
        "properties": [
          {
            "name": "timestamp",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "format",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"M jS, Y\""
          },
          {
            "name": "date",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "unix",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "formatDate",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-datetime.js\";\n\ndescribe(\"simple-datetime test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<simple-datetime unix=\"\" timestamp=\"445939200\"></simple-datetime>`,\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-datetime passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-datetime></simple-datetime> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-datetime passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-datetime\n        aria-labelledby=\"simple-datetime\"\n      ></simple-datetime>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-datetime can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-datetime .foo=${'bar'}></simple-datetime>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-datetime ></simple-datetime>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-datetime></simple-datetime>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-datetime></simple-datetime>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: timestamp, format, date, unix"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-emoji": {
      "element": "simple-emoji",
      "component": {
        "properties": [],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-emoji.js\";\n\ndescribe(\"simple-emoji test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-emoji title=\"test-title\"></simple-emoji>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-emoji passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-emoji></simple-emoji> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-emoji passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-emoji aria-labelledby=\"simple-emoji\"></simple-emoji>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-emoji can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-emoji .foo=${'bar'}></simple-emoji>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-emoji ></simple-emoji>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-emoji></simple-emoji>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-emoji></simple-emoji>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "simple-fields": {
      "element": "simple-fields",
      "component": {
        "properties": [
          {
            "name": "disableResponsive",
            "type": "Boolean",
            "attribute": "disable-responsive",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"disable-responsive\","
          },
          {
            "name": "fields",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "schematizer",
            "type": "Object",
            "attribute": "schematizer",
            "config": "type: Object,\n        attribute: \"schematizer\","
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__activeTabs",
            "type": "Object",
            "attribute": "active-path",
            "config": "type: Object,\n        attribute: \"active-path\","
          },
          {
            "name": "codeTheme",
            "type": "String",
            "attribute": "code-theme",
            "config": "type: String,\n        attribute: \"code-theme\","
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "active-tabs-changed"
        ],
        "methods": [
          "if",
          "setActiveTab",
          "setActivePath",
          "fieldsToSchema"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-fields.js\";\n\ndescribe(\"simple-fields test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-fields title=\"test-title\"></simple-fields>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-fields passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-fields></simple-fields> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-fields passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-fields aria-labelledby=\"simple-fields\"></simple-fields>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-fields can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-fields .foo=${'bar'}></simple-fields>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-fields ></simple-fields>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-fields></simple-fields>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-fields></simple-fields>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: disableResponsive, fields, schematizer, label, __activeTabs, codeTheme"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: active-tabs-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-filter": {
      "element": "simple-filter",
      "component": {
        "properties": [
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "like",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "where",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "caseSensitive",
            "type": "Boolean",
            "attribute": "case-sensitive",
            "config": "type: Boolean,\n          attribute: \"case-sensitive\",\n          reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "multiMatch",
            "type": "Boolean",
            "attribute": "multi-match",
            "config": "type: Boolean,\n          attribute: \"multi-match\",",
            "defaultValue": "false"
          },
          {
            "name": "filtered",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          }
        ],
        "slots": [],
        "events": [
          "filter",
          "filtered-changed"
        ],
        "methods": [
          "resetList",
          "update",
          "if",
          "filter",
          "escapeRegExp"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleFilterMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-filter.js\";\n\ndescribe(\"simple-filter test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-filter title=\"test-title\"></simple-filter>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-filter passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-filter></simple-filter> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-filter passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-filter aria-labelledby=\"simple-filter\"></simple-filter>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-filter can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-filter .foo=${'bar'}></simple-filter>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-filter ></simple-filter>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-filter></simple-filter>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-filter></simple-filter>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: items, like, where, caseSensitive, multiMatch, filtered"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: filter, filtered-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-icon": {
      "element": "simple-icon",
      "component": {
        "properties": [
          {
            "name": "contrast",
            "type": "Number",
            "attribute": "contrast",
            "config": "type: Number,\n        attribute: \"contrast\",\n        reflect: true,",
            "defaultValue": "0"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": [
          "SimpleIconBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-icon.js\";\n\ndescribe(\"simple-icon test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-icon title=\"test-title\"></simple-icon>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-icon passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-icon></simple-icon> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-icon passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-icon aria-labelledby=\"simple-icon\"></simple-icon>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-icon can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-icon .foo=${'bar'}></simple-icon>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-icon ></simple-icon>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-icon></simple-icon>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-icon></simple-icon>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: contrast"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-icon-picker": {
      "element": "simple-icon-picker",
      "component": {
        "properties": [
          {
            "name": "allowNull",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "true"
          },
          {
            "name": "icons",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "includeSets",
            "type": "Array",
            "attribute": "include-sets",
            "config": "type: Array,\n        attribute: \"include-sets\","
          },
          {
            "name": "excludeSets",
            "type": "Array",
            "attribute": "exclude-sets",
            "config": "type: Array,\n        attribute: \"exclude-sets\","
          },
          {
            "name": "exclude",
            "type": "Array",
            "attribute": "exclude",
            "config": "type: Array,\n        attribute: \"exclude\","
          },
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "optionsPerRow",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "6"
          },
          {
            "name": "__iconList",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          }
        ],
        "slots": [],
        "events": [
          "value-changed"
        ],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-icon-picker.js\";\n\ndescribe(\"simple-icon-picker test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-icon-picker title=\"test-title\"></simple-icon-picker>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-icon-picker passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-icon-picker></simple-icon-picker> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-icon-picker passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-icon-picker\n        aria-labelledby=\"simple-icon-picker\"\n      ></simple-icon-picker>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-icon-picker can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-icon-picker .foo=${'bar'}></simple-icon-picker>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-icon-picker ></simple-icon-picker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-icon-picker></simple-icon-picker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-icon-picker></simple-icon-picker>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: allowNull, icons, includeSets, excludeSets, exclude, value, optionsPerRow, __iconList"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: value-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-img": {
      "element": "simple-img",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "updateconvertedurl",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../simple-img.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<simple-img></simple-img>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "simple-login": {
      "element": "simple-login",
      "component": {
        "properties": [
          {
            "name": "username",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "password",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "userInputLabel",
            "type": "String",
            "attribute": "user-input-label",
            "config": "type: String,\n        attribute: \"user-input-label\",",
            "defaultValue": "\"User name\""
          },
          {
            "name": "userInputErrMsg",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"User name required\""
          },
          {
            "name": "passwordInputLabel",
            "type": "String",
            "attribute": "password-input-label",
            "config": "type: String,\n        attribute: \"password-input-label\",",
            "defaultValue": "\"Password\""
          },
          {
            "name": "passwordInputErrMsg",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Password required\""
          },
          {
            "name": "loginBtnText",
            "type": "String",
            "attribute": "login-btn-text",
            "config": "type: String,\n        attribute: \"login-btn-text\",",
            "defaultValue": "\"Login\""
          }
        ],
        "slots": [],
        "events": [
          "simple-login-login"
        ],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-login.js\";\n\ndescribe(\"simple-login test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-login title=\"test-title\"></simple-login>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-login passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-login></simple-login> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-login passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-login aria-labelledby=\"simple-login\"></simple-login>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-login can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-login .foo=${'bar'}></simple-login>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-login ></simple-login>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-login></simple-login>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-login></simple-login>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: username, password, loading, userInputLabel, userInputErrMsg, passwordInputLabel, passwordInputErrMsg, loginBtnText"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: simple-login-login"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-modal": {
      "element": "simple-modal",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "closeLabel",
            "type": "String",
            "attribute": "close-label",
            "config": "attribute: \"close-label\",\n        type: String,",
            "defaultValue": "\"Close\""
          },
          {
            "name": "closeIcon",
            "type": "String",
            "attribute": "close-icon",
            "config": "type: String,\n        attribute: \"close-icon\",",
            "defaultValue": "\"close\""
          },
          {
            "name": "invokedBy",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "modal",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "mode",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,"
          }
        ],
        "slots": [],
        "events": [
          "simple-toast-hide"
        ],
        "methods": [
          "if",
          "showEvent",
          "show",
          "for",
          "close",
          "open",
          "while"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-modal.js\";\n\ndescribe(\"simple-modal test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-modal title=\"test-title\"></simple-modal>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-modal passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-modal></simple-modal> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-modal passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-modal aria-labelledby=\"simple-modal\"></simple-modal>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-modal can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-modal .foo=${'bar'}></simple-modal>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-modal ></simple-modal>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-modal></simple-modal>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-modal></simple-modal>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, opened, closeLabel, closeIcon, invokedBy, modal, mode"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: simple-toast-hide"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-picker": {
      "element": "simple-picker",
      "component": {
        "properties": [
          {
            "name": "allowNull",
            "type": "Boolean",
            "attribute": "allow-null",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"allow-null\",",
            "defaultValue": "false"
          },
          {
            "name": "alignRight",
            "type": "Boolean",
            "attribute": "align-right",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"align-right\",",
            "defaultValue": "false"
          },
          {
            "name": "ariaLabelledby",
            "type": "String",
            "attribute": "aria-labelledby",
            "config": "type: String,\n          attribute: \"aria-labelledby\",",
            "defaultValue": "null"
          },
          {
            "name": "blockLabel",
            "type": "Boolean",
            "attribute": "block-label",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"block-label\",",
            "defaultValue": "false"
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": "disabled",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"disabled\",",
            "defaultValue": "false"
          },
          {
            "name": "expanded",
            "type": "Boolean",
            "attribute": "expanded",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"expanded\",",
            "defaultValue": "false"
          },
          {
            "name": "hideOptionLabels",
            "type": "Boolean",
            "attribute": "hide-option-labels",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"hide-option-labels\",",
            "defaultValue": "false"
          },
          {
            "name": "hideNullOption",
            "type": "Boolean",
            "attribute": "hide-null-option",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"hide-null-option\","
          },
          {
            "name": "hideSample",
            "type": "Boolean",
            "attribute": "hide-sample",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"hide-sample\",",
            "defaultValue": "false"
          },
          {
            "name": "justify",
            "type": "Boolean",
            "attribute": "justify",
            "config": "type: Boolean,\n          reflect: true,\n          attribute: \"justify\","
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "options",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "titleAsHtml",
            "type": "Boolean",
            "attribute": "title-as-html",
            "config": "type: Boolean,\n          attribute: \"title-as-html\",",
            "defaultValue": "false"
          },
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n          reflect: true,",
            "defaultValue": "null"
          },
          {
            "name": "__activeDesc",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"option-0-0\""
          },
          {
            "name": "__options",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,"
          },
          {
            "name": "__selectedOption",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "__ready",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "changed",
          "click",
          "mousedown",
          "keydown",
          "option-focus",
          "value-changed",
          "change",
          "expand",
          "collapse"
        ],
        "methods": [
          "if",
          "for",
          "renderItem",
          "setOptions"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimplePickerBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../lib/simple-emoji-picker.js\";\n\ndescribe(\"simple-picker test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-emoji-picker></simple-emoji-picker>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-picker passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-picker></simple-picker> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-picker passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-picker aria-labelledby=\"simple-picker\"></simple-picker>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-picker can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-picker .foo=${'bar'}></simple-picker>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-picker ></simple-picker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-picker></simple-picker>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-picker></simple-picker>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: allowNull, alignRight, ariaLabelledby, blockLabel, disabled, expanded, hideOptionLabels, hideNullOption, hideSample, justify, label, options, titleAsHtml, value, __activeDesc, __options, __selectedOption, __ready"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: changed, click, mousedown, keydown, option-focus, value-changed, change, expand, collapse"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-popover": {
      "element": "simple-popover",
      "component": {
        "properties": [],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-popover.js\";\n/*\ndescribe(\"simple-popover test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <simple-popover title=\"test-title\"></simple-popover> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-popover passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-popover></simple-popover> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-popover passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-popover aria-labelledby=\"simple-popover\"></simple-popover>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-popover can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-popover .foo=${'bar'}></simple-popover>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-popover ></simple-popover>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-popover></simple-popover>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-popover></simple-popover>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "simple-progress": {
      "element": "simple-progress",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-progress.js\";\n\ndescribe(\"simple-progress test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-progress title=\"test-title\"></simple-progress>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-progress passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-progress></simple-progress> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-progress passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-progress\n        aria-labelledby=\"simple-progress\"\n      ></simple-progress>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-progress can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-progress .foo=${'bar'}></simple-progress>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-progress ></simple-progress>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-progress></simple-progress>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-progress></simple-progress>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "simple-range-input": {
      "element": "simple-range-input",
      "component": {
        "properties": [
          {
            "name": "dragging",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "immediateValue",
            "type": "Number",
            "attribute": "immediate-value",
            "config": "type: Number, attribute: \"immediate-value\"",
            "defaultValue": "0"
          },
          {
            "name": "value",
            "type": "Number",
            "attribute": null,
            "config": "type: Number, reflect: true",
            "defaultValue": "0"
          },
          {
            "name": "min",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          },
          {
            "name": "step",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "1"
          },
          {
            "name": "max",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "100"
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"Range input\""
          },
          {
            "name": "disabled",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "immediate-value-changed",
          "value-changed"
        ],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../simple-range-input.js\";\ndescribe(\"Image comparison\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-range-input\n        accent-color=\"blue\"\n        label=\"Range input\"\n        style=\"--simple-range-input-track-height:15px\"\n      ></simple-range-input>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: dragging, immediateValue, value, min, step, max, label, disabled"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: immediate-value-changed, value-changed"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: immediate-value"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-search": {
      "element": "simple-search",
      "component": {
        "properties": [
          {
            "name": "alwaysFloatLabel",
            "type": "Boolean",
            "attribute": "always-float-label",
            "config": "attribute: \"always-float-label\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "caseSensitive",
            "type": "Boolean",
            "attribute": "case-sensitive",
            "config": "attribute: \"case-sensitive\",\n        type: Boolean,",
            "defaultValue": "null"
          },
          {
            "name": "controls",
            "type": "String",
            "attribute": "controls",
            "config": "attribute: \"controls\",\n        type: String,",
            "defaultValue": "null"
          },
          {
            "name": "inline",
            "type": "Boolean",
            "attribute": "inline",
            "config": "attribute: \"inline\",\n        type: Boolean,"
          },
          {
            "name": "nextButtonIcon",
            "type": "String",
            "attribute": "next-button-icon",
            "config": "attribute: \"next-button-icon\",\n        type: String,",
            "defaultValue": "\"arrow-forward\""
          },
          {
            "name": "nextButtonLabel",
            "type": "String",
            "attribute": "next-button-label",
            "config": "attribute: \"next-button-label\",\n        type: String,",
            "defaultValue": "\"next result\""
          },
          {
            "name": "noLabelFloat",
            "type": "Boolean",
            "attribute": "no-label-float",
            "config": "attribute: \"no-label-float\",\n        type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "prevButtonIcon",
            "type": "String",
            "attribute": "prev-button-icon",
            "config": "attribute: \"prev-button-icon\",\n        type: String,",
            "defaultValue": "\"arrow-back\""
          },
          {
            "name": "prevButtonLabel",
            "type": "String",
            "attribute": "prev-button-label",
            "config": "attribute: \"prev-button-label\",\n        type: String,",
            "defaultValue": "\"previous result\""
          },
          {
            "name": "resultCount",
            "type": "Number",
            "attribute": "result-count",
            "config": "attribute: \"result-count\",\n        type: Number,",
            "defaultValue": "0"
          },
          {
            "name": "resultPointer",
            "type": "Number",
            "attribute": "result-pointer",
            "config": "attribute: \"result-pointer\",\n        type: Number,",
            "defaultValue": "0"
          },
          {
            "name": "selector",
            "type": "String",
            "attribute": "selector",
            "config": "attribute: \"selector\",\n        type: String,",
            "defaultValue": "null"
          },
          {
            "name": "searchInputIcon",
            "type": "String",
            "attribute": "search-input-icon",
            "config": "attribute: \"search-input-icon\",\n        type: String,",
            "defaultValue": "\"search\""
          },
          {
            "name": "searchInputLabel",
            "type": "String",
            "attribute": "search-input-label",
            "config": "attribute: \"search-input-label\",\n        type: String,",
            "defaultValue": "\"search\""
          },
          {
            "name": "searchTerms",
            "type": "Array",
            "attribute": "search-terms",
            "config": "attribute: \"search-terms\",\n        type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "target",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,",
            "defaultValue": "null"
          },
          {
            "name": "__hideNext",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "true"
          },
          {
            "name": "__hidePrev",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "true"
          }
        ],
        "slots": [],
        "events": [
          "simple-search",
          "goto-result"
        ],
        "methods": [
          "if",
          "for",
          "findMatches"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-search.js\";\n\ndescribe(\"simple-search test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-search title=\"test-title\"></simple-search>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-search passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-search></simple-search> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-search passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-search aria-labelledby=\"simple-search\"></simple-search>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-search can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-search .foo=${'bar'}></simple-search>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-search ></simple-search>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-search></simple-search>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-search></simple-search>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: alwaysFloatLabel, caseSensitive, controls, inline, nextButtonIcon, nextButtonLabel, noLabelFloat, prevButtonIcon, prevButtonLabel, resultCount, resultPointer, selector, searchInputIcon, searchInputLabel, searchTerms, target, __hideNext, __hidePrev"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: simple-search, goto-result"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-toast": {
      "element": "simple-toast",
      "component": {
        "properties": [
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,"
          },
          {
            "name": "text",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "classStyle",
            "type": "String",
            "attribute": "class-style",
            "config": "type: String,\n        attribute: \"class-style\","
          },
          {
            "name": "closeText",
            "type": "String",
            "attribute": "close-text",
            "config": "type: String,\n        attribute: \"close-text\","
          },
          {
            "name": "duration",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "eventCallback",
            "type": "String",
            "attribute": "event-callback",
            "config": "type: String,\n        attribute: \"event-callback\","
          },
          {
            "name": "closeButton",
            "type": "Boolean",
            "attribute": "close-button",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"close-button\","
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "hideSimpleToast",
          "openedChanged",
          "setDefaultToast",
          "while",
          "showSimpleToast",
          "show",
          "hide"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-toast.js\";\n\ndescribe(\"simple-toast test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-toast title=\"test-title\"></simple-toast>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-toast passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-toast></simple-toast> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-toast passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-toast aria-labelledby=\"simple-toast\"></simple-toast>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-toast can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-toast .foo=${'bar'}></simple-toast>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-toast ></simple-toast>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-toast></simple-toast>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-toast></simple-toast>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: opened, text, classStyle, closeText, duration, eventCallback, closeButton"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-toolbar": {
      "element": "simple-toolbar",
      "component": {
        "properties": [
          {
            "name": "alwaysExpanded",
            "type": "Boolean",
            "attribute": "always-expanded",
            "config": "name: \"alwaysExpanded\",\n          type: Boolean,\n          attribute: \"always-expanded\",\n          reflect: true,"
          },
          {
            "name": "ariaControls",
            "type": "String",
            "attribute": "aria-controls",
            "config": "name: \"ariaControls\",\n          type: String,\n          attribute: \"aria-controls\",\n          reflect: true,"
          },
          {
            "name": "ariaLabel",
            "type": "String",
            "attribute": "aria-label",
            "config": "name: \"ariaLabel\",\n          type: String,\n          attribute: \"aria-label\",\n          reflect: true,"
          },
          {
            "name": "collapsed",
            "type": "Boolean",
            "attribute": "collapsed",
            "config": "name: \"collapsed\",\n          type: Boolean,\n          attribute: \"collapsed\",\n          reflect: true,",
            "defaultValue": "true"
          },
          {
            "name": "config",
            "type": "Array",
            "attribute": "config",
            "config": "name: \"config\",\n          type: Array,\n          attribute: \"config\",",
            "defaultValue": "[]"
          },
          {
            "name": "id",
            "type": "String",
            "attribute": "id",
            "config": "name: \"id\",\n          type: String,\n          attribute: \"id\",\n          reflect: true,"
          },
          {
            "name": "moreShortcuts",
            "type": "Object",
            "attribute": "more-shortcuts",
            "config": "name: \"moreShortcuts\",\n          attribute: \"more-shortcuts\",\n          type: Object,"
          },
          {
            "name": "shortcutKeys",
            "type": "Object",
            "attribute": "shortcut-keys",
            "config": "name: \"shortcutKeys\",\n          attribute: \"shortcut-keys\",\n          type: Object,"
          },
          {
            "name": "sticky",
            "type": "Boolean",
            "attribute": "sticky",
            "config": "name: \"sticky\",\n          type: Boolean,\n          attribute: \"sticky\",\n          reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "__buttons",
            "type": "Array",
            "attribute": null,
            "config": "name: \"__buttons\",\n          type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "collapseDisabled",
            "type": "Boolean",
            "attribute": "collapse-disabled",
            "config": "type: Boolean,\n          attribute: \"collapse-disabled\",\n          reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "__focused",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"__focused\",\n          type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "__hovered",
            "type": "Boolean",
            "attribute": null,
            "config": "name: \"__hovered\",\n          type: Boolean,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "shortcut-key-pressed"
        ],
        "methods": [
          "if",
          "addButton",
          "addButtonGroup",
          "clearToolbar",
          "deregisterButton",
          "registerButton",
          "resizeToolbar",
          "getItemIndex",
          "getItem",
          "setCurrentItem",
          "focusOn",
          "updateButton",
          "updateToolbar",
          "switch",
          "while"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "SimpleToolbarBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-toolbar.js\";\n\ndescribe(\"simple-toolbar test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-toolbar title=\"test-title\"></simple-toolbar>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-toolbar passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-toolbar></simple-toolbar> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-toolbar passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-toolbar aria-labelledby=\"simple-toolbar\"></simple-toolbar>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-toolbar can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-toolbar .foo=${'bar'}></simple-toolbar>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-toolbar ></simple-toolbar>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-toolbar></simple-toolbar>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-toolbar></simple-toolbar>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: alwaysExpanded, ariaControls, ariaLabel, collapsed, config, id, moreShortcuts, shortcutKeys, sticky, __buttons, collapseDisabled, __focused, __hovered"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: shortcut-key-pressed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-tooltip": {
      "element": "simple-tooltip",
      "component": {
        "properties": [
          {
            "name": "for",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "manualMode",
            "type": "Boolean",
            "attribute": "manual-mode",
            "config": "type: Boolean, attribute: \"manual-mode\"",
            "defaultValue": "false"
          },
          {
            "name": "position",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"bottom\""
          },
          {
            "name": "fitToVisibleBounds",
            "type": "Boolean",
            "attribute": "fit-to-visible-bounds",
            "config": "type: Boolean,\n        attribute: \"fit-to-visible-bounds\",",
            "defaultValue": "false"
          },
          {
            "name": "offset",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "14"
          },
          {
            "name": "marginTop",
            "type": "Number",
            "attribute": "margin-top",
            "config": "type: Number, attribute: \"margin-top\"",
            "defaultValue": "14"
          },
          {
            "name": "animationDelay",
            "type": "Number",
            "attribute": "animation-delay",
            "config": "type: Number, attribute: \"animation-delay\""
          },
          {
            "name": "animationEntry",
            "type": "String",
            "attribute": "animation-entry",
            "config": "type: String, attribute: \"animation-entry\"",
            "defaultValue": "\"\""
          },
          {
            "name": "animationExit",
            "type": "String",
            "attribute": "animation-exit",
            "config": "type: String, attribute: \"animation-exit\"",
            "defaultValue": "\"\""
          },
          {
            "name": "_showing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "playAnimation",
          "cancelAnimation",
          "show",
          "for",
          "hide",
          "updatePosition",
          "switch"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-tooltip.js\";\n\ndescribe(\"simple-tooltip test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <simple-tooltip title=\"test-title\"></simple-tooltip>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-tooltip passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-tooltip></simple-tooltip> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-tooltip passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-tooltip aria-labelledby=\"simple-tooltip\"></simple-tooltip>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-tooltip can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-tooltip .foo=${'bar'}></simple-tooltip>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-tooltip ></simple-tooltip>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-tooltip></simple-tooltip>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-tooltip></simple-tooltip>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: for, manualMode, position, fitToVisibleBounds, offset, marginTop, animationDelay, animationEntry, animationExit, _showing"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "simple-wc": {
      "element": "simple-wc",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "for",
          "if",
          "haxProperties"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../simple-wc.js\";\n\ndescribe(\"simple-wc test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html` <simple-wc title=\"test-title\"></simple-wc> `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"simple-wc passes accessibility test\", async () => {\n    const el = await fixture(html` <simple-wc></simple-wc> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"simple-wc passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<simple-wc aria-labelledby=\"simple-wc\"></simple-wc>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"simple-wc can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<simple-wc .foo=${'bar'}></simple-wc>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<simple-wc ></simple-wc>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<simple-wc></simple-wc>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<simple-wc></simple-wc>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "social-share-link": {
      "element": "social-share-link",
      "component": {
        "properties": [
          {
            "name": "buttonStyle",
            "type": "Boolean",
            "attribute": "button-style",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"button-style\",",
            "defaultValue": "false"
          },
          {
            "name": "image",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "message",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"\""
          },
          {
            "name": "mode",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "text",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "type",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Twitter\""
          },
          {
            "name": "url",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "__href",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__linkText",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__showIcon",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "switch"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../social-share-link.js\";\n\ndescribe(\"social-share-link test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <social-share-link title=\"test-title\"></social-share-link>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"social-share-link passes accessibility test\", async () => {\n    const el = await fixture(html` <social-share-link></social-share-link> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"social-share-link passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<social-share-link\n        aria-labelledby=\"social-share-link\"\n      ></social-share-link>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"social-share-link can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<social-share-link .foo=${'bar'}></social-share-link>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<social-share-link ></social-share-link>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<social-share-link></social-share-link>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<social-share-link></social-share-link>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: buttonStyle, image, message, mode, text, type, url, __href, __icon, __linkText, __showIcon"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "sorting-question": {
      "element": "sorting-question",
      "component": {
        "properties": [
          {
            "name": "numberCorrect",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          }
        ],
        "slots": [],
        "events": [
          "simple-toast-hide",
          "user-engagement"
        ],
        "methods": [
          "getOptions",
          "if",
          "checkAnswerCallback",
          "resetAnswer",
          "for",
          "renderInteraction",
          "inactiveCase",
          "renderDirections",
          "renderFeedback",
          "haxinlineContextMenu",
          "haxClickInlineAdd",
          "haxClickInlineRemove"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../sorting-question.js\";\n\ndescribe(\"sorting-question test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <sorting-question title=\"test-title\"></sorting-question>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"sorting-question passes accessibility test\", async () => {\n    const el = await fixture(html` <sorting-question></sorting-question> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"sorting-question passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<sorting-question\n        aria-labelledby=\"sorting-question\"\n      ></sorting-question>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"sorting-question can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<sorting-question .foo=${'bar'}></sorting-question>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<sorting-question ></sorting-question>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<sorting-question></sorting-question>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<sorting-question></sorting-question>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: numberCorrect"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: simple-toast-hide, user-engagement"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "spotify-embed": {
      "element": "spotify-embed",
      "component": {
        "properties": [
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "theme",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "size",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"normal\""
          },
          {
            "name": "playlistid",
            "type": "String",
            "attribute": null,
            "config": "type: String, attribute: false",
            "defaultValue": "null"
          },
          {
            "name": "type",
            "type": "String",
            "attribute": null,
            "config": "type: String, attribute: false",
            "defaultValue": "null"
          },
          {
            "name": "editing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "haxHooks",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../spotify-embed.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <spotify-embed\n        source=\"https://open.spotify.com/album/5dRcZuEijcy8xMfSaRjtk8\"\n        theme=\"0\"\n        size=\"compact\"\n      ></spotify-embed>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: source, theme, size, playlistid, type, editing"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "star-rating": {
      "element": "star-rating",
      "component": {
        "properties": [
          {
            "name": "score",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "10"
          },
          {
            "name": "possible",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "100"
          },
          {
            "name": "interactive",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "numStars",
            "type": "Number",
            "attribute": "num-stars",
            "config": "type: Number, attribute: \"num-stars\"",
            "defaultValue": "5"
          },
          {
            "name": "_calPercent",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          }
        ],
        "slots": [],
        "events": [
          "star-rating-click"
        ],
        "methods": [
          "renderStar",
          "if",
          "while",
          "interactiveEvent"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../star-rating.js\";\n\ndescribe(\"star-rating test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <star-rating title=\"test-title\"></star-rating>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"star-rating passes accessibility test\", async () => {\n    const el = await fixture(html` <star-rating></star-rating> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"star-rating passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<star-rating aria-labelledby=\"star-rating\"></star-rating>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"star-rating can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<star-rating .foo=${'bar'}></star-rating>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<star-rating ></star-rating>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<star-rating></star-rating>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<star-rating></star-rating>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: score, possible, interactive, numStars, _calPercent"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: star-rating-click"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "stop-note": {
      "element": "stop-note",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "url",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"stopnoteicons:stop-icon\""
          },
          {
            "name": "status",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "null"
          }
        ],
        "slots": [
          "default",
          "message"
        ],
        "events": [],
        "methods": [
          "if",
          "haxHooks",
          "haxeditModeChanged",
          "haxactiveElementChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": true,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../stop-note.js\";\n\ndescribe(\"stop-note test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<stop-note\n        title=\"Confirmation Message\"\n        url=\"https://www.google.com\"\n        icon=\"stopnoteicons:confirm-icon\"\n      >\n        <span slot=\"message\">You can write any confirmation</span>\n      </stop-note>`,\n    );\n  });\n\n  it(\"message slot correct\", async () => {\n    expect(\n      element.shadowRoot\n        .querySelector(\"slot[name='message']\")\n        .assignedNodes({ flatten: true })[0].textContent,\n    ).to.equal(\"You can write any confirmation\");\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, url, icon, status"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "super-daemon": {
      "element": "super-daemon",
      "component": {
        "properties": [
          {
            "name": "santaMode",
            "type": "Boolean",
            "attribute": "santa-mode",
            "config": "type: Boolean, reflect: true, attribute: \"santa-mode\""
          },
          {
            "name": "opened",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "loading",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "key1",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "key2",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "icon",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "programResults",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "programName",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "allItems",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "context",
            "type": "Array",
            "attribute": null,
            "config": "type: Array"
          },
          {
            "name": "commandContext",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "program",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "programSearch",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "like",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "value",
            "type": "String",
            "attribute": null,
            "config": "type: String"
          },
          {
            "name": "mini",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean"
          },
          {
            "name": "wand",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true"
          },
          {
            "name": "activeNode",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "programTarget",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "voiceSearch",
            "type": "Boolean",
            "attribute": "voice-search",
            "config": "type: Boolean, reflect: true, attribute: \"voice-search\""
          },
          {
            "name": "voiceCommands",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "listeningForInput",
            "type": "Boolean",
            "attribute": "listening-for-input",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"listening-for-input\","
          }
        ],
        "slots": [],
        "events": [
          "super-daemon-close",
          "super-daemon-toast-hide",
          "super-daemon-command-context-changed",
          "super-daemon-context-changed"
        ],
        "methods": [
          "if",
          "waveWand",
          "runProgramEvent",
          "elementMethod",
          "elementClick",
          "defineOptionEvent",
          "defineOption",
          "updateSearchInputViaVoice",
          "addVoiceCommand",
          "keyHandler",
          "setListeningStatus",
          "close",
          "filterItems",
          "playSound",
          "appendContext",
          "removeContext",
          "clickOnMiniMode",
          "miniCancel",
          "open",
          "focusout",
          "while",
          "noResultsSlot",
          "likeChanged",
          "randomResponse",
          "toggleSantaMode",
          "merlinSpeak",
          "promptMerlin",
          "stopMerlin",
          "closeMerlin",
          "belsnickel",
          "defaultVoiceCommands",
          "itemsForDisplay",
          "reprocessVoiceCommands",
          "commandContextChanged",
          "switch",
          "keyHandlerCallback",
          "allowedCallback"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../super-daemon.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<super-daemon></super-daemon>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: santaMode, opened, loading, key1, key2, icon, items, programResults, programName, allItems, context, commandContext, program, programSearch, like, value, mini, wand, activeNode, programTarget, voiceSearch, voiceCommands, listeningForInput"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: super-daemon-close, super-daemon-toast-hide, super-daemon-command-context-changed, super-daemon-context-changed"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: santa-mode, voice-search, listening-for-input"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "tagging-question": {
      "element": "tagging-question",
      "component": {
        "properties": [
          {
            "name": "dragging",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean, reflect: true",
            "defaultValue": "false"
          },
          {
            "name": "dragEnter",
            "type": "Boolean",
            "attribute": "drag-enter",
            "config": "type: Boolean, reflect: true, attribute: \"drag-enter\"",
            "defaultValue": "false"
          },
          {
            "name": "dragEnterAnswer",
            "type": "Boolean",
            "attribute": "drag-enter-answer",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"drag-enter-answer\",",
            "defaultValue": "false"
          },
          {
            "name": "selectedAnswers",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          }
        ],
        "slots": [],
        "events": [
          "simple-toast-hide"
        ],
        "methods": [
          "renderDirections",
          "renderInteraction",
          "isCorrect",
          "renderFeedback",
          "randomizeOptions",
          "for",
          "handleDrag",
          "handleDragEnd",
          "allowDrop",
          "allowDropAnswer",
          "handleDrop",
          "handleTagMove",
          "if",
          "handleTagClick",
          "addTag",
          "removeTag",
          "resetAnswer"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "terrible-themes": {
      "element": "terrible-themes",
      "component": {
        "properties": [],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if",
          "for"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "HAXCMSRememberRoute"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../terrible-themes.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<terrible-themes></terrible-themes>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n  /*\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });*/\n});\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "training-theme": {
      "element": "training-theme",
      "component": {
        "properties": [
          {
            "name": "items",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "activeId",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "null"
          },
          {
            "name": "time",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "0"
          },
          {
            "name": "prevPage",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "nextPage",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "maxIndex",
            "type": "Number",
            "attribute": null,
            "config": "type: Number",
            "defaultValue": "0"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "HAXCMSOperationButtons"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../training-theme.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<training-theme></training-theme>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: items, activeId, time, prevPage, nextPage, maxIndex"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "twitter-embed": {
      "element": "twitter-embed",
      "component": {
        "properties": [
          {
            "name": "tweet",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "null"
          },
          {
            "name": "_haxstate",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "lang",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "globalThis.document.body.getAttribute(\"xml:lang\") ||\n      globalThis.document.body.getAttribute(\"lang\") ||\n      globalThis.document.documentElement.getAttribute(\"xml:lang\") ||\n      globalThis.document.documentElement.getAttribute(\"lang\") ||\n      globalThis.navigator.language ||\n      FALLBACK_LANG"
          },
          {
            "name": "dataWidth",
            "type": "String",
            "attribute": "data-width",
            "config": "type: String,\n        attribute: \"data-width\",",
            "defaultValue": "\"550px\""
          },
          {
            "name": "dataTheme",
            "type": "String",
            "attribute": "data-theme",
            "config": "type: String,\n        attribute: \"data-theme\",",
            "defaultValue": "\"light\""
          },
          {
            "name": "tweetId",
            "type": "String",
            "attribute": "tweet-id",
            "config": "type: String,\n        attribute: \"tweet-id\",",
            "defaultValue": "null"
          },
          {
            "name": "noPopups",
            "type": "Boolean",
            "attribute": "no-popups",
            "config": "type: Boolean,\n        attribute: \"no-popups\","
          },
          {
            "name": "allowPopups",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"allow-popups\""
          }
        ],
        "slots": [],
        "events": [
          "i18n-manager-register-element"
        ],
        "methods": [
          "haxHooks",
          "haxgizmoRegistration",
          "haxactiveElementChanged",
          "if",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../twitter-embed.js\";\n\ndescribe(\"twitter-embed test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <twitter-embed title=\"test-title\"></twitter-embed>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"twitter-embed passes accessibility test\", async () => {\n    const el = await fixture(html` <twitter-embed></twitter-embed> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"twitter-embed passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<twitter-embed aria-labelledby=\"twitter-embed\"></twitter-embed>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"twitter-embed can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<twitter-embed .foo=${'bar'}></twitter-embed>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<twitter-embed ></twitter-embed>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<twitter-embed></twitter-embed>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<twitter-embed></twitter-embed>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: tweet, _haxstate, lang, dataWidth, dataTheme, tweetId, noPopups, allowPopups"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: i18n-manager-register-element"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "type-writer": {
      "element": "type-writer",
      "component": {
        "properties": [
          {
            "name": "delay",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "100"
          },
          {
            "name": "cursorDuration",
            "type": "Number",
            "attribute": "cursor-duration",
            "config": "type: Number,\n        attribute: \"cursor-duration\",",
            "defaultValue": "0"
          },
          {
            "name": "text",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "speed",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,",
            "defaultValue": "150"
          },
          {
            "name": "elementVisible",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,"
          },
          {
            "name": "eraseSpeed",
            "type": "Number",
            "attribute": "erase-speed",
            "config": "type: Number,\n        attribute: \"erase-speed\",",
            "defaultValue": "80"
          },
          {
            "name": "typing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "_length",
            "type": "Number",
            "attribute": null,
            "config": "type: Number,"
          },
          {
            "name": "_oldText",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          }
        ],
        "slots": [],
        "events": [
          "type-writer-end"
        ],
        "methods": [
          "if",
          "type",
          "erase"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../type-writer.js\";\n\ndescribe(\"type-writer test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <type-writer title=\"test-title\"></type-writer>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"type-writer passes accessibility test\", async () => {\n    const el = await fixture(html` <type-writer></type-writer> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"type-writer passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<type-writer aria-labelledby=\"type-writer\"></type-writer>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"type-writer can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<type-writer .foo=${'bar'}></type-writer>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<type-writer ></type-writer>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<type-writer></type-writer>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<type-writer></type-writer>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: delay, cursorDuration, text, speed, elementVisible, eraseSpeed, typing, _length, _oldText"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: type-writer-end"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "un-sdg": {
      "element": "un-sdg",
      "component": {
        "properties": [
          {
            "name": "loading",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "'lazy'"
          },
          {
            "name": "fetchpriority",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "'low'"
          },
          {
            "name": "goal",
            "type": "Number",
            "attribute": null,
            "config": "type: Number, reflect: true",
            "defaultValue": "1"
          },
          {
            "name": "colorOnly",
            "type": "Boolean",
            "attribute": "color-only",
            "config": "type: Boolean, attribute: 'color-only'",
            "defaultValue": "false"
          },
          {
            "name": "alt",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "''"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "if"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport {unSDGGoalData} from \"../un-sdg.js\";\n\nconst goalnum = 4;\ndescribe(\"UN SDG tests\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <un-sdg\n        goal=\"${goalnum}\"\n        color-only\n      ></un-sdg>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"Number for goal\", async () => {\n    expect(element.goal).to.equal(goalnum);\n  });\n  it(\"Number for goal\", async () => {\n    expect(element.alt).to.equal(`Goal ${goalnum}: ${unSDGGoalData[goalnum-1].name}`);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: loading, fetchpriority, goal, colorOnly, alt"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: color-only"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "undo-manager": {
      "element": "undo-manager",
      "component": {
        "properties": [
          {
            "name": "canUndo",
            "type": "Boolean",
            "attribute": "can-undo",
            "config": "type: Boolean,\n          attribute: \"can-undo\","
          },
          {
            "name": "canRedo",
            "type": "Boolean",
            "attribute": "can-redo",
            "config": "type: Boolean,\n          attribute: \"can-redo\","
          },
          {
            "name": "undoStackObserverProps",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "target",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "stack",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          }
        ],
        "slots": [
          "default"
        ],
        "events": [
          "stack-changed",
          "can-undo-changed",
          "can-redo-changed"
        ],
        "methods": [
          "if",
          "undoManagerStackLogic",
          "undo",
          "redo",
          "commands",
          "execute",
          "canUndo",
          "canRedo",
          "changed"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "UndoManagerBehaviors"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../undo-manager.js\";\n\ndescribe(\"undo-manager test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <undo-manager title=\"test-title\"></undo-manager>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"undo-manager passes accessibility test\", async () => {\n    const el = await fixture(html` <undo-manager></undo-manager> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"undo-manager passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<undo-manager aria-labelledby=\"undo-manager\"></undo-manager>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"undo-manager can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<undo-manager .foo=${'bar'}></undo-manager>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<undo-manager ></undo-manager>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<undo-manager></undo-manager>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<undo-manager></undo-manager>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: canUndo, canRedo, undoStackObserverProps, target, stack"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: stack-changed, can-undo-changed, can-redo-changed"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "unity-webgl": {
      "element": "unity-webgl",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "attributeChangedCallback"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n/*\nimport \"../unity-webgl.js\";\n\ndescribe(\"unity-webgl test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<unity-webgl \n      target=\"${new URL('../demo/example/build web', import.meta.url).href}\" \n      compression=\"unityweb\"\n      streamingurl=\"StreamingAssets\" \n      companyname=\"DefaultCompany\" \n      productname=\"test webgl\" \n      productversion=\"0.1\"\n      width=\"460px\" \n      height=\"400px\" \n      background=\"#231F20\">\n    </unity-webgl>`\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n*/\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"unity-webgl passes accessibility test\", async () => {\n    const el = await fixture(html` <unity-webgl></unity-webgl> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"unity-webgl passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<unity-webgl aria-labelledby=\"unity-webgl\"></unity-webgl>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"unity-webgl can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<unity-webgl .foo=${'bar'}></unity-webgl>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<unity-webgl ></unity-webgl>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<unity-webgl></unity-webgl>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<unity-webgl></unity-webgl>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "user-action": {
      "element": "user-action",
      "component": {
        "properties": [],
        "slots": [],
        "events": [
          "i18n-manager-register-element"
        ],
        "methods": [
          "if",
          "attributeChangedCallback",
          "switch",
          "handleIntersectionCallback",
          "for",
          "userActionEvent",
          "haxHooks",
          "haxgizmoRegistration",
          "haxactiveElementChanged",
          "haxeditModeChanged"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../user-action.js\";\n\ndescribe(\"user-action test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <user-action title=\"test-title\"></user-action>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"user-action passes accessibility test\", async () => {\n    const el = await fixture(html` <user-action></user-action> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"user-action passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<user-action aria-labelledby=\"user-action\"></user-action>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"user-action can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<user-action .foo=${'bar'}></user-action>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<user-action ></user-action>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<user-action></user-action>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<user-action></user-action>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: i18n-manager-register-element"
        }
      ],
      "needsWork": true,
      "priority": "MEDIUM"
    },
    "user-scaffold": {
      "element": "user-scaffold",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "userActionArchitypes",
          "userKeyDownAction",
          "userPasteAction",
          "userDropAction",
          "userDragAction",
          "userMouseAction",
          "incrementWriteMemory",
          "writeMemory",
          "deleteMemory",
          "readMemory",
          "isBase64"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\nimport \"../user-scaffold.js\";\n\ndescribe(\"elementName test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`<user-scaffold></user-scaffold>`);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "utils": {
      "element": "utils",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for",
          "while",
          "switch",
          "function"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": false,
        "hasAccessibilityTests": false,
        "testedProperties": [],
        "testedSlots": [],
        "testedEvents": [],
        "testedMethods": []
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_TEST_FILE",
          "message": "No test file found. Create test/${elementName}.test.js"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "video-player": {
      "element": "video-player",
      "component": {
        "properties": [
          {
            "name": "sourceType",
            "type": "String",
            "attribute": null,
            "config": "type: String",
            "defaultValue": "\"\""
          },
          {
            "name": "accentColor",
            "type": "String",
            "attribute": "accent-color",
            "config": "type: String,\n        attribute: \"accent-color\",\n        reflect: true,"
          },
          {
            "name": "crossorigin",
            "type": "String",
            "attribute": "crossorigin",
            "config": "type: String,\n        attribute: \"crossorigin\",\n        reflect: true,",
            "defaultValue": "\"anonymous\""
          },
          {
            "name": "dark",
            "type": "Boolean",
            "attribute": "dark",
            "config": "type: Boolean,\n        attribute: \"dark\",\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "darkTranscript",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "disableInteractive",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "height",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "hideTimestamps",
            "type": "Boolean",
            "attribute": "hide-timestamps",
            "config": "type: Boolean,\n        attribute: \"hide-timestamps\",",
            "defaultValue": "false"
          },
          {
            "name": "hideTranscript",
            "type": "Boolean",
            "attribute": "hide-transcript",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"hide-transcript\",",
            "defaultValue": "false"
          },
          {
            "name": "id",
            "type": "String",
            "attribute": "id",
            "config": "type: String,\n        attribute: \"id\",\n        reflect: true,"
          },
          {
            "name": "learningMode",
            "type": "Boolean",
            "attribute": "learning-mode",
            "config": "type: Boolean,\n        attribute: \"learning-mode\",",
            "defaultValue": "false"
          },
          {
            "name": "lang",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"en\""
          },
          {
            "name": "linkable",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "mediaTitle",
            "type": "String",
            "attribute": "media-title",
            "config": "type: String,\n        attribute: \"media-title\",\n        reflect: true,"
          },
          {
            "name": "hideYoutubeLink",
            "type": "Boolean",
            "attribute": "hide-youtube-link",
            "config": "type: Boolean,\n        attribute: \"hide-youtube-link\",",
            "defaultValue": "false"
          },
          {
            "name": "source",
            "type": "String",
            "attribute": null,
            "config": "type: String,\n        reflect: true,",
            "defaultValue": "\"\""
          },
          {
            "name": "sources",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "sourceData",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "stickyCorner",
            "type": "String",
            "attribute": "sticky-corner",
            "config": "type: String,\n        attribute: \"sticky-corner\",\n        reflect: true,",
            "defaultValue": "\"none\""
          },
          {
            "name": "track",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "tracks",
            "type": "Array",
            "attribute": null,
            "config": "type: Array,",
            "defaultValue": "[]"
          },
          {
            "name": "thumbnailSrc",
            "type": "String",
            "attribute": "thumbnail-src",
            "config": "type: String,\n        attribute: \"thumbnail-src\",\n        reflect: true,"
          },
          {
            "name": "width",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "playing",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,\n        reflect: true,",
            "defaultValue": "false"
          },
          {
            "name": "allowBackgroundPlay",
            "type": "Boolean",
            "attribute": "allow-background-play",
            "config": "type: Boolean,\n        reflect: true,\n        attribute: \"allow-background-play\",",
            "defaultValue": "false"
          },
          {
            "name": "startTime",
            "type": "Number",
            "attribute": "start-time",
            "config": "type: Number,\n        attribute: \"start-time\",",
            "defaultValue": "null"
          },
          {
            "name": "endTime",
            "type": "Number",
            "attribute": "end-time",
            "config": "type: Number,\n        attribute: \"end-time\",",
            "defaultValue": "null"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "querySelectorAll",
          "if",
          "haxHooks",
          "haxinlineContextMenu",
          "haxClickTimeCode",
          "haxpostProcessNodeToContent",
          "setSourceData",
          "playEvent",
          "pauseEvent",
          "restart",
          "restartEvent",
          "pause",
          "play",
          "seek",
          "endTimeTest"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../video-player.js\";\n\ndescribe(\"video-player test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <video-player id=\"example\" accent-color=\"amber\" linkable>\n        <video>\n          <source\n            src=\"https://iandevlin.github.io/mdn/video-player-with-captions/video/sintel-short.mp4\"\n            type=\"video/mp4\"\n          />\n        </video>\n      </video-player>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"video-player passes accessibility test\", async () => {\n    const el = await fixture(html` <video-player></video-player> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"video-player passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<video-player aria-labelledby=\"video-player\"></video-player>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"video-player can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<video-player .foo=${'bar'}></video-player>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<video-player ></video-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<video-player></video-player>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<video-player></video-player>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: sourceType, accentColor, crossorigin, dark, darkTranscript, disableInteractive, height, hideTimestamps, hideTranscript, id, learningMode, lang, linkable, mediaTitle, hideYoutubeLink, source, sources, sourceData, stickyCorner, track, tracks, thumbnailSrc, width, playing, allowBackgroundPlay, startTime, endTime"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "vocab-term": {
      "element": "vocab-term",
      "component": {
        "properties": [
          {
            "name": "popoverMode",
            "type": "Boolean",
            "attribute": "popover-mode",
            "config": "type: Boolean, reflect: true, attribute: \"popover-mode\"",
            "defaultValue": "false"
          },
          {
            "name": "detailsOpen",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [],
        "methods": [
          "haxHooks",
          "haxactiveElementChanged",
          "if",
          "haxeditModeChanged",
          "toggleOpen",
          "detailsFocusOut"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../vocab-term.js\";\n\ndescribe(\"vocab-term test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <vocab-term title=\"test-title\"></vocab-term>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"vocab-term passes accessibility test\", async () => {\n    const el = await fixture(html` <vocab-term></vocab-term> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"vocab-term passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<vocab-term aria-labelledby=\"vocab-term\"></vocab-term>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"vocab-term can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<vocab-term .foo=${'bar'}></vocab-term>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<vocab-term ></vocab-term>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<vocab-term></vocab-term>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<vocab-term></vocab-term>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: popoverMode, detailsOpen"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "voice-recorder": {
      "element": "voice-recorder",
      "component": {
        "properties": [
          {
            "name": "recording",
            "type": "Boolean",
            "attribute": null,
            "config": "type: Boolean,",
            "defaultValue": "false"
          },
          {
            "name": "label",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "\"Activate Recorder\""
          }
        ],
        "slots": [],
        "events": [
          "voice-recorder-recording-blob"
        ],
        "methods": [
          "toggleRecording",
          "recorder"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../voice-recorder.js\";\n\ndescribe(\"voice-recorder test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <voice-recorder title=\"test-title\"></voice-recorder>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"voice-recorder passes accessibility test\", async () => {\n    const el = await fixture(html` <voice-recorder></voice-recorder> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"voice-recorder passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<voice-recorder aria-labelledby=\"voice-recorder\"></voice-recorder>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"voice-recorder can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<voice-recorder .foo=${'bar'}></voice-recorder>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<voice-recorder ></voice-recorder>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<voice-recorder></voice-recorder>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<voice-recorder></voice-recorder>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: recording, label"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: voice-recorder-recording-blob"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "wc-autoload": {
      "element": "wc-autoload",
      "component": {
        "properties": [],
        "slots": [],
        "events": [],
        "methods": [
          "if",
          "for",
          "processNewElement"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": false,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../wc-autoload.js\";\n\ndescribe(\"wc-autoload test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <wc-autoload title=\"test-title\"></wc-autoload>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"wc-autoload passes accessibility test\", async () => {\n    const el = await fixture(html` <wc-autoload></wc-autoload> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"wc-autoload passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<wc-autoload aria-labelledby=\"wc-autoload\"></wc-autoload>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"wc-autoload can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<wc-autoload .foo=${'bar'}></wc-autoload>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<wc-autoload ></wc-autoload>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<wc-autoload></wc-autoload>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<wc-autoload></wc-autoload>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [],
      "needsWork": false,
      "priority": "LOW"
    },
    "web-container": {
      "element": "web-container",
      "component": {
        "properties": [
          {
            "name": "fname",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "null"
          },
          {
            "name": "status",
            "type": "String",
            "attribute": null,
            "config": "type: String, reflect: true",
            "defaultValue": "\"Loading\""
          },
          {
            "name": "files",
            "type": "Object",
            "attribute": null,
            "config": "type: Object"
          },
          {
            "name": "filesShown",
            "type": "Array",
            "attribute": null,
            "config": "type: Array",
            "defaultValue": "[]"
          },
          {
            "name": "hideTerminal",
            "type": "Boolean",
            "attribute": "hide-terminal",
            "config": "type: Boolean, reflect: true, attribute: 'hide-terminal'",
            "defaultValue": "false"
          },
          {
            "name": "hideEditor",
            "type": "Boolean",
            "attribute": "hide-editor",
            "config": "type: Boolean, reflect: true, attribute: 'hide-editor'",
            "defaultValue": "false"
          },
          {
            "name": "hideWindow",
            "type": "Boolean",
            "attribute": "hide-window",
            "config": "type: Boolean, reflect: true, attribute: 'hide-window'",
            "defaultValue": "false"
          }
        ],
        "slots": [],
        "events": [
          "web-container-dependencies-installing",
          "web-container-dependencies-installed",
          "web-container-npm-start",
          "web-container-server-ready",
          "web-container-command-start",
          "web-container-command-finished"
        ],
        "methods": [
          "write",
          "if",
          "for",
          "getLanguageFromFileEnding",
          "setCodeEditor",
          "editorValueChanged",
          "refreshIframe"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "DDDSuper"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": false,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { html, fixture, expect } from '@open-wc/testing';\nimport \"../web-container.js\";\n\ndescribe(\"webContainer test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <web-container\n        title=\"title\"\n      ></web-container>\n    `);\n  });\n\n  it(\"basic will it blend\", async () => {\n    expect(element).to.exist;\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: fname, status, files, filesShown, hideTerminal, hideEditor, hideWindow"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: web-container-dependencies-installing, web-container-dependencies-installed, web-container-npm-start, web-container-server-ready, web-container-command-start, web-container-command-finished"
        },
        {
          "priority": "HIGH",
          "type": "MISSING_ATTRIBUTE_TESTS",
          "message": "Add attribute-to-property mapping tests for: hide-terminal, hide-editor, hide-window"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "wikipedia-query": {
      "element": "wikipedia-query",
      "component": {
        "properties": [
          {
            "name": "title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "__now",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "_title",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "headers",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "hideTitle",
            "type": "Boolean",
            "attribute": "hide-title",
            "config": "type: Boolean,\n        attribute: \"hide-title\",",
            "defaultValue": "false"
          },
          {
            "name": "search",
            "type": "String",
            "attribute": null,
            "config": "type: String,"
          },
          {
            "name": "language",
            "type": "String",
            "attribute": null,
            "config": "type: String,",
            "defaultValue": "language.split(\"-\")[0]"
          }
        ],
        "slots": [],
        "events": [
          "i18n-manager-register-element",
          "hax-register-app"
        ],
        "methods": [
          "updateArticle",
          "if",
          "handleResponse",
          "for",
          "haxHooks",
          "haxgizmoRegistration"
        ],
        "hasHaxProperties": true,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "IntersectionObserverMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../wikipedia-query.js\";\n\ndescribe(\"wikipedia-query test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <wikipedia-query title=\"test-title\"></wikipedia-query>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"wikipedia-query passes accessibility test\", async () => {\n    const el = await fixture(html` <wikipedia-query></wikipedia-query> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"wikipedia-query passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<wikipedia-query\n        aria-labelledby=\"wikipedia-query\"\n      ></wikipedia-query>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"wikipedia-query can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<wikipedia-query .foo=${'bar'}></wikipedia-query>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<wikipedia-query ></wikipedia-query>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<wikipedia-query></wikipedia-query>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<wikipedia-query></wikipedia-query>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: title, __now, _title, headers, hideTitle, search, language"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: i18n-manager-register-element, hax-register-app"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "word-count": {
      "element": "word-count",
      "component": {
        "properties": [
          {
            "name": "words",
            "type": "Number",
            "attribute": null,
            "config": "type: Number"
          },
          {
            "name": "wordsPrefix",
            "type": "String",
            "attribute": "words-prefix",
            "config": "type: String, attribute: \"words-prefix\"",
            "defaultValue": "\"Word count\""
          }
        ],
        "slots": [
          "default"
        ],
        "events": [],
        "methods": [
          "update",
          "if"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": [
          "I18NMixin"
        ]
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../word-count.js\";\n\ndescribe(\"word-count test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(html`\n      <word-count title=\"test-title\"></word-count>\n    `);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n/*\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"word-count passes accessibility test\", async () => {\n    const el = await fixture(html` <word-count></word-count> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"word-count passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<word-count aria-labelledby=\"word-count\"></word-count>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"word-count can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<word-count .foo=${'bar'}></word-count>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<word-count ></word-count>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<word-count></word-count>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<word-count></word-count>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: words, wordsPrefix"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_SLOT_TESTS",
          "message": "Add slot tests for: default"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    },
    "wysiwyg-hax": {
      "element": "wysiwyg-hax",
      "component": {
        "properties": [
          {
            "name": "openDefault",
            "type": "Boolean",
            "attribute": "open-default",
            "config": "type: Boolean,\n        attribute: \"open-default\","
          },
          {
            "name": "redirectLocation",
            "type": "String",
            "attribute": "redirect-location",
            "config": "type: String,\n        attribute: \"redirect-location\","
          },
          {
            "name": "hidePanelOps",
            "type": "Boolean",
            "attribute": "hide-panel-ops",
            "config": "type: Boolean,\n        attribute: \"hide-panel-ops\","
          },
          {
            "name": "elementAlign",
            "type": "String",
            "attribute": "element-align",
            "config": "type: String,\n        attribute: \"element-align\","
          },
          {
            "name": "offsetMargin",
            "type": "String",
            "attribute": "offset-margin",
            "config": "type: String,\n        attribute: \"offset-margin\","
          },
          {
            "name": "bodyValue",
            "type": "String",
            "attribute": "body-value",
            "config": "type: String,\n        attribute: \"body-value\","
          },
          {
            "name": "allowedTags",
            "type": "Array",
            "attribute": "allowed-tags",
            "config": "type: Array,\n        attribute: \"allowed-tags\","
          },
          {
            "name": "appStoreConnection",
            "type": "String",
            "attribute": "app-store-connection",
            "config": "type: String,\n        attribute: \"app-store-connection\","
          },
          {
            "name": "saveButtonSelector",
            "type": "Object",
            "attribute": null,
            "config": "type: Object,"
          },
          {
            "name": "fieldClass",
            "type": "String",
            "attribute": "field-class",
            "config": "type: String,\n        attribute: \"field-class\","
          },
          {
            "name": "fieldId",
            "type": "String",
            "attribute": "field-id",
            "config": "type: String,\n        attribute: \"field-id\","
          },
          {
            "name": "fieldName",
            "type": "String",
            "attribute": "field-name",
            "config": "type: String,\n        attribute: \"field-name\","
          },
          {
            "name": "syncBody",
            "type": "Boolean",
            "attribute": "sync-body",
            "config": "type: Boolean,\n        attribute: \"sync-body\",\n        reflect: true,"
          },
          {
            "name": "endPoint",
            "type": "String",
            "attribute": "end-point",
            "config": "type: String,\n        attribute: \"end-point\","
          },
          {
            "name": "updatePageData",
            "type": "String",
            "attribute": "update-page-data",
            "config": "type: String,\n        attribute: \"update-page-data\","
          }
        ],
        "slots": [],
        "events": [
          "hax-save",
          "simple-modal-hide"
        ],
        "methods": [
          "if",
          "createRenderRoot"
        ],
        "hasHaxProperties": false,
        "extendsLitElement": true,
        "extendsOtherBehaviors": []
      },
      "tests": {
        "exists": true,
        "hasAccessibilityTests": true,
        "hasPropertyTests": false,
        "hasAttributeTests": true,
        "hasSlotTests": false,
        "hasEventTests": false,
        "hasMethodTests": false,
        "content": "import { fixture, expect, html } from \"@open-wc/testing\";\n\nimport \"../wysiwyg-hax.js\";\n/*\ndescribe(\"wysiwyg-hax test\", () => {\n  let element;\n  beforeEach(async () => {\n    element = await fixture(\n      html` <wysiwyg-hax title=\"test-title\"></wysiwyg-hax> `\n    );\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n\n\ndescribe(\"A11y/chai axe tests\", () => {\n  it(\"wysiwyg-hax passes accessibility test\", async () => {\n    const el = await fixture(html` <wysiwyg-hax></wysiwyg-hax> `);\n    await expect(el).to.be.accessible();\n  });\n  it(\"wysiwyg-hax passes accessibility negation\", async () => {\n    const el = await fixture(\n      html`<wysiwyg-hax aria-labelledby=\"wysiwyg-hax\"></wysiwyg-hax>`\n    );\n    await assert.isNotAccessible(el);\n  });\n});\n\n/*\n// Custom properties test\ndescribe(\"Custom Property Test\", () => {\n  it(\"wysiwyg-hax can instantiate a element with custom properties\", async () => {\n    const el = await fixture(html`<wysiwyg-hax .foo=${'bar'}></wysiwyg-hax>`);\n    expect(el.foo).to.equal('bar');\n  })\n})\n*/\n\n/*\n// Test if element is mobile responsive\ndescribe('Test Mobile Responsiveness', () => {\n    before(async () => {z   \n      await setViewport({width: 375, height: 750});\n    })\n    it('sizes down to 360px', async () => {\n      const el = await fixture(html`<wysiwyg-hax ></wysiwyg-hax>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('360px');\n    })\n}) */\n\n/*\n// Test if element sizes up for desktop behavior\ndescribe('Test Desktop Responsiveness', () => {\n    before(async () => {\n      await setViewport({width: 1000, height: 1000});\n    })\n    it('sizes up to 410px', async () => {\n      const el = await fixture(html`<wysiwyg-hax></wysiwyg-hax>`);\n      const width = getComputedStyle(el).width;\n      expect(width).to.equal('410px');\n    })\n    it('hides mobile menu', async () => {\n      const el await fixture(html`<wysiwyg-hax></wysiwyg-hax>`);\n      const hidden = el.getAttribute('hidden');\n      expect(hidden).to.equal(true);\n    })\n}) */\n"
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "MISSING_PROPERTY_TESTS",
          "message": "Add comprehensive property tests for: openDefault, redirectLocation, hidePanelOps, elementAlign, offsetMargin, bodyValue, allowedTags, appStoreConnection, saveButtonSelector, fieldClass, fieldId, fieldName, syncBody, endPoint, updatePageData"
        },
        {
          "priority": "MEDIUM",
          "type": "MISSING_EVENT_TESTS",
          "message": "Add event tests for: hax-save, simple-modal-hide"
        }
      ],
      "needsWork": true,
      "priority": "HIGH"
    }
  }
}