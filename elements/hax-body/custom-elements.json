{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "hax-body.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-body`\nManager of the body area that can be modified\n\n### Styling\n`<hax-bodys>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-ui-headings |   | #d4ff77;\n--hax-color-text | default text color | #000\n--hax-contextual-action-text-color |  | --simple-colors-default-theme-grey-1\n--hax-contextual-action-color |  | --simple-colors-default-theme-cyan-7\n--hax-contextual-action-hover-color |  | \n--hax-body-target-background-color: --simple-colors-default-theme-cyan-2\n--hax-body-possible-target-background-color: --simple-colors-default-theme-grey-2\n\n####Outlines\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-body-editable-outline |   | 1px solid --simple-colors-default-theme-deep-orange\n--hax-body-active-outline-hover: 1px solid --hax-contextual-action-color\n--hax-body-active-outline: 3px solid  --hax-contextual-action-color",
          "name": "HaxBody",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isGridActive",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "dragEndBody",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "When we end dragging ensure we remove the mover class."
            },
            {
              "kind": "method",
              "name": "_mouseLeave",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_mouseMove",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_mouseDown",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_mouseUp",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "On mouse release, dump any scroller and the end cap element"
            },
            {
              "kind": "method",
              "name": "scrollerFixclickEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "blurEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__manageFakeEndCap",
              "parameters": [
                {
                  "name": "create",
                  "default": "true"
                }
              ],
              "description": "Make a fake end cap element so we can drop in the last position"
            },
            {
              "kind": "method",
              "name": "dragEnterBody",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Activation allowed from outside this grid as far as drop areas"
            },
            {
              "kind": "method",
              "name": "revealMenuIfHidden",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "calcClasses",
              "parameters": [
                {
                  "name": "activeNode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "HAXBODYStyleSheetContent"
            },
            {
              "kind": "method",
              "name": "_toggleNodeLocking",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keepContextVisible",
              "parameters": [
                {
                  "name": "e",
                  "default": "null"
                }
              ],
              "description": "Keep the context menu visible if needed"
            },
            {
              "kind": "method",
              "name": "_onKeyUp",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onKeyDown",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "keyboardShortCutProcess",
              "parameters": [
                {
                  "name": "guess"
                }
              ],
              "description": "Process input to see if it matches any defined keyboard shortcuts"
            },
            {
              "kind": "method",
              "name": "setActiveNode",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "force",
                  "default": "false"
                }
              ],
              "description": "sets active node"
            },
            {
              "kind": "method",
              "name": "elementMidViewport",
              "description": "Only true if we are scrolling and part way through an element"
            },
            {
              "kind": "method",
              "name": "replacePlaceholder",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Replace place holder after an event has called for it in the element itself"
            },
            {
              "kind": "method",
              "name": "canTansformNode",
              "parameters": [
                {
                  "name": "node",
                  "default": "null"
                }
              ]
            },
            {
              "kind": "method",
              "name": "insertElementWorkflow",
              "parameters": [
                {
                  "name": "activeNode",
                  "default": "null"
                },
                {
                  "name": "testOnly",
                  "default": "false"
                }
              ],
              "description": "Whole workflow of replacing something in place contextually.\nThis can fire for things like events needing this workflow to\ninvoke whether it's a \"convert\" event or a \"replace placeholder\" event"
            },
            {
              "kind": "field",
              "name": "primitiveTextBlocks",
              "description": "Whole workflow of replacing something in place contextually.\nThis can fire for things like events needing this workflow to\ninvoke whether it's a \"convert\" event or a \"replace placeholder\" event",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getAllSlotConfig",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "grid",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "\ngets configuration for all of given grid's slots",
              "return": {
                "type": {
                  "text": "array"
                }
              }
            },
            {
              "kind": "method",
              "name": "getParentGrid",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "\ngets parent grid if given node is slotted content",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSlotConfig",
              "parameters": [
                {
                  "name": "slotId",
                  "default": "\"\"",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "props",
                  "default": "{}",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "\ngets slot configuration for a given slot from haxProperties given",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "replaceElementWorkflow",
              "parameters": [
                {
                  "name": "activeNode",
                  "default": "null"
                },
                {
                  "name": "testOnly",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "haxClearBody",
              "parameters": [
                {
                  "name": "confirm",
                  "default": "true"
                }
              ],
              "description": "Clear area."
            },
            {
              "kind": "method",
              "name": "haxInsert",
              "parameters": [
                {
                  "name": "tag"
                },
                {
                  "name": "content"
                },
                {
                  "name": "properties",
                  "default": "{}"
                },
                {
                  "name": "active",
                  "default": "this.activeNode"
                },
                {
                  "name": "child",
                  "default": "false"
                }
              ],
              "description": "Insert new tag + content into the local DOM as a node."
            },
            {
              "kind": "method",
              "name": "haxToContent",
              "description": "Return the current hax content area as text that could be\ninserted into something."
            },
            {
              "kind": "method",
              "name": "haxDuplicateNode",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Duplicate node into the local DOM below the current item if we can."
            },
            {
              "kind": "method",
              "name": "hideContextMenus",
              "parameters": [
                {
                  "name": "hidePlate",
                  "default": "true"
                }
              ],
              "description": "Hide all context menus."
            },
            {
              "kind": "method",
              "name": "positionContextMenus",
              "parameters": [
                {
                  "name": "node",
                  "default": "this.activeNode"
                }
              ],
              "description": "Reposition context menus to match an element."
            },
            {
              "kind": "method",
              "name": "__addActiveVisible",
              "description": "No idea how to describe these name wise but basically we want to only\nshow the menus when we need them. This toggle allows us the ability\nto hide the context menus while the user is engaged in typing or\nother actions where the in-context menus are distracting"
            },
            {
              "kind": "method",
              "name": "__dropActiveVisible"
            },
            {
              "kind": "method",
              "name": "haxMoveGridPlate",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "direction",
                  "default": "1"
                }
              ],
              "description": "Move grid plate around"
            },
            {
              "kind": "method",
              "name": "haxGridPlateOps",
              "parameters": [
                {
                  "name": "add",
                  "default": "true"
                },
                {
                  "name": "side",
                  "default": "\"right\""
                },
                {
                  "name": "node",
                  "default": "this.activeNode"
                }
              ],
              "description": "Inject / modify a grid plate where something currently lives"
            },
            {
              "kind": "method",
              "name": "haxReplaceNode",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "replacement"
                }
              ],
              "description": "Convert an element from one tag to another."
            },
            {
              "kind": "method",
              "name": "haxChangeTagName",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "tagName"
                },
                {
                  "name": "maintainContent",
                  "default": "true"
                }
              ],
              "description": "Convert an element from one tag to another."
            },
            {
              "kind": "method",
              "name": "haxDeleteNode",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Delete the node passed in"
            },
            {
              "kind": "method",
              "name": "importContent",
              "parameters": [
                {
                  "name": "html"
                },
                {
                  "name": "clear",
                  "default": "true"
                }
              ],
              "description": "Bulk import HTML with option to clear what is currently\nin the slot of this tag. This also validates tags\nthat are being inserted for security based on the\ninternal whitelist."
            },
            {
              "kind": "method",
              "name": "sortGridSlots",
              "parameters": [
                {
                  "name": "grid",
                  "default": "this.activeNode",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "ensures that all slots in a grid follow the expected order",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_haxContextOperation",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Respond to hax operations."
            },
            {
              "kind": "method",
              "name": "_focusIn",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Item has gained focus, change active element to match"
            },
            {
              "kind": "method",
              "name": "__focusLogic",
              "parameters": [
                {
                  "name": "target",
                  "description": "object - dom node to focus on"
                },
                {
                  "name": "autoFocus",
                  "default": "true",
                  "description": "boolean - whether to auto focus / place cursor"
                }
              ],
              "description": "Focus a target and update the data model to reflect this.\nThis helps ensure that keyboard and non click based focusing\nregisters the same as click events"
            },
            {
              "kind": "method",
              "name": "scrollHere",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Simple utility to do nice scrolling or only scroll if we can't see it\nas that is better behavior but not in all browsers"
            },
            {
              "kind": "method",
              "name": "undo"
            },
            {
              "kind": "method",
              "name": "redo"
            },
            {
              "kind": "method",
              "name": "_editModeChanged",
              "parameters": [
                {
                  "name": "newValue"
                },
                {
                  "name": "oldValue"
                }
              ],
              "description": "Notice the change between states for editing."
            },
            {
              "kind": "method",
              "name": "_haxResolvePreviousElement",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Test if this is a HAX element or not"
            },
            {
              "kind": "method",
              "name": "_validElementTest",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "allowInline",
                  "default": "false"
                }
              ],
              "description": "Test if this is a HAX element or not\ntrue means its a valid element for selection\nWe have special support for the hax-logo because it's hax."
            },
            {
              "kind": "method",
              "name": "_HTMLInlineTextDecorationTest",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "test for inline tags"
            },
            {
              "kind": "method",
              "name": "_HTMLPrimativeTest",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Test if this is an HTML primative"
            },
            {
              "kind": "method",
              "name": "_applyContentEditable",
              "parameters": [
                {
                  "name": "status"
                },
                {
                  "name": "target",
                  "default": "this.shadowRoot.querySelector(\"#body\")"
                }
              ],
              "description": "Walk everything we find and either enable or disable editable state."
            },
            {
              "kind": "method",
              "name": "__layoutDropEvent",
              "parameters": [
                {
                  "name": "e"
                },
                {
                  "name": "node"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__layoutDragEnter",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__layoutDragLeave",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__layoutMonitor",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__getLayoutOrder",
              "parameters": [
                {
                  "name": "target"
                },
                {
                  "name": "layout"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__layoutCanMove",
              "parameters": [
                {
                  "name": "target"
                },
                {
                  "name": "layout"
                },
                {
                  "name": "before"
                },
                {
                  "description": "item",
                  "name": "the",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "description": "-1 for left or +1 for right",
                  "name": "",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Determines if the item can move a set number of slots.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "__layoutMove",
              "parameters": [
                {
                  "name": "target"
                },
                {
                  "name": "layout"
                },
                {
                  "name": "before"
                },
                {
                  "description": "item",
                  "name": "the",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "description": "-1 for left or +1 for right",
                  "name": "",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Moves an item a set number of slots."
            },
            {
              "kind": "method",
              "name": "__sortLayoutChildren",
              "parameters": [
                {
                  "name": "layout"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__layoutSlotValid",
              "parameters": [
                {
                  "name": "target"
                },
                {
                  "name": "layout"
                }
              ],
              "description": "Validate the slot name"
            },
            {
              "kind": "method",
              "name": "__layoutSlots",
              "parameters": [
                {
                  "name": "layout"
                }
              ],
              "description": "gets a layout's valud slots"
            },
            {
              "kind": "method",
              "name": "__applyDragDropState",
              "parameters": [
                {
                  "name": "layout"
                },
                {
                  "name": "haxRay"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__isLayout",
              "parameters": [
                {
                  "name": "el"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__applyNodeEditableState",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "status",
                  "default": "true"
                }
              ],
              "description": "Apply the node editable state correctly so we can do drag and drop / editing uniformly"
            },
            {
              "kind": "method",
              "name": "undoManagerStackLogic",
              "parameters": [
                {
                  "name": "mutations"
                }
              ],
              "description": "Refine the stack logic so that visual class markers\ndo not bleed over into state changes"
            },
            {
              "kind": "method",
              "name": "dropEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Drop an item onto another"
            },
            {
              "kind": "method",
              "name": "dragEnter",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Enter an element, meaning we've over it while dragging"
            },
            {
              "kind": "method",
              "name": "handleMousemove",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "dragLeave",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Leaving an element while dragging."
            },
            {
              "kind": "method",
              "name": "toggleElementEditMode",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "editProp"
                }
              ]
            },
            {
              "kind": "method",
              "name": "unsetElementEditMode",
              "parameters": [
                {
                  "name": "node",
                  "default": "this.activeNode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setElementEditMode",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "editProp",
                  "default": "\"editMode\""
                }
              ]
            },
            {
              "kind": "method",
              "name": "unsetSlotEditMode",
              "parameters": [
                {
                  "name": "node",
                  "description": "node that could be a grid",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "removes edit mode from grid by reverting to properties saved before editing"
            },
            {
              "kind": "method",
              "name": "setSlotEditMode",
              "parameters": [
                {
                  "name": "node",
                  "description": "node that could be a grid",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "settings"
                },
                {
                  "name": "focusTarget"
                }
              ],
              "description": "saves grid settings before applying edit mode settings"
            },
            {
              "kind": "method",
              "name": "_activeNodeChanged",
              "parameters": [
                {
                  "name": "newValue"
                },
                {
                  "name": "oldValue"
                }
              ],
              "description": "React to a new node being set to active."
            },
            {
              "kind": "method",
              "name": "_getPosition",
              "parameters": [
                {
                  "name": "element"
                }
              ],
              "description": "Get position from top and left of the page based on position:relative; being\nset in a parent."
            },
            {
              "kind": "method",
              "name": "_showContextMenu",
              "parameters": [
                {
                  "name": "menu"
                }
              ],
              "description": "Handle display and position of the context menu"
            },
            {
              "kind": "method",
              "name": "_getContextContainer",
              "parameters": [
                {
                  "name": "el"
                }
              ],
              "description": "gets context container"
            },
            {
              "kind": "method",
              "name": "_hideContextMenu",
              "parameters": [
                {
                  "name": "menu"
                }
              ],
              "description": "Simple hide / reset of whatever menu it's handed."
            },
            {
              "kind": "method",
              "name": "_tabKeyPressed",
              "description": "Find the next thing to tab forward to."
            },
            {
              "kind": "method",
              "name": "_tabBackKeyPressed",
              "description": "Move back through things when tab back pressed"
            },
            {
              "kind": "field",
              "name": "_useristyping",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "_useristyping"
            },
            {
              "kind": "field",
              "name": "__ignoreActive",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__dragMoving",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "___moveLock",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "viewSourceToggle",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Is active node in view source mode?",
              "default": "false",
              "attribute": "viewSourceToggle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "editMode",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "State of if we are editing or not.",
              "default": "false",
              "attribute": "edit-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "haxMover",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hax-mover",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeNode",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "A reference to the active node in the slot.",
              "default": "null",
              "attribute": "activeNode"
            },
            {
              "kind": "field",
              "name": "__lockIconPath"
            },
            {
              "kind": "field",
              "name": "part",
              "type": {
                "text": "string"
              },
              "default": "\"hax-body\""
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ addContent: \"Add Content\", }"
            },
            {
              "kind": "field",
              "name": "timesClickedArrowDown",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "timesClickedArrowUp",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "polyfillSafe"
            },
            {
              "kind": "field",
              "name": "elementAlign",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "element align",
              "attribute": "element-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trayDetail",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "is hax tray collapsed, side-panel, or full-panel",
              "attribute": "tray-detail",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trayStatus",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "is hax tray collapsed, side-panel, or full-panel",
              "attribute": "tray-status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "canMoveElement",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "activeNode can be moved",
              "attribute": "canMoveElement"
            }
          ],
          "events": [
            {
              "name": "hax-register-body",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "place-holder-file-drop",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-drop-focus-event",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "_useristyping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "_useristyping"
            },
            {
              "name": "hax-mover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "haxMover"
            },
            {
              "name": "edit-mode",
              "type": {
                "text": "boolean"
              },
              "description": "State of if we are editing or not.",
              "default": "false",
              "fieldName": "editMode"
            },
            {
              "name": "element-align",
              "type": {
                "text": "string"
              },
              "description": "element align",
              "fieldName": "elementAlign"
            },
            {
              "name": "tray-detail",
              "type": {
                "text": "string"
              },
              "description": "is hax tray collapsed, side-panel, or full-panel",
              "fieldName": "trayDetail"
            },
            {
              "name": "tray-status",
              "type": {
                "text": "string"
              },
              "description": "is hax tray collapsed, side-panel, or full-panel",
              "fieldName": "trayStatus"
            },
            {
              "name": "activeNode",
              "type": {
                "text": "null"
              },
              "description": "A reference to the active node in the slot.",
              "default": "null",
              "fieldName": "activeNode"
            },
            {
              "name": "canMoveElement",
              "type": {
                "text": "boolean"
              },
              "description": "activeNode can be moved",
              "fieldName": "canMoveElement"
            },
            {
              "name": "viewSourceToggle",
              "type": {
                "text": "boolean"
              },
              "description": "Is active node in view source mode?",
              "default": "false",
              "fieldName": "viewSourceToggle"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "UndoManagerBehaviors",
              "package": "@haxtheweb/undo-manager/undo-manager.js"
            }
          ],
          "superclass": {
            "name": "SimpleColors",
            "package": "@haxtheweb/simple-colors/simple-colors.js"
          },
          "tagName": "hax-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxBody",
            "module": "hax-body.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxBody",
          "declaration": {
            "name": "HaxBody",
            "module": "hax-body.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-app-picker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-app-picker`\n`app pop over + picker with options`",
          "name": "HaxAppPicker",
          "members": [
            {
              "kind": "method",
              "name": "modalToggle",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "a bit hacky but gets around the cloning element and events issue"
            },
            {
              "kind": "method",
              "name": "presentOptions",
              "parameters": [
                {
                  "name": "elements"
                },
                {
                  "name": "type",
                  "default": "\"element\""
                },
                {
                  "name": "title",
                  "default": "\"Select an option\""
                },
                {
                  "name": "pickerType",
                  "default": "\"gizmo\""
                },
                {
                  "name": "target",
                  "default": "window"
                }
              ],
              "description": "Bridge since everything calls here"
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "windowControllers",
              "default": "new AbortController()"
            },
            {
              "kind": "field",
              "name": "title",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Title for the dialog",
              "default": "\"Select an option\"",
              "attribute": "title"
            }
          ],
          "events": [
            {
              "name": "hax-register-core-piece",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Title for the dialog",
              "default": "\"Select an option\"",
              "fieldName": "title"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxAppPicker",
            "module": "lib/hax-app-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxAppPicker",
          "declaration": {
            "name": "HaxAppPicker",
            "module": "lib/hax-app-picker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-app-search.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-app-search`\n`An element that brokers the visual display of a listing of material from an end point. The goal is to normalize data from some location which is media centric. This expects to get at least enough data in order to form a grid of items which are selectable. It's also generically implemented so that anything can be hooked up as a potential source for input (example: youtube API or custom in-house solution). The goal is to return enough info via fired event so that we can tell hax-body that the user selected a tag, properties, slot combination so that hax-body can turn the selection into a custom element / element injected into the hax-body slot.`",
          "name": "HaxAppSearch",
          "members": [
            {
              "kind": "method",
              "name": "loadAppData",
              "description": "generate appstore query"
            },
            {
              "kind": "method",
              "name": "requestUrl",
              "parameters": [
                {
                  "name": "url",
                  "default": "\"\""
                },
                {
                  "name": "params",
                  "default": "{}"
                }
              ]
            },
            {
              "kind": "method",
              "name": "queryStringData",
              "parameters": [
                {
                  "name": "params"
                }
              ],
              "description": "from queryString but without encoding param"
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateSearchValues",
              "parameters": [
                {
                  "name": "values"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_resetAppSearch",
              "parameters": [
                {
                  "name": "newValue"
                }
              ],
              "description": "Active app has changed."
            },
            {
              "kind": "method",
              "name": "_requestDataChanged",
              "parameters": [
                {
                  "name": "newValue"
                }
              ],
              "description": "Callback for when media has been updated via the end point"
            },
            {
              "kind": "method",
              "name": "_resolveObjectPath",
              "parameters": [
                {
                  "name": "path"
                },
                {
                  "name": "obj"
                }
              ],
              "description": "Helper to take a multi-dimensional object and convert\nit's reference into the real value. This allows for variable input defined\nin a string to actually hit the deeper part of an object structure."
            },
            {
              "kind": "field",
              "name": "auto",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Immediatley perform a request.",
              "default": "false",
              "attribute": "auto"
            },
            {
              "kind": "field",
              "name": "headers",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Custom headers for data binding from the App feed.",
              "default": "{}",
              "attribute": "headers"
            },
            {
              "kind": "field",
              "name": "method",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Custom method for requesting data (almost always will be GET)",
              "default": "\"GET\"",
              "attribute": "method"
            },
            {
              "kind": "field",
              "name": "loading",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "loading",
              "default": "false",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "requestData",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Media request data updated",
              "default": "{}",
              "attribute": "requestData"
            },
            {
              "kind": "field",
              "name": "media",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Media object, normalized.",
              "default": "[]",
              "attribute": "media"
            },
            {
              "kind": "field",
              "name": "resultMap",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "attribute": "resultMap"
            },
            {
              "kind": "field",
              "name": "appSearch",
              "default": "this"
            },
            {
              "kind": "field",
              "name": "activeApp",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Active app globally bound based on previous selection.",
              "attribute": "activeApp"
            },
            {
              "kind": "field",
              "name": "tos",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Terms of service object",
              "attribute": "tos"
            },
            {
              "kind": "field",
              "name": "searchSchema",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Search schema for presenting a form of input.",
              "attribute": "searchSchema"
            },
            {
              "kind": "field",
              "name": "requestEndPoint",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "requestEndPoint"
            },
            {
              "kind": "field",
              "name": "requestParams",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "requestParams"
            }
          ],
          "attributes": [
            {
              "name": "activeApp",
              "type": {
                "text": "object"
              },
              "description": "Active app globally bound based on previous selection.",
              "fieldName": "activeApp"
            },
            {
              "name": "tos",
              "type": {
                "text": "array"
              },
              "description": "Terms of service object",
              "fieldName": "tos"
            },
            {
              "name": "auto",
              "type": {
                "text": "boolean"
              },
              "description": "Immediatley perform a request.",
              "default": "false",
              "fieldName": "auto"
            },
            {
              "name": "searchSchema",
              "type": {
                "text": "object"
              },
              "description": "Search schema for presenting a form of input.",
              "fieldName": "searchSchema"
            },
            {
              "name": "headers",
              "type": {
                "text": "object"
              },
              "description": "Custom headers for data binding from the App feed.",
              "default": "{}",
              "fieldName": "headers"
            },
            {
              "name": "method",
              "type": {
                "text": "string"
              },
              "description": "Custom method for requesting data (almost always will be GET)",
              "default": "\"GET\"",
              "fieldName": "method"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "description": "loading",
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "requestData",
              "type": {
                "text": "object"
              },
              "description": "Media request data updated",
              "default": "{}",
              "fieldName": "requestData"
            },
            {
              "name": "media",
              "type": {
                "text": "array"
              },
              "description": "Media object, normalized.",
              "default": "[]",
              "fieldName": "media"
            },
            {
              "name": "requestEndPoint",
              "type": {
                "text": "string"
              },
              "fieldName": "requestEndPoint"
            },
            {
              "name": "requestParams",
              "type": {
                "text": "object"
              },
              "fieldName": "requestParams"
            },
            {
              "name": "resultMap",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "fieldName": "resultMap"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-app-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxAppSearch",
            "module": "lib/hax-app-search.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxAppSearch",
          "declaration": {
            "name": "HaxAppSearch",
            "module": "lib/hax-app-search.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-app.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-app`\nAn app registered with HAX. This provides all the information needed for HAX\nto understand how to talk to this backend as well as represent it in listings.\nIt also expresses how to take that data and wire it up to gizmos making it able to\nutilize multiple display methods.",
          "name": "HAXApp",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventName",
              "type": {
                "text": "string"
              },
              "default": "\"hax-register-app\""
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "hax-app",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "`hax-stax`\nRegister a stax with HAX store.",
          "name": "HAXStax",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HAXApp",
                "module": "lib/hax-app.js"
              }
            },
            {
              "kind": "field",
              "name": "eventName",
              "type": {
                "text": "string"
              },
              "default": "\"hax-register-stax\"",
              "inheritedFrom": {
                "name": "HAXApp",
                "module": "lib/hax-app.js"
              }
            }
          ],
          "superclass": {
            "name": "HAXApp",
            "module": "lib/hax-app.js"
          },
          "tagName": "hax-stax",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "HAXApp",
                "module": "lib/hax-app.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HAXApp",
            "module": "lib/hax-app.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HAXStax",
            "module": "lib/hax-app.js"
          }
        },
        {
          "kind": "js",
          "name": "HAXApp",
          "declaration": {
            "name": "HAXApp",
            "module": "lib/hax-app.js"
          }
        },
        {
          "kind": "js",
          "name": "HAXStax",
          "declaration": {
            "name": "HAXStax",
            "module": "lib/hax-app.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-autoloader.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-autoloader`",
          "name": "HaxAutoloader",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "processNewElements",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Process new elements"
            },
            {
              "kind": "method",
              "name": "guessHaxWiring",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            },
            {
              "kind": "field",
              "name": "processedList",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "List of elements processed so we don't double process",
              "default": "{}",
              "attribute": "processedList"
            }
          ],
          "events": [
            {
              "name": "hax-register-core-piece",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "processedList",
              "type": {
                "text": "object"
              },
              "description": "List of elements processed so we don't double process",
              "default": "{}",
              "fieldName": "processedList"
            }
          ],
          "mixins": [
            {
              "name": "HAXElement",
              "package": "@haxtheweb/hax-body-behaviors/hax-body-behaviors.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-autoloader",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxAutoloader",
            "module": "lib/hax-autoloader.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxAutoloader",
          "declaration": {
            "name": "HaxAutoloader",
            "module": "lib/hax-autoloader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-cancel-dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-cancel-dialog`",
          "name": "HaxCancelDialog",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ cancelTitle: \"Confirm Cancel\", cancelWithoutSaving: \"Any changes since your last save will be lost. Cancel anyway?\", cancelYes: \"Yes\", cancelNo: \"No\", }"
            }
          ],
          "events": [
            {
              "name": "hax-register-core-piece",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-cancel-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxCancelDialog",
            "module": "lib/hax-cancel-dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxCancelDialog",
          "declaration": {
            "name": "HaxCancelDialog",
            "module": "lib/hax-cancel-dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-context-behaviors.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "HaxContextBehaviors",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "LitElement constructable styles enhancement",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slotSchema",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "layoutElement",
              "description": "closest layout element, self or parent",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "layoutParent",
              "description": "if layout element is itself a slot, get its layout element",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slottedItems",
              "description": "gets slotted items of closest layout element",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "elementIcon",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its icon from HAX properties gizmo",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "elementLabel",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its label from HAX properties gizmo",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "elementGizmo",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its gizmo data from HAX properties",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "getFilteredBlocks",
              "parameters": [
                {
                  "name": "blocks",
                  "default": "[]"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setTarget",
              "parameters": [
                {
                  "name": "node",
                  "default": "this.activeNode"
                }
              ]
            },
            {
              "kind": "field",
              "name": "viewSource",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "viewSource"
            },
            {
              "kind": "field",
              "name": "activeNode",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "activeNode"
            },
            {
              "kind": "field",
              "name": "parentSchema",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "parentSchema"
            },
            {
              "kind": "field",
              "name": "realSelectedValue",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "realSelectedValue"
            },
            {
              "kind": "field",
              "name": "sourceView",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "sourceView"
            }
          ],
          "attributes": [
            {
              "name": "activeNode",
              "type": {
                "text": "object"
              },
              "fieldName": "activeNode"
            },
            {
              "name": "parentSchema",
              "type": {
                "text": "object"
              },
              "fieldName": "parentSchema"
            },
            {
              "name": "realSelectedValue",
              "type": {
                "text": "string"
              },
              "fieldName": "realSelectedValue"
            },
            {
              "name": "sourceView",
              "type": {
                "text": "boolean"
              },
              "fieldName": "sourceView"
            },
            {
              "name": "viewSource",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "viewSource"
            }
          ],
          "mixins": [
            {
              "name": "SimpleTourFinder",
              "package": "@haxtheweb/simple-popover/lib/SimpleTourFinder.js"
            }
          ],
          "parameters": [
            {
              "name": "SuperClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HaxContextBehaviors",
          "declaration": {
            "name": "HaxContextBehaviors",
            "module": "lib/hax-context-behaviors.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-context-item-textop.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-context-item-textop`",
          "name": "HaxContextItemTextop",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeys",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Fire an event that includes the eventName of what was just pressed.",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleMousedown",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Store the selection object. This helps fix issues with safari\nand holding focus on non-text elements actually stealing\nthe selection priority, making it impossible to know what's\nbeen selected if clicking a button to try and apply something to.",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "action",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "action"
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "attribute": "event-name",
              "reflects": true,
              "default": "\"button\"",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "inputMethod",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Method of input to display when activated. This is\nonly used when triggered as part of haxProperties",
              "default": "null",
              "attribute": "input-method",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "propertyToBind",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "attribute": "property-to-bind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slotToBind",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "attribute": "slot-to-bind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "an optional value to send along in the press. Allows for\nreusing events more easily",
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "description",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Optional description for this item.",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "buttonTemplate",
              "description": "template for button, based on whether or not the button toggles",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonThemeStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonCoreStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonLayoutStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "danger",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "attribute": "danger",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "feature",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "attribute": "feature",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "toggledTooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "events": [
            {
              "name": "hax-context-item-selected",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "an optional value to send along in the press. Allows for\nreusing events more easily",
              "default": "\"\"",
              "fieldName": "value"
            },
            {
              "name": "action",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "action"
            },
            {
              "name": "event-name",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "fieldName": "eventName",
              "default": "\"button\"",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "input-method",
              "type": {
                "text": "null"
              },
              "description": "Method of input to display when activated. This is\nonly used when triggered as part of haxProperties",
              "default": "null",
              "fieldName": "inputMethod"
            },
            {
              "name": "property-to-bind",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "fieldName": "propertyToBind"
            },
            {
              "name": "slot-to-bind",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "fieldName": "slotToBind"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "Optional description for this item.",
              "fieldName": "description"
            },
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "fieldName": "danger",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "feature",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "fieldName": "feature",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "toggledTooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "HaxToolbarItemBehaviors",
              "package": "@haxtheweb/hax-body/lib/hax-toolbar-item.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-context-item-textop",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxContextItemTextop",
            "module": "lib/hax-context-item-textop.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxContextItemTextop",
          "declaration": {
            "name": "HaxContextItemTextop",
            "module": "lib/hax-context-item-textop.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-context-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-context-item`\nA single button in the hax context menu for consistency.",
          "name": "HaxContextItem",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleMousedown",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Store the selection object. This helps fix issues with safari\nand holding focus on non-text elements actually stealing\nthe selection priority, making it impossible to know what's\nbeen selected if clicking a button to try and apply something to.",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Fire an event that includes the eventName of what was just pressed.",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "haxUIElement",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "action",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "action"
            },
            {
              "kind": "field",
              "name": "more",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "more implies there's an action after pressing the button\nso it'll put a visual indicator as such",
              "default": "false",
              "attribute": "more"
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "attribute": "event-name",
              "reflects": true,
              "default": "\"button\"",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "inputMethod",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Method of input to display when activated. This is\nonly used when triggered as part of haxProperties",
              "default": "null",
              "attribute": "input-method",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "propertyToBind",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "attribute": "property-to-bind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slotToBind",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "attribute": "slot-to-bind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "an optional value to send along in the press. Allows for\nreusing events more easily",
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Label for the button.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Optional description for this item.",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "default",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Is this button concidered a primary interaction",
              "attribute": "default"
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "buttonTemplate",
              "description": "template for button, based on whether or not the button toggles",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonThemeStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonCoreStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonLayoutStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeys",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "danger",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "attribute": "danger",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "feature",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "attribute": "feature",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "toggledTooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "events": [
            {
              "name": "hax-context-item-selected",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "more",
              "type": {
                "text": "boolean"
              },
              "description": "more implies there's an action after pressing the button\nso it'll put a visual indicator as such",
              "default": "false",
              "fieldName": "more"
            },
            {
              "name": "action",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "action"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label for the button.",
              "fieldName": "label"
            },
            {
              "name": "input-method",
              "type": {
                "text": "null"
              },
              "description": "Method of input to display when activated. This is\nonly used when triggered as part of haxProperties",
              "default": "null",
              "fieldName": "inputMethod"
            },
            {
              "name": "property-to-bind",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "fieldName": "propertyToBind"
            },
            {
              "name": "slot-to-bind",
              "type": {
                "text": "null"
              },
              "description": "Optional slot to bind this value to.",
              "default": "null",
              "fieldName": "slotToBind"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "Optional description for this item.",
              "fieldName": "description"
            },
            {
              "name": "default",
              "type": {
                "text": "boolean"
              },
              "description": "Is this button concidered a primary interaction",
              "fieldName": "default"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "an optional value to send along in the press. Allows for\nreusing events more easily",
              "default": "\"\"",
              "fieldName": "value"
            },
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "fieldName": "danger",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "event-name",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "fieldName": "eventName",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "feature",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "fieldName": "feature",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "toggledTooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "HaxToolbarItemBehaviors",
              "package": "@haxtheweb/hax-body/lib/hax-toolbar-item.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-context-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxContextItem",
            "module": "lib/hax-context-item.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxContextItem",
          "declaration": {
            "name": "HaxContextItem",
            "module": "lib/hax-context-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-element-demo.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HaxElementDemo",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "renderTag",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "default": "null",
              "attribute": "render-tag"
            },
            {
              "kind": "field",
              "name": "activePickerSchema",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "active-picker-schema"
            }
          ],
          "attributes": [
            {
              "name": "render-tag",
              "type": {
                "text": "null"
              },
              "default": "null",
              "fieldName": "renderTag"
            },
            {
              "name": "active-picker-schema",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "activePickerSchema"
            }
          ],
          "mixins": [
            {
              "name": "IntersectionObserverMixin",
              "package": "@haxtheweb/intersection-element/lib/IntersectionObserverMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HaxElementDemo",
          "declaration": {
            "name": "HaxElementDemo",
            "module": "lib/hax-element-demo.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxElementDemo",
            "module": "lib/hax-element-demo.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-export-dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-export-dialog`",
          "name": "HaxExportDialog",
          "members": [
            {
              "kind": "method",
              "name": "modalToggle",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "a bit hacky but gets around the cloning element and events issue"
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "windowControllers",
              "default": "new AbortController()"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ viewPageSource: \"View Page Source\", }"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-export-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxExportDialog",
            "module": "lib/hax-export-dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxExportDialog",
          "declaration": {
            "name": "HaxExportDialog",
            "module": "lib/hax-export-dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-gizmo-browser.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HaxGizmoBrowser",
          "members": [
            {
              "kind": "method",
              "name": "closePopover"
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_hoverForPreviewChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dragStart",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Drag start so we know what target to set"
            },
            {
              "kind": "method",
              "name": "inputfilterChanged",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "expandAll"
            },
            {
              "kind": "method",
              "name": "collapseAll"
            },
            {
              "kind": "method",
              "name": "ucfirst",
              "parameters": [
                {
                  "name": "str"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateCategories",
              "parameters": [
                {
                  "name": "list"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_initializePopularBlocks",
              "description": "Initialize the list of popular blocks with the top 9 most used elements"
            },
            {
              "kind": "method",
              "name": "resetList",
              "parameters": [
                {
                  "name": "list"
                }
              ],
              "description": "Reset this browser."
            },
            {
              "kind": "field",
              "name": "activePreview",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "default": "null",
              "attribute": "activePreview"
            },
            {
              "kind": "field",
              "name": "daemonKeyCombo",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "categories",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "categories"
            },
            {
              "kind": "field",
              "name": "like",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "where",
              "type": {
                "text": "string"
              },
              "default": "\"index\""
            },
            {
              "kind": "field",
              "name": "recentGizmoList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "recentGizmoList"
            },
            {
              "kind": "field",
              "name": "popularGizmoList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "popularGizmoList"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ filterContentTypes: \"Filter Content Types\", recent: \"Recent\", popular: \"Popular\", }"
            },
            {
              "kind": "field",
              "name": "hidden",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "hidden",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "categories",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "categories"
            },
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "fieldName": "hidden"
            },
            {
              "name": "recentGizmoList",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "recentGizmoList"
            },
            {
              "name": "popularGizmoList",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "popularGizmoList"
            },
            {
              "name": "activePreview",
              "type": {
                "text": "null"
              },
              "default": "null",
              "fieldName": "activePreview"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "SimpleFilterMixin",
              "package": "@haxtheweb/simple-filter/simple-filter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxGizmoBrowser",
            "module": "lib/hax-gizmo-browser.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxGizmoBrowser",
          "declaration": {
            "name": "HaxGizmoBrowser",
            "module": "lib/hax-gizmo-browser.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-map.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-map`",
          "name": "HaxMap",
          "members": [
            {
              "kind": "method",
              "name": "updateHAXMap",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "calcStats",
              "parameters": [
                {
                  "name": "elements"
                }
              ],
              "description": "Calculate statistics from the array of hax elements"
            },
            {
              "kind": "method",
              "name": "editItem",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isLocked",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemOp",
              "parameters": [
                {
                  "name": "index"
                },
                {
                  "name": "action"
                }
              ]
            },
            {
              "kind": "method",
              "name": "indentedElements",
              "parameters": [
                {
                  "name": "elementList"
                }
              ]
            },
            {
              "kind": "method",
              "name": "goToItem",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollInMap"
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "elementList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "elementList"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ contentStatistics: \"Content Statistics\", words: \"Words\", headings: \"Headings\", paragraphs: \"Paragraphs\", widgets: \"Widgets\", characters: \"Characters\", listView: \"List view\", }"
            },
            {
              "kind": "field",
              "name": "opened",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Title when open.",
              "attribute": "opened"
            },
            {
              "kind": "field",
              "name": "hidden",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "hidden",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cCount",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "cCount"
            },
            {
              "kind": "field",
              "name": "wCount",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "wCount"
            },
            {
              "kind": "field",
              "name": "bCount",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "bCount"
            },
            {
              "kind": "field",
              "name": "hCount",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "hCount"
            },
            {
              "kind": "field",
              "name": "pCount",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "pCount"
            },
            {
              "kind": "field",
              "name": "eCount",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "eCount"
            },
            {
              "kind": "field",
              "name": "activeNode",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "activeNode"
            }
          ],
          "events": [
            {
              "name": "hax-context-item-selected",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "description": "Title when open.",
              "fieldName": "opened"
            },
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "fieldName": "hidden"
            },
            {
              "name": "elementList",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "elementList"
            },
            {
              "name": "cCount",
              "type": {
                "text": "string"
              },
              "fieldName": "cCount"
            },
            {
              "name": "wCount",
              "type": {
                "text": "string"
              },
              "fieldName": "wCount"
            },
            {
              "name": "bCount",
              "type": {
                "text": "string"
              },
              "fieldName": "bCount"
            },
            {
              "name": "hCount",
              "type": {
                "text": "string"
              },
              "fieldName": "hCount"
            },
            {
              "name": "pCount",
              "type": {
                "text": "string"
              },
              "fieldName": "pCount"
            },
            {
              "name": "eCount",
              "type": {
                "text": "string"
              },
              "fieldName": "eCount"
            },
            {
              "name": "activeNode",
              "type": {
                "text": "object"
              },
              "fieldName": "activeNode"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            }
          ],
          "superclass": {
            "name": "SimpleColors",
            "package": "@haxtheweb/simple-colors/simple-colors.js"
          },
          "tagName": "hax-map",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxMap",
            "module": "lib/hax-map.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxMap",
          "declaration": {
            "name": "HaxMap",
            "module": "lib/hax-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-picker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-picker`\nA picker for selecting an item from a list of apps / hax gizmos which require\na decision to be made. This is used when multiple things match either on upload\nin the add operation of the app or in the gizmo selection to render through,\nsuch as having multiple ways of presenting an image.",
          "name": "HaxPicker",
          "members": [
            {
              "kind": "method",
              "name": "_hoverForPreviewChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "buildOptions",
              "parameters": [
                {
                  "name": "elements"
                },
                {
                  "name": "type",
                  "default": "\"element\""
                },
                {
                  "name": "title",
                  "default": "\"Select an option\""
                },
                {
                  "name": "pickerType",
                  "default": "\"gizmo\""
                },
                {
                  "description": "elements  a list of elements for presenting to the user\nto select between.",
                  "name": "array",
                  "optional": true
                }
              ],
              "description": "Present options to the user with a modal and selection method that\nshifts itself to be above everything (stack order)"
            },
            {
              "kind": "method",
              "name": "_handleFilters",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isFiltered",
              "parameters": [
                {
                  "name": "keywords"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selected",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Handle the user selecting an app."
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "field",
              "name": "_elements",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "raw element set",
              "default": "[]",
              "attribute": "_elements"
            },
            {
              "kind": "field",
              "name": "selectionList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Refactored list for selection purposes",
              "default": "[]",
              "attribute": "selectionList"
            },
            {
              "kind": "field",
              "name": "activePreview",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "default": "null",
              "attribute": "activePreview"
            },
            {
              "kind": "field",
              "name": "pickerType",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Allow multiple uses",
              "default": "\"gizmo\"",
              "attribute": "picker-type"
            },
            {
              "kind": "field",
              "name": "keywords",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "keywords"
            },
            {
              "kind": "field",
              "name": "filters",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "attribute": "filters"
            },
            {
              "kind": "field",
              "name": "filterOn",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "filter-on",
              "reflects": true
            }
          ],
          "events": [
            {
              "name": "hax-insert-content",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-app-picker-selection",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "_elements",
              "type": {
                "text": "array"
              },
              "description": "raw element set",
              "default": "[]",
              "fieldName": "_elements"
            },
            {
              "name": "activePreview",
              "type": {
                "text": "null"
              },
              "default": "null",
              "fieldName": "activePreview"
            },
            {
              "name": "keywords",
              "type": {
                "text": "object"
              },
              "fieldName": "keywords"
            },
            {
              "name": "selectionList",
              "type": {
                "text": "array"
              },
              "description": "Refactored list for selection purposes",
              "default": "[]",
              "fieldName": "selectionList"
            },
            {
              "name": "picker-type",
              "type": {
                "text": "string"
              },
              "description": "Allow multiple uses",
              "default": "\"gizmo\"",
              "fieldName": "pickerType"
            },
            {
              "name": "filters",
              "type": {
                "text": "array"
              },
              "fieldName": "filters"
            },
            {
              "name": "filter-on",
              "type": {
                "text": "boolean"
              },
              "fieldName": "filterOn"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxPicker",
            "module": "lib/hax-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxPicker",
          "declaration": {
            "name": "HaxPicker",
            "module": "lib/hax-picker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-plate-context.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-plate-context`\n`A context menu that provides common grid plate based authoring options.`",
          "name": "HaxPlateContext",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "filteredBlocks",
              "description": "get a list of valid blocks for active node\n(if active node is a slot, some blockes may not be permitted)",
              "readonly": true,
              "return": {
                "type": {
                  "text": "array"
                }
              }
            },
            {
              "kind": "method",
              "name": "__updatePlatePosition",
              "parameters": [
                {
                  "name": "active"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__dblClickFireInsert",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCECustomEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dragEnd",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "When we end dragging ensure we remove the mover class."
            },
            {
              "kind": "method",
              "name": "_dragStart",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Drag start so we know what target to set"
            },
            {
              "kind": "method",
              "name": "_resetCEMenu",
              "description": "HAX properties changed, update buttons available."
            },
            {
              "kind": "field",
              "name": "disableOps",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disableOps"
            },
            {
              "kind": "field",
              "name": "disableItemOps",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disableItemOps"
            },
            {
              "kind": "field",
              "name": "insertAbove",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "insertAbove"
            },
            {
              "kind": "field",
              "name": "disableDuplicate",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disableDuplicate"
            },
            {
              "kind": "field",
              "name": "hasActiveEditingElement",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hasActiveEditingElement"
            },
            {
              "kind": "field",
              "name": "haxUIElement",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ edit: \"Edit\", dragHandle: \"Drag handle\", moveUp: \"Move up\", moveDown: \"Move down\", addColumn: \"Add column\", removeColumn: \"Remove column\", remove: \"Remove\", duplicate: \"Duplicate\", confirmDelete: \"Confirm delete\", changeTo: \"Change to\", editElement: \"Edit Mode\", modifyHTMLSource: \"Modify HTML source\", regions: \"Available regions\", insertItemAbove: \"Insert item above\", insertItemAboveOrBelow: \"Insert item above or below\", insertItemBelow: \"Insert item below\", selectLayout: \"Select Layout Element\", }"
            },
            {
              "kind": "field",
              "name": "ceButtons",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "ceButtons"
            },
            {
              "kind": "field",
              "name": "activeTagName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "activeTagName"
            },
            {
              "kind": "field",
              "name": "activeTagIcon",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"hax:paragraph\"",
              "attribute": "activeTagIcon"
            },
            {
              "kind": "field",
              "name": "activeSchema",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "activeSchema"
            },
            {
              "kind": "field",
              "name": "editElementProperty",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "editElementProperty"
            },
            {
              "kind": "field",
              "name": "editElementToggled",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "editElementToggled"
            },
            {
              "kind": "field",
              "name": "canMoveElement",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "canMoveElement"
            },
            {
              "kind": "field",
              "name": "onScreen",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "on-screen",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sourceView",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "sourceView",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "LitElement constructable styles enhancement",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "slotSchema",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "layoutElement",
              "description": "closest layout element, self or parent",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "layoutParent",
              "description": "if layout element is itself a slot, get its layout element",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "slottedItems",
              "description": "gets slotted items of closest layout element",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "elementIcon",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its icon from HAX properties gizmo",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "elementLabel",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its label from HAX properties gizmo",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "elementGizmo",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its gizmo data from HAX properties",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "getFilteredBlocks",
              "parameters": [
                {
                  "name": "blocks",
                  "default": "[]"
                }
              ],
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "setTarget",
              "parameters": [
                {
                  "name": "node",
                  "default": "this.activeNode"
                }
              ],
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "viewSource",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "viewSource",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "activeNode",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "activeNode",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "parentSchema",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "parentSchema",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "realSelectedValue",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "realSelectedValue",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            }
          ],
          "events": [
            {
              "name": "hax-context-item-selected",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "activeTagIcon",
              "type": {
                "text": "string"
              },
              "default": "\"hax:paragraph\"",
              "fieldName": "activeTagIcon"
            },
            {
              "name": "activeSchema",
              "type": {
                "text": "object"
              },
              "fieldName": "activeSchema"
            },
            {
              "name": "editElementProperty",
              "type": {
                "text": "string"
              },
              "fieldName": "editElementProperty"
            },
            {
              "name": "editElementToggled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "editElementToggled"
            },
            {
              "name": "activeTagName",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "activeTagName"
            },
            {
              "name": "disableOps",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disableOps"
            },
            {
              "name": "disableItemOps",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disableItemOps"
            },
            {
              "name": "insertAbove",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "insertAbove"
            },
            {
              "name": "disableDuplicate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disableDuplicate"
            },
            {
              "name": "canMoveElement",
              "type": {
                "text": "boolean"
              },
              "fieldName": "canMoveElement"
            },
            {
              "name": "ceButtons",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "ceButtons"
            },
            {
              "name": "hasActiveEditingElement",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hasActiveEditingElement"
            },
            {
              "name": "on-screen",
              "type": {
                "text": "boolean"
              },
              "fieldName": "onScreen"
            },
            {
              "name": "sourceView",
              "type": {
                "text": "boolean"
              },
              "fieldName": "sourceView",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "activeNode",
              "type": {
                "text": "object"
              },
              "fieldName": "activeNode",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "parentSchema",
              "type": {
                "text": "object"
              },
              "fieldName": "parentSchema",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "realSelectedValue",
              "type": {
                "text": "string"
              },
              "fieldName": "realSelectedValue",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "viewSource",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "viewSource",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "HaxContextBehaviors",
              "module": "/lib/hax-context-behaviors.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxPlateContext",
            "module": "lib/hax-plate-context.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxPlateContext",
          "declaration": {
            "name": "HaxPlateContext",
            "module": "lib/hax-plate-context.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-preferences-dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-preferences-dialog`",
          "name": "HaxPreferencesDialog",
          "members": [
            {
              "kind": "method",
              "name": "updateSchema"
            },
            {
              "kind": "method",
              "name": "closeBtn",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "__valueChangedEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reloadPreferencesForm",
              "description": "force an update of settings"
            },
            {
              "kind": "field",
              "name": "hideLink",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Developer prop to hide the link",
              "default": "false",
              "attribute": "hideLink"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ learnAboutHAXTheWeb: \"Learn about HAXTheWeb\", haxUITheme: \"HAX UI Theme\", language: \"Language\", english: \"English\", spanish: \"Spanish\", }"
            },
            {
              "kind": "field",
              "name": "schema",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Schema that has all of inputs / manages state",
              "attribute": "schema"
            },
            {
              "kind": "field",
              "name": "globalPreferences",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Preferences managed for everything global about HAX.",
              "attribute": "globalPreferences"
            }
          ],
          "events": [
            {
              "name": "hax-tray-button-click",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "hideLink",
              "type": {
                "text": "boolean"
              },
              "description": "Developer prop to hide the link",
              "default": "false",
              "fieldName": "hideLink"
            },
            {
              "name": "schema",
              "type": {
                "text": "object"
              },
              "description": "Schema that has all of inputs / manages state",
              "fieldName": "schema"
            },
            {
              "name": "globalPreferences",
              "type": {
                "text": "object"
              },
              "description": "Preferences managed for everything global about HAX.",
              "fieldName": "globalPreferences"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-preferences-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxPreferencesDialog",
            "module": "lib/hax-preferences-dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxPreferencesDialog",
          "declaration": {
            "name": "HaxPreferencesDialog",
            "module": "lib/hax-preferences-dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-stax-browser.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-stax-browser`",
          "name": "HaxStaxBrowser",
          "members": [
            {
              "kind": "field",
              "name": "filteredStaxList",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "staxList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "The list of stax",
              "default": "[]",
              "attribute": "staxList"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"Templates\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "templateType",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Type of templates to filter by: 'area', 'page', or 'all'",
              "default": "\"area\"",
              "attribute": "template-type"
            }
          ],
          "attributes": [
            {
              "name": "staxList",
              "type": {
                "text": "array"
              },
              "description": "The list of stax",
              "default": "[]",
              "fieldName": "staxList"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"Templates\"",
              "fieldName": "label"
            },
            {
              "name": "template-type",
              "type": {
                "text": "string"
              },
              "description": "Type of templates to filter by: 'area', 'page', or 'all'",
              "default": "\"area\"",
              "fieldName": "templateType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-stax-browser",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxStaxBrowser",
            "module": "lib/hax-stax-browser.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxStaxBrowser",
          "declaration": {
            "name": "HaxStaxBrowser",
            "module": "lib/hax-stax-browser.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-store.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HaxStore",
          "members": [
            {
              "kind": "method",
              "name": "testHook",
              "parameters": [
                {
                  "name": "el"
                },
                {
                  "name": "op"
                }
              ],
              "description": "test a hook's existance in a target"
            },
            {
              "kind": "method",
              "name": "runHook",
              "parameters": [
                {
                  "name": "el"
                },
                {
                  "name": "op"
                },
                {
                  "name": "data",
                  "default": "[]"
                }
              ],
              "description": "run a hook in a target if it exists"
            },
            {
              "kind": "method",
              "name": "getSelection",
              "description": "Selection normalizer"
            },
            {
              "kind": "method",
              "name": "getRange",
              "description": "Get a normalized range based on current selection"
            },
            {
              "kind": "method",
              "name": "guessGizmo",
              "parameters": [
                {
                  "name": "guess"
                },
                {
                  "name": "values"
                },
                {
                  "name": "skipPropMatch",
                  "default": "false"
                },
                {
                  "name": "preferExclusive",
                  "default": "false"
                }
              ],
              "description": "Try and guess the Gizmo based on what we were just handed"
            },
            {
              "kind": "method",
              "name": "insertLogicFromValues",
              "parameters": [
                {
                  "name": "values"
                },
                {
                  "name": "context"
                },
                {
                  "name": "failOnAnything",
                  "default": "false"
                },
                {
                  "name": "linkOnMultiple",
                  "default": "false"
                }
              ],
              "description": "Simple workflow for logic from inserting based on\na series of criteria."
            },
            {
              "kind": "method",
              "name": "write",
              "parameters": [
                {
                  "name": "prop"
                },
                {
                  "name": "value"
                },
                {
                  "name": "obj"
                }
              ],
              "description": "write to the store and communicate to all pieces"
            },
            {
              "kind": "method",
              "name": "mimeTypeToGizmoType",
              "parameters": [
                {
                  "name": "mime"
                }
              ],
              "description": "Convert a data mime type to gizmo type for rendering"
            },
            {
              "kind": "method",
              "name": "guessGizmoType",
              "parameters": [
                {
                  "name": "guess"
                }
              ],
              "description": "Guess the type of Gizmo when given some information about what we have."
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "description": "convention",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "toast",
              "parameters": [
                {
                  "name": "message"
                },
                {
                  "name": "duration",
                  "default": "2000"
                },
                {
                  "name": "extras",
                  "default": "{}"
                },
                {
                  "name": "classStyle",
                  "default": "\"capsule\""
                },
                {
                  "name": "closeText",
                  "default": "this.t.close"
                },
                {
                  "name": "eventCallback",
                  "default": "null"
                },
                {
                  "name": "slot",
                  "default": "null"
                }
              ],
              "description": "Global toast bridge so we don't have to keep writing custom event"
            },
            {
              "kind": "method",
              "name": "_storageDataChanged",
              "parameters": [
                {
                  "name": "newValue"
                }
              ],
              "description": "Local storage data changed; callback to store this data in user storage"
            },
            {
              "kind": "method",
              "name": "isSingleSlotElement",
              "parameters": [
                {
                  "name": "node"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isTextElement",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "If this is a text node or not so we know if the inline context\noperations are valid."
            },
            {
              "kind": "method",
              "name": "isInlineElement",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "see if this is an inline element"
            },
            {
              "kind": "method",
              "name": "isGridPlateElement",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "test for being a valid grid plate, li is here because\nnested lists make this really complicated"
            },
            {
              "kind": "method",
              "name": "isLayoutElement",
              "parameters": [
                {
                  "name": "node",
                  "description": "custom element",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "test for being a valid layout based on `type: grid` in HAXProperties",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isLayoutSlot",
              "parameters": [
                {
                  "name": "node",
                  "description": "custom element",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "test for being a slot in a valid layout based on `type: grid` in parent's HAXProperties",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isOriginalGridPlate",
              "parameters": [
                {
                  "name": "node",
                  "description": "custom element",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "test for being thhe original <grid-plate> element",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "activeSchema",
              "description": "gets schema for activeNode",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "activeParentSchema",
              "description": "gets schema for activeNode's parent",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "slottedContentByNode",
              "parameters": [
                {
                  "name": "node",
                  "description": "ustom element with slots",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "provides metadata for slotted content of a given custom element",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "slotsSchemaFromNode",
              "parameters": [
                {
                  "name": "node",
                  "description": "custom element with slots",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "provides metadata for slotted content of a given custom element",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "schemaBySlotId",
              "parameters": [
                {
                  "name": "node",
                  "description": "custom element with slots",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "slotId",
                  "description": "unique id for slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "gets a single slot's schema",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_appStoreChanged",
              "parameters": [
                {
                  "name": "newValue"
                },
                {
                  "name": "oldValue"
                }
              ],
              "description": "Notice _appStore changed."
            },
            {
              "kind": "method",
              "name": "_loadAppStoreData",
              "parameters": [
                {
                  "name": "appDataResponse"
                }
              ],
              "description": "Load and attach items from the app store."
            },
            {
              "kind": "method",
              "name": "_handleDynamicImports",
              "parameters": [
                {
                  "name": "items"
                },
                {
                  "name": "haxAutoloader"
                }
              ],
              "description": "Handle all the dynamic imports of things told to autoload\nThis ensures we get the definitions quickly as far as\nwhat is a safe / valid tag above but then we import in a way\nthat allows us to correctly associate the hax schema to where\nit came from."
            },
            {
              "kind": "method",
              "name": "isExternalURLImport",
              "parameters": [
                {
                  "name": "string"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_editModeChanged",
              "parameters": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_globalPreferencesChanged",
              "parameters": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_haxConsentTap",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "This only send if they consented to storage of data locally"
            },
            {
              "kind": "method",
              "name": "_calculateActiveGizmo",
              "parameters": [
                {
                  "name": "activeNode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadAppStoreFromRemote",
              "description": "generate appstore query"
            },
            {
              "kind": "method",
              "name": "_storePiecesAllHere",
              "parameters": [
                {
                  "name": "haxAutoloader"
                },
                {
                  "name": "activeHaxBody"
                },
                {
                  "name": "haxTray"
                },
                {
                  "name": "haxCancel"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleConfirmCancel",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_positionCursorInNode",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "position",
                  "default": "0"
                }
              ],
              "description": "Position cursor at the start of the position of the requested node"
            },
            {
              "kind": "method",
              "name": "_onBeforeUnload",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Before the browser closes / changes paths, ask if they are sure they want to leave"
            },
            {
              "kind": "method",
              "name": "isBase64",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "description": "detect base64 object"
            },
            {
              "kind": "method",
              "name": "retrieveImageFromClipboardAsBlob",
              "parameters": [
                {
                  "name": "pasteEvent"
                },
                {
                  "name": "callback"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onCommand",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onPaste",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Intercept paste event and clean it up before inserting the contents"
            },
            {
              "kind": "method",
              "name": "__validGridTags"
            },
            {
              "kind": "method",
              "name": "__validTags"
            },
            {
              "kind": "method",
              "name": "__validGizmoTypes",
              "description": "Types that we deem as valid"
            },
            {
              "kind": "method",
              "name": "pushWithLimit",
              "parameters": [
                {
                  "name": "array"
                },
                {
                  "name": "element"
                },
                {
                  "name": "limit"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_insertTextResult",
              "parameters": [
                {
                  "name": "text"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_openExternalLink",
              "parameters": [
                {
                  "name": "link"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_haxStoreContribute",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "tags"
                },
                {
                  "name": "daemonTerm",
                  "default": "null"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getOperatingSystem",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_richTextEditorPromptOpen",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_richTextEditorPromptConfirm",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buildPrimitiveDefinitions",
              "description": "Build HAX property definitions for primitives that we support."
            },
            {
              "kind": "method",
              "name": "_haxStorePieceRegistrationManager",
              "parameters": [
                {
                  "name": "e",
                  "description": "an event that has the piece to register and the object",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "A standard event for registering the different pieces of HAX that check in\nat run time. This allows for additional flexibility down the road as well as\nregistering pieces we never thought of for custom environments.\nThis also ensures that there are object references in the central store\nbut that load at an unknown time during spin up."
            },
            {
              "kind": "method",
              "name": "setupEditableTable",
              "parameters": [
                {
                  "name": "editor"
                }
              ],
              "description": "set up the editableTable to behave as the node itself"
            },
            {
              "kind": "method",
              "name": "setupIframeLoader",
              "parameters": [
                {
                  "name": "editor"
                }
              ],
              "description": "set up the iframeLoader to behave as the node itself"
            },
            {
              "kind": "method",
              "name": "_haxStoreInsertContent",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Insert content in the body."
            },
            {
              "kind": "method",
              "name": "slotsFromSchema",
              "parameters": [
                {
                  "name": "schema",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "optionalOnly",
                  "default": "false",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "if given a schema, returns slots as array",
              "return": {
                "type": {
                  "text": "array"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getStyleGuideSchemaOverride",
              "parameters": [
                {
                  "name": "tag"
                }
              ],
              "description": "Check if style guide has schema overrides for a tag"
            },
            {
              "kind": "method",
              "name": "haxSchemaFromTag",
              "parameters": [
                {
                  "name": "tag"
                }
              ],
              "description": "get the schema from a tag"
            },
            {
              "kind": "method",
              "name": "_haxStoreInsertMultiple",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Optional send array, to improve performance and event bubbling better"
            },
            {
              "kind": "method",
              "name": "_haxStoreRegisterBody",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Set the activeHaxBody and add to the list so we know what to insert into."
            },
            {
              "kind": "method",
              "name": "_superDaemonInsert",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "computePolyfillSafe",
              "description": "Feature detect on the bar."
            },
            {
              "kind": "method",
              "name": "_haxStoreRegisterApp",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Notice that an app was set in HAX; register it"
            },
            {
              "kind": "method",
              "name": "_haxStoreRegisterStax",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Notice that a stax was set in HAX; register it"
            },
            {
              "kind": "method",
              "name": "activeBodyIgnoreActive",
              "parameters": [
                {
                  "name": "status"
                }
              ]
            },
            {
              "kind": "method",
              "name": "dashToCamel",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "description": "Helper to convert dash to camel; important when reading attributes."
            },
            {
              "kind": "method",
              "name": "htmlToHaxElements",
              "parameters": [
                {
                  "name": "html"
                }
              ],
              "description": "Convert HTML into HAX Elements; if its valid HTML"
            },
            {
              "kind": "method",
              "name": "_detectStyleGuideTemplates",
              "description": "Check if style guide content is available and detect page-template elements\nThis is called during app store loading to register any available templates"
            },
            {
              "kind": "method",
              "name": "forceAppStoreLoad",
              "description": "Force app store loading if it hasn't loaded yet\nThis can be called from external contexts like the style guide route"
            },
            {
              "kind": "method",
              "name": "detectAndRegisterPageTemplateStax",
              "parameters": [
                {
                  "name": "styleGuideContent",
                  "description": "The HTML content of the style guide",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Detect page-template elements from style guide content and register them as stax or demoSchema\nMulti-child templates become stax, single-child templates replace demoSchema for that element\nUses the same HAX schema conversion approach as the style guide system"
            },
            {
              "kind": "method",
              "name": "_updateElementDemoSchema",
              "parameters": [
                {
                  "name": "haxElement",
                  "description": "HAX element schema from page-template content",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Update the demoSchema for an element based on page-template content"
            },
            {
              "kind": "method",
              "name": "nodeToContent",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Convert a node to the correct content object for saving.\nThis DOES NOT acccept a HAXElement which is similar"
            },
            {
              "kind": "method",
              "name": "HTMLPrimativeTest",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Basic HTML Primitives test"
            },
            {
              "kind": "method",
              "name": "getHaxAppStoreTargets",
              "parameters": [
                {
                  "name": "type"
                }
              ],
              "description": "Filter app store apps to those that accept this file source."
            },
            {
              "kind": "method",
              "name": "refreshActiveNodeForm",
              "description": "refresh / rebuild the form based on active item"
            },
            {
              "kind": "method",
              "name": "haxElementPrototype",
              "parameters": [
                {
                  "name": "gizmo"
                },
                {
                  "name": "properties"
                },
                {
                  "name": "content",
                  "default": "\"\""
                }
              ],
              "description": "Generate Hax Element prototype."
            },
            {
              "kind": "method",
              "name": "getHAXSlot",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Slot content w/ support for custom elements in slot."
            },
            {
              "kind": "method",
              "name": "_haxStoreRegisterProperties",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Notice that a property off an element was set in HAX some place; register it here"
            },
            {
              "kind": "field",
              "name": "activeGizmo",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "activeNodeIndex",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "attemptGizmoTranslation",
              "parameters": [
                {
                  "name": "tag"
                },
                {
                  "name": "properties"
                }
              ]
            },
            {
              "kind": "field",
              "name": "toastShowEventName"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ close: \"Close\", }"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "\"hax:wizard-hat\""
            },
            {
              "kind": "field",
              "name": "allowedCallback"
            },
            {
              "kind": "field",
              "name": "primativeHooks",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "__dragTarget",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "appSearch",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "method",
              "type": {
                "text": "string"
              },
              "default": "\"GET\""
            },
            {
              "kind": "field",
              "name": "haxSelectedText",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "__winEvents",
              "type": {
                "text": "object"
              },
              "default": "{ \"hax-super-daemon-insert-tag\": \"_superDaemonInsert\", \"hax-register-properties\": \"_haxStoreRegisterProperties\", \"hax-consent-tap\": \"_haxConsentTap\", onbeforeunload: \"_onBeforeUnload\", paste: \"_onPaste\", command: \"_onCommand\", \"hax-register-app\": \"_haxStoreRegisterApp\", \"hax-register-stax\": \"_haxStoreRegisterStax\", \"hax-register-core-piece\": \"_haxStorePieceRegistrationManager\", \"hax-register-body\": \"_haxStoreRegisterBody\", \"hax-insert-content\": \"_haxStoreInsertContent\", \"hax-insert-content-array\": \"_haxStoreInsertMultiple\", \"hax-refresh-tray-form\": \"refreshActiveNodeForm\", \"rich-text-editor-prompt-open\": \"_richTextEditorPromptOpen\", \"rich-text-editor-prompt-confirm\": \"_richTextEditorPromptConfirm\", }"
            },
            {
              "kind": "field",
              "name": "onbeforeunload"
            },
            {
              "kind": "field",
              "name": "skipHAXConfirmation",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "skipHAXConfirmation",
              "default": "false",
              "attribute": "skip-hax-confirmation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "storageData",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Local storage bridge",
              "default": "{}",
              "attribute": "storageData"
            },
            {
              "kind": "field",
              "name": "appStore",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Possible appStore endpoint for loading in things dynamically.",
              "default": "{ url: \"\", params: {}, }",
              "attribute": "appStore"
            },
            {
              "kind": "field",
              "name": "daemonKeyCombo",
              "default": "`${SuperDaemonInstance.key1} + ${SuperDaemonInstance.key2} + `"
            },
            {
              "kind": "field",
              "name": "activeNode",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "activeEditingElement",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "haxBodies",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "A list of all haxBodies that exist",
              "default": "[]",
              "attribute": "haxBodies"
            },
            {
              "kind": "field",
              "name": "activePlaceHolder",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.",
              "default": "null",
              "attribute": "activePlaceHolder"
            },
            {
              "kind": "field",
              "name": "activePlaceHolderOperationType",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "default": "null",
              "attribute": "activePlaceHolderOperationType"
            },
            {
              "kind": "field",
              "name": "sessionObject",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Session object bridged in from a session method of some kind",
              "default": "{}",
              "attribute": "sessionObject"
            },
            {
              "kind": "field",
              "name": "editMode",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "skipExitTrap",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "skip the exit trap to prevent losing data",
              "default": "false",
              "attribute": "skipExitTrap"
            },
            {
              "kind": "field",
              "name": "appStoreLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "elementList",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Available elements keyed by tagName and with\ntheir haxProperties centrally registered.",
              "default": "{}",
              "attribute": "elementList"
            },
            {
              "kind": "field",
              "name": "elementAlign"
            },
            {
              "kind": "field",
              "name": "trayStatus",
              "type": {
                "text": "string"
              },
              "default": "\"collapsed\""
            },
            {
              "kind": "field",
              "name": "trayDetail",
              "type": {
                "text": "string"
              },
              "default": "\"content-edit\""
            },
            {
              "kind": "field",
              "name": "appList",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "gizmoList",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "recentGizmoList"
            },
            {
              "kind": "field",
              "name": "haxAutoloader",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Hax autoloader element.",
              "default": "null",
              "attribute": "haxAutoloader"
            },
            {
              "kind": "field",
              "name": "activeHaxBody",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "haxTray",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Hax tray",
              "default": "null",
              "attribute": "haxTray"
            },
            {
              "kind": "field",
              "name": "haxCancel",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "description": "Hax cancel dialog",
              "default": "null",
              "attribute": "haxCancel"
            },
            {
              "kind": "field",
              "name": "staxList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Available hax stax which are just re-usable templates",
              "default": "[]",
              "attribute": "staxList"
            },
            {
              "kind": "field",
              "name": "globalPreferences",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "activeApp",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "connectionRewrites",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Support for deploy specific rewriting for things like JWTs",
              "default": "{}",
              "attribute": "connectionRewrites"
            },
            {
              "kind": "field",
              "name": "daemonCommands",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "keyboardShortcuts",
              "type": {
                "text": "object"
              },
              "default": "{ \"#\": { tag: \"h2\", content: \"\" }, \"##\": { tag: \"h3\", content: \"\" }, \"###\": { tag: \"h4\", content: \"\" }, \"####\": { tag: \"h5\", content: \"\" }, \"#####\": { tag: \"h6\", content: \"\" }, \"######\": { tag: \"h6\", content: \"\" }, \"1.\": { tag: \"ol\", content: \"<li></li>\" }, \"-\": { tag: \"ul\", content: \"<li></li>\" }, \"*\": { tag: \"ul\", content: \"<li></li>\" }, \"+\": { tag: \"ul\", content: \"<li></li>\" }, \"---\": { tag: \"hr\" }, \"***\": { tag: \"hr\" }, ___: { tag: \"hr\" }, \"```\": { tag: \"code\", content: \"\" }, \">\": { tag: \"blockquote\", content: \"\" }, }"
            },
            {
              "kind": "field",
              "name": "__primsBuilder",
              "type": {
                "text": "object"
              },
              "default": "{ caption: { title: \"Caption\", icon: \"av:call-to-action\", }, video: { title: \"Video\", icon: \"av:play-circle-filled\", }, audio: { title: \"Audio\", icon: \"image:music-note\", }, section: { title: \"Section\", icon: \"image:crop-landscape\", }, dl: { title: \"Data list\", icon: \"editor:format-list-bulleted\", }, dt: { title: \"Data term\", icon: \"editor:format-list-bulleted\", }, dd: { title: \"Data definition\", icon: \"editor:format-list-bulleted\", }, ol: { title: \"Numbered list\", icon: \"editor:format-list-numbered\", }, ul: { title: \"Bulleted list\", icon: \"editor:format-list-bulleted\", }, li: { title: \"List item\", icon: \"editor:format-list-bulleted\", }, h1: { title: \"Heading\", icon: \"hax:h1\", }, h2: { title: \"Heading\", icon: \"hax:h2\", tags: [\"Writing\", \"h2\", \"html\", \"text\", \"heading\", \"header\"], }, h3: { title: \"Heading\", icon: \"hax:h3\", }, h4: { title: \"Heading\", icon: \"hax:h4\", }, h5: { title: \"Heading\", icon: \"hax:h5\", }, h6: { title: \"Heading\", icon: \"hax:h6\", }, strike: { title: \"Cross out\", icon: \"editor:format-strikethrough\", }, u: { title: \"Underline\", icon: \"editor:format-underlined\", }, sub: { title: \"Subscript\", icon: \"mdextra:subscript\", }, sup: { title: \"Superscript\", icon: \"mdextra:superscript\", }, div: { title: \"DIV\", icon: \"image:crop-landscape\", }, span: { title: \"SPAN\", icon: \"editor:short-text\", handles: [ { type: \"inline\", text: \"text\", }, ], }, i: { title: \"Italic\", icon: \"editor:format-italic\", }, em: { title: \"Emphasis\", icon: \"editor:format-italic\", }, strong: { title: \"Bold\", icon: \"editor:format-bold\", }, b: { title: \"Bold\", icon: \"editor:format-bold\", }, blockquote: { title: \"Block quote\", icon: \"editor:format-quote\", }, code: { title: \"Code\", icon: \"icons:code\", }, pre: { title: \"Preformatted\", icon: \"icons:code\", }, time: { title: \"Time\", icon: \"icons:code\", }, cite: { title: \"Citation\", icon: \"icons:code\", }, embed: { title: \"Embedded object\", icon: \"icons:fullscreen\", }, picture: { title: \"Picture\", icon: \"image:image\", }, }"
            },
            {
              "kind": "field",
              "name": "validTagList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Valid tag list, tag only and including primatives for a baseline.",
              "attribute": "validTagList"
            },
            {
              "kind": "field",
              "name": "validGridTagList",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Valid tag list, tag only and including primatives for a baseline.",
              "attribute": "validGridTagList"
            },
            {
              "kind": "field",
              "name": "validGizmoTypes",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Gizmo types which can be used to bridge apps to gizmos.",
              "attribute": "validGizmoTypes"
            },
            {
              "kind": "field",
              "name": "styleGuideSchema",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_isSandboxed",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Sandboxed environment test",
              "attribute": "_isSandboxed"
            },
            {
              "kind": "field",
              "name": "revisionHistoryLink",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "__appStoreData",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Internal app store data property after request",
              "attribute": "__appStoreData"
            },
            {
              "kind": "field",
              "name": "ready",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "ready"
            }
          ],
          "events": [
            {
              "name": "hax-store-app-store-loaded",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-store-ready",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-cancel",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "place-holder-file-drop",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "skip-hax-confirmation",
              "type": {
                "text": "boolean"
              },
              "description": "skipHAXConfirmation",
              "default": "false",
              "fieldName": "skipHAXConfirmation"
            },
            {
              "name": "storageData",
              "type": {
                "text": "object"
              },
              "description": "Local storage bridge",
              "default": "{}",
              "fieldName": "storageData"
            },
            {
              "name": "haxTray",
              "type": {
                "text": "null"
              },
              "description": "Hax tray",
              "default": "null",
              "fieldName": "haxTray"
            },
            {
              "name": "haxCancel",
              "type": {
                "text": "null"
              },
              "description": "Hax cancel dialog",
              "default": "null",
              "fieldName": "haxCancel"
            },
            {
              "name": "haxAutoloader",
              "type": {
                "text": "null"
              },
              "description": "Hax autoloader element.",
              "default": "null",
              "fieldName": "haxAutoloader"
            },
            {
              "name": "haxBodies",
              "type": {
                "text": "array"
              },
              "description": "A list of all haxBodies that exist",
              "default": "[]",
              "fieldName": "haxBodies"
            },
            {
              "name": "activePlaceHolder",
              "type": {
                "text": "null"
              },
              "description": "An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.",
              "default": "null",
              "fieldName": "activePlaceHolder"
            },
            {
              "name": "activePlaceHolderOperationType",
              "type": {
                "text": "null"
              },
              "default": "null",
              "fieldName": "activePlaceHolderOperationType"
            },
            {
              "name": "appStore",
              "type": {
                "text": "object"
              },
              "description": "Possible appStore endpoint for loading in things dynamically.",
              "default": "{ url: \"\", params: {}, }",
              "fieldName": "appStore"
            },
            {
              "name": "sessionObject",
              "type": {
                "text": "object"
              },
              "description": "Session object bridged in from a session method of some kind",
              "default": "{}",
              "fieldName": "sessionObject"
            },
            {
              "name": "skipExitTrap",
              "type": {
                "text": "boolean"
              },
              "description": "skip the exit trap to prevent losing data",
              "default": "false",
              "fieldName": "skipExitTrap"
            },
            {
              "name": "elementList",
              "type": {
                "text": "object"
              },
              "description": "Available elements keyed by tagName and with\ntheir haxProperties centrally registered.",
              "default": "{}",
              "fieldName": "elementList"
            },
            {
              "name": "staxList",
              "type": {
                "text": "array"
              },
              "description": "Available hax stax which are just re-usable templates",
              "default": "[]",
              "fieldName": "staxList"
            },
            {
              "name": "validTagList",
              "type": {
                "text": "array"
              },
              "description": "Valid tag list, tag only and including primatives for a baseline.",
              "fieldName": "validTagList"
            },
            {
              "name": "validGridTagList",
              "type": {
                "text": "array"
              },
              "description": "Valid tag list, tag only and including primatives for a baseline.",
              "fieldName": "validGridTagList"
            },
            {
              "name": "validGizmoTypes",
              "type": {
                "text": "array"
              },
              "description": "Gizmo types which can be used to bridge apps to gizmos.",
              "fieldName": "validGizmoTypes"
            },
            {
              "name": "_isSandboxed",
              "type": {
                "text": "boolean"
              },
              "description": "Sandboxed environment test",
              "fieldName": "_isSandboxed"
            },
            {
              "name": "__appStoreData",
              "type": {
                "text": "object"
              },
              "description": "Internal app store data property after request",
              "fieldName": "__appStoreData"
            },
            {
              "name": "ready",
              "type": {
                "text": "boolean"
              },
              "fieldName": "ready"
            },
            {
              "name": "connectionRewrites",
              "type": {
                "text": "object"
              },
              "description": "Support for deploy specific rewriting for things like JWTs",
              "default": "{}",
              "fieldName": "connectionRewrites"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "winEventsElement",
              "package": "@haxtheweb/utils/utils.js"
            },
            {
              "name": "HAXElement",
              "package": "@haxtheweb/hax-body-behaviors/hax-body-behaviors.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-store",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "HAXStore"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxStore",
            "module": "lib/hax-store.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxStore",
          "declaration": {
            "name": "HaxStore",
            "module": "lib/hax-store.js"
          }
        },
        {
          "kind": "js",
          "name": "HAXStore",
          "declaration": {
            "name": "HAXStore",
            "module": "lib/hax-store.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-text-editor-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-text-editor-button`\na custom-element button for hax text editor (custom buttons can extend this)",
          "name": "HaxTextEditorButton",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "description": "Store the tag name to make it easier to obtain directly.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "targetedNode",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateElement",
              "description": "updates element based on hax properties of element"
            },
            {
              "kind": "method",
              "name": "getValue",
              "description": "overrides RichTextEditorPromptButtonBehaviors\nto get custom gizmo property and slot values",
              "parameters": [
                {
                  "description": "selected node",
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setToggled"
            },
            {
              "kind": "method",
              "name": "tagClickCallback",
              "parameters": [
                {
                  "name": "e",
                  "default": "{}",
                  "description": "click event",
                  "type": {
                    "text": "event"
                  }
                }
              ],
              "description": "override this custom function to perform a\ncustom operation when an element that matches the tags list is clicked"
            },
            {
              "kind": "method",
              "name": "updateSelection",
              "description": "updates selection based on values passed from prompt\nthis overrides the default button behavior so that the gizmo's content doen't get doubled"
            },
            {
              "kind": "method",
              "name": "getSlotWrapper",
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "gets a slot wrapper tag that meets field requirements",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "command",
              "type": {
                "text": "string"
              },
              "default": "\"insertHTML\""
            },
            {
              "kind": "field",
              "name": "element",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "element"
            }
          ],
          "events": [
            {
              "name": "deregister-button",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "register-button",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "element",
              "type": {
                "text": "object"
              },
              "fieldName": "element"
            }
          ],
          "mixins": [
            {
              "name": "RichTextEditorPromptButtonBehaviors",
              "package": "@haxtheweb/rich-text-editor/lib/buttons/rich-text-editor-prompt-button.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxTextEditorButton",
            "module": "lib/hax-text-editor-button.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTextEditorButton",
          "declaration": {
            "name": "HaxTextEditorButton",
            "module": "lib/hax-text-editor-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-text-editor-paste-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-text-editor-paste-button`\na link button for rich text editor",
          "name": "HaxTextEditorPasteButton",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "description": "Store the tag name to make it easier to obtain directly.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "sendCommand",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "command",
              "type": {
                "text": "string"
              },
              "default": "\"paste\""
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "\"content-paste\""
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"Paste Clipboard\""
            }
          ],
          "mixins": [
            {
              "name": "RichTextEditorButtonBehaviors",
              "package": "@haxtheweb/rich-text-editor/lib/buttons/rich-text-editor-button.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-text-editor-paste-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxTextEditorPasteButton",
            "module": "lib/hax-text-editor-paste-button.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTextEditorPasteButton",
          "declaration": {
            "name": "HaxTextEditorPasteButton",
            "module": "lib/hax-text-editor-paste-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-text-editor-toolbar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-text-editor-toolbar`\na customized toolbar (with buttons) for HAX",
          "name": "HaxTextEditorToolbar",
          "members": [
            {
              "kind": "field",
              "name": "tourTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "description": "Store the tag name to make it easier to obtain directly.",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "undoButton",
              "description": "default config for a format button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "redoButton",
              "description": "default config for a format button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formatButton",
              "description": "default config for a format button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formatBlocks",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "boldButton",
              "description": "default config for a bold button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "italicButton",
              "description": "default config for an italic button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "underlineButton",
              "description": "default config for an underline button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strikethroughButton",
              "description": "default config for an underline button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "codeButton",
              "description": "default config for a <code></code> button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "markButton",
              "description": "default config for a <code></code> button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "abbrButton",
              "description": "default config for a <code></code> button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "removeFormatButton",
              "description": "default config for a remove format button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "advancedInlineButtonGroup",
              "description": "default config for a style button group: format, bold, italic, and remove format",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "linkButton",
              "description": "default config for a link button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "unlinkButton",
              "description": "default config for a link button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "cutButton",
              "description": "default config for a cut button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "copyButton",
              "description": "default config for a copy button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "pasteButton",
              "description": "default config for a paste button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "subscriptButton",
              "description": "default config for a subscript button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "superscriptButton",
              "description": "default config for a superscript button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "symbolButton",
              "description": "default config for a symbol button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "emojiButton",
              "description": "default config for an emoji button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "imageButton",
              "description": "default config for an image button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "orderedListButton",
              "description": "default config for an ordered list button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "unorderedListButton",
              "description": "default config for an unordered list button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "blockquoteButton",
              "description": "default config for a blockquote button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "indentButton",
              "description": "default config for an indent button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "outdentButton",
              "description": "default config for an outdent button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "sourceButton",
              "description": "default config for a view source button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "haxSymbolInsertButtonGroup",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "iconButton",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "defaultConfig",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "filteredBlocks",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formatButtonElement",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isRangeInScope",
              "description": "determines if current range is in scope of the target\noverrides default behavior so that the entire target can be selected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "targetHandlers",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "list of event handlers for a given target",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_handlePaste",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "keeps keys from HAX"
            },
            {
              "kind": "method",
              "name": "trapKeys",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "keeps keys from HAX"
            },
            {
              "kind": "method",
              "name": "updateBlocks"
            },
            {
              "kind": "method",
              "name": "getRange"
            },
            {
              "kind": "method",
              "name": "getSelection"
            },
            {
              "kind": "method",
              "name": "positionByTarget",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "moves toolbar into position before the target\n(can be overriden for custom positioning)"
            },
            {
              "kind": "method",
              "name": "_handleElementRegister",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "event"
                  }
                }
              ],
              "description": "when an element is registered,\ncheck its properties"
            },
            {
              "kind": "method",
              "name": "_handleHaxStoreReady",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "event"
                  }
                }
              ],
              "description": "when hax-store is ready,\ncheck its registered elements"
            },
            {
              "kind": "method",
              "name": "_setInlineElement",
              "parameters": [
                {
                  "name": "tag",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "props",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "if an an element is inline,\nadds it to list of inline elements",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "updateToolbarElements",
              "description": "updates the toolbar buttons\nto include custom inline element buttons",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ undoButton: \"Undo\", redoButton: \"Redo\", formatButton: \"Format\", blockP: \"Paragraph\", blockH1: \"Heading 1\", blockH2: \"Heading 2\", blockH3: \"Heading 3\", blockH4: \"Heading 4\", blockH5: \"Heading 5\", blockH6: \"Heading 6\", blockPre: \"Preformatted\", italicButton: \"Italic\", boldButton: \"Bold\", underlineButton: \"Underline\", strikethroughButton: \"Cross out\", codeButton: \"Code\", markButton: \"Highlight\", abbrButton: \"Abbreviation\", removeFormatButton: \"Remove format\", linkButton: \"Link\", unlinkButton: \"Remove Link\", cutButton: \"Cut\", copyButton: \"Copy\", pasteButton: \"Paste Clipboard\", subscriptButton: \"Subscript\", superscriptButton: \"Superscript\", symbolButton: \"Insert Symbol\", emojiButton: \"Insert Emoticon\", imageButton: \"Insert Image\", orderedListButton: \"Numbered list\", unorderedListButton: \"Bulleted list\", blockquoteButton: \"Blockquote\", indentButton: \"Indent\", outdentButton: \"Outdent\", textEditorToolbarTour: \"Change how the text is structured and visualized in the page.\", }"
            },
            {
              "kind": "field",
              "name": "sourceView",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "sourceView",
              "default": "false",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "haxUIElement",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "tourName",
              "type": {
                "text": "string"
              },
              "default": "\"hax\""
            },
            {
              "kind": "field",
              "name": "HaxTextEditorToolbarConfig"
            },
            {
              "kind": "field",
              "name": "inlineGizmos"
            },
            {
              "kind": "field",
              "name": "default"
            },
            {
              "kind": "field",
              "name": "config"
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__updated",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "__updated"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "LitElement constructable styles enhancement",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "slotSchema",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "layoutElement",
              "description": "closest layout element, self or parent",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "layoutParent",
              "description": "if layout element is itself a slot, get its layout element",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "slottedItems",
              "description": "gets slotted items of closest layout element",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "elementIcon",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its icon from HAX properties gizmo",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "elementLabel",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its label from HAX properties gizmo",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "elementGizmo",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "given an element get its gizmo data from HAX properties",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "getFilteredBlocks",
              "parameters": [
                {
                  "name": "blocks",
                  "default": "[]"
                }
              ],
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "method",
              "name": "setTarget",
              "parameters": [
                {
                  "name": "node",
                  "default": "this.activeNode"
                }
              ],
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "viewSource",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "viewSource",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "activeNode",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "activeNode",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "parentSchema",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "parentSchema",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "kind": "field",
              "name": "realSelectedValue",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "realSelectedValue",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "__updated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "__updated"
            },
            {
              "name": "activeNode",
              "type": {
                "text": "object"
              },
              "fieldName": "activeNode",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "parentSchema",
              "type": {
                "text": "object"
              },
              "fieldName": "parentSchema",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "realSelectedValue",
              "type": {
                "text": "string"
              },
              "fieldName": "realSelectedValue",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "sourceView",
              "type": {
                "text": "boolean"
              },
              "fieldName": "sourceView",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            },
            {
              "name": "viewSource",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "viewSource",
              "inheritedFrom": {
                "name": "HaxContextBehaviors",
                "module": "lib/hax-context-behaviors.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "RichTextEditorToolbarBehaviors",
              "package": "@haxtheweb/rich-text-editor/lib/toolbars/rich-text-editor-toolbar.js"
            },
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "HaxContextBehaviors",
              "module": "/lib/hax-context-behaviors.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-text-editor-toolbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "hax-text-editor-toolbar",
          "declaration": {
            "name": "HaxTextEditorToolbar",
            "module": "lib/hax-text-editor-toolbar.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTextEditorToolbar",
          "declaration": {
            "name": "HaxTextEditorToolbar",
            "module": "lib/hax-text-editor-toolbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-text-editor.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-text-editor`\nHAX-specific implementation of rich-text-editor",
          "name": "HaxTextEditor",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "description": "Store the tag name to make it easier to obtain directly.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "haxHooks",
              "description": "Implements haxHooks to tie into life-cycle if hax exists."
            },
            {
              "kind": "method",
              "name": "haxactiveElementChanged",
              "parameters": [
                {
                  "name": "el"
                },
                {
                  "name": "val"
                }
              ],
              "description": "allow HAX to toggle edit state when activated"
            },
            {
              "kind": "field",
              "name": "haxUIElement",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "\"hax-text-editor-toolbar\""
            }
          ],
          "mixins": [
            {
              "name": "RichTextEditorBehaviors",
              "package": "@haxtheweb/rich-text-editor/rich-text-editor.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-text-editor",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "hax-text-editor",
          "declaration": {
            "name": "HaxTextEditor",
            "module": "lib/hax-text-editor.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTextEditor",
          "declaration": {
            "name": "HaxTextEditor",
            "module": "lib/hax-text-editor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-toolbar-item.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "HaxToolbarItemBehaviors",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "buttonTemplate",
              "description": "template for button, based on whether or not the button toggles",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "simpleButtonThemeStyles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "simpleButtonCoreStyles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "simpleButtonLayoutStyles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeys",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMousedown",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "danger",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "attribute": "danger",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "feature",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "attribute": "feature",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "attribute": "event-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "toggledTooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "toggledTooltip"
            },
            {
              "kind": "field",
              "name": "tooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "tooltip"
            }
          ],
          "attributes": [
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "fieldName": "danger"
            },
            {
              "name": "event-name",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "fieldName": "eventName"
            },
            {
              "name": "feature",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "fieldName": "feature"
            },
            {
              "name": "toggledTooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "toggledTooltip"
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "tooltip"
            }
          ],
          "mixins": [
            {
              "name": "SimpleToolbarButtonBehaviors",
              "package": "@haxtheweb/simple-toolbar/lib/simple-toolbar-button.js"
            }
          ],
          "parameters": [
            {
              "name": "SuperClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "`hax-toolbar-item`\na button for hax toolbar",
          "name": "HaxToolbarItem",
          "mixins": [
            {
              "name": "HaxToolbarItemBehaviors",
              "module": "lib/hax-toolbar-item.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "",
          "customElement": true,
          "attributes": [
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "fieldName": "danger",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "event-name",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "fieldName": "eventName",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "feature",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "fieldName": "feature",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "toggledTooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "buttonTemplate",
              "description": "template for button, based on whether or not the button toggles",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonThemeStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonCoreStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonLayoutStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeys",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleMousedown",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "danger",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "attribute": "danger",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "feature",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "attribute": "feature",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "attribute": "event-name",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "toggledTooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxToolbarItem",
            "module": "lib/hax-toolbar-item.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxToolbarItem",
          "declaration": {
            "name": "HaxToolbarItem",
            "module": "lib/hax-toolbar-item.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxToolbarItemBehaviors",
          "declaration": {
            "name": "HaxToolbarItemBehaviors",
            "module": "lib/hax-toolbar-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-toolbar-menu.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-toolbar-menu`\n`An icon / button that has support for multiple options via drop down.`",
          "name": "HaxToolbarMenu",
          "members": [
            {
              "kind": "field",
              "name": "simpleButtonThemeStyles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "simpleButtonCoreStyles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_blockEvent",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Internal flag to allow blocking the event firing if machine selects tag.",
              "default": "false",
              "attribute": "_blockEvent"
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "attribute": "event-name"
            }
          ],
          "attributes": [
            {
              "name": "_blockEvent",
              "type": {
                "text": "boolean"
              },
              "description": "Internal flag to allow blocking the event firing if machine selects tag.",
              "default": "false",
              "fieldName": "_blockEvent"
            },
            {
              "name": "event-name",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "fieldName": "eventName"
            }
          ],
          "mixins": [
            {
              "name": "SimpleToolbarMenuBehaviors",
              "package": "@haxtheweb/simple-toolbar/lib/simple-toolbar-menu.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-toolbar-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxToolbarMenu",
            "module": "lib/hax-toolbar-menu.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxToolbarMenu",
          "declaration": {
            "name": "HaxToolbarMenu",
            "module": "lib/hax-toolbar-menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-toolbar.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "HaxToolbarBehaviors",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "LitElement constructable styles enhancement",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "See what's selected",
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "This is an inline context menu",
              "default": "false",
              "attribute": "inline",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "See what's selected",
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "description": "This is an inline context menu",
              "default": "false",
              "fieldName": "inline"
            }
          ],
          "mixins": [
            {
              "name": "SimpleToolbarBehaviors",
              "package": "@haxtheweb/simple-toolbar/simple-toolbar.js"
            }
          ],
          "parameters": [
            {
              "name": "SuperClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "HaxToolbar",
          "mixins": [
            {
              "name": "HaxToolbarBehaviors",
              "module": "lib/hax-toolbar.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "",
          "customElement": true,
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "See what's selected",
              "default": "false",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "description": "This is an inline context menu",
              "default": "false",
              "fieldName": "inline",
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "LitElement constructable styles enhancement",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            },
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "See what's selected",
              "default": "false",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "This is an inline context menu",
              "default": "false",
              "attribute": "inline",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarBehaviors",
                "module": "lib/hax-toolbar.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxToolbar",
            "module": "lib/hax-toolbar.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxToolbar",
          "declaration": {
            "name": "HaxToolbar",
            "module": "lib/hax-toolbar.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxToolbarBehaviors",
          "declaration": {
            "name": "HaxToolbarBehaviors",
            "module": "lib/hax-toolbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-tray-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-tray-button`\n`A button in the tray`",
          "name": "HaxButton",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_voiceEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Fire an event that includes the eventName of what was just pressed.",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "eventData",
              "privacy": "public",
              "type": {
                "text": "null"
              },
              "default": "null",
              "attribute": "event-data"
            },
            {
              "kind": "field",
              "name": "voiceCommand",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Voice command to append for things that support data-voicecommand.",
              "attribute": "voice-command"
            },
            {
              "kind": "field",
              "name": "wide",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "wide",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "index",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "description": "Index position in the original list of imports",
              "attribute": "index"
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "buttonTemplate",
              "description": "template for button, based on whether or not the button toggles",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonThemeStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonCoreStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "simpleButtonLayoutStyles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeys",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleMousedown",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "danger",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "attribute": "danger",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "feature",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "attribute": "feature",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "attribute": "event-name",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "toggledTooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "attribute": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "events": [
            {
              "name": "hax-tray-button-click",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "super-daemon-voice-command",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "voice-command",
              "type": {
                "text": "string"
              },
              "description": "Voice command to append for things that support data-voicecommand.",
              "fieldName": "voiceCommand"
            },
            {
              "name": "wide",
              "type": {
                "text": "boolean"
              },
              "fieldName": "wide"
            },
            {
              "name": "index",
              "type": {
                "text": "number"
              },
              "description": "Index position in the original list of imports",
              "fieldName": "index"
            },
            {
              "name": "event-data",
              "type": {
                "text": "null"
              },
              "default": "null",
              "fieldName": "eventData"
            },
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "description": "red warning",
              "default": "false",
              "fieldName": "danger",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "event-name",
              "type": {
                "text": "string"
              },
              "description": "Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.",
              "fieldName": "eventName",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "feature",
              "type": {
                "text": "boolean"
              },
              "description": "Inverted display mode",
              "default": "false",
              "fieldName": "feature",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "toggledTooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "toggledTooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Hover tip text",
              "fieldName": "tooltip",
              "inheritedFrom": {
                "name": "HaxToolbarItemBehaviors",
                "module": "lib/hax-toolbar-item.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "HaxToolbarItemBehaviors",
              "package": "@haxtheweb/hax-body/lib/hax-toolbar-item.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxButton",
            "module": "lib/hax-tray-button.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxButton",
          "declaration": {
            "name": "HaxButton",
            "module": "lib/hax-tray-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-tray-upload.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HaxTrayUpload",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true,
              "description": "Convention we use",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "_editModeChanged",
              "parameters": [
                {
                  "name": "editMode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_fileUploadResponse",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Respond to successful file upload, now inject url into url field and\ndo a gizmo guess from there!",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "_canUpload",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "newAssetConfigure",
              "description": "Configure asset after upload or URL passed in."
            },
            {
              "kind": "method",
              "name": "_placeHolderFileDrop",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "A file event was detected from a drag and drop in the interface, most likely\nfrom a place-holder tag"
            },
            {
              "kind": "method",
              "name": "_uploadFile",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "A file event was detected from a drag and drop in the interface, most likely\nfrom a place-holder tag"
            },
            {
              "kind": "field",
              "name": "hideInput",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__winEvents",
              "type": {
                "text": "object"
              },
              "default": "{ ...this.__winEvents, \"place-holder-file-drop\": \"_placeHolderFileDrop\", \"hax-file-upload\": \"_uploadFile\", }",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "_fileAboutToUpload",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Respond to uploading a file",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "_haxAppPickerSelection",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Event for an app being selected from a picker\nThis happens when multiple upload targets support the given type",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "field",
              "name": "sources",
              "readonly": true,
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "method",
              "name": "_clickMediaButton",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "field",
              "name": "showSources",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "show-sources",
              "reflects": true,
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "\"on\"",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ ...this.t, whereUpload: \"Where would you like to upload this\", serverStorageLocationCantHandle: \"Server storage location can't handle\", fileUploadsMustHaveAFileExtension: \"File uploads must have a file extension\", uploads: \"uploads\", dropMediaHereOr: \"drop media here or\", selectMedia: \"Select media\", upload: \"Upload\", takePhoto: \"Take photo\", recordAudio: \"Record audio\", cancel: \"Cancel\", uploadMedia: \"Upload media\", }",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            }
          ],
          "superclass": {
            "name": "HaxUploadField",
            "module": "/lib/hax-upload-field.js"
          },
          "attributes": [
            {
              "name": "show-sources",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSources",
              "inheritedFrom": {
                "name": "HaxUploadField",
                "module": "lib/hax-upload-field.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxTrayUpload",
            "module": "lib/hax-tray-upload.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTrayUpload",
          "declaration": {
            "name": "HaxTrayUpload",
            "module": "lib/hax-tray-upload.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-tray.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-tray`\n`The tray / dashboard area which allows for customization of all major settings`",
          "name": "HaxTray",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "description": "Convention we use",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_expandSettingsPanel",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_redoChanged",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_undoChanged",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "trayStatus",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "resetSize",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "resizeDown",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "panelOpsTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toolbarsTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "menuToolbarTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "menuButtons",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "saveButtons",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "doButtons",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "contentButtons",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_clickMediaButton",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "moreButtons",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "trayDetailTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "viewSourceTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "contentEditTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "contentAddTemplate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "contentMapTemplate",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_refreshAddData"
            },
            {
              "kind": "method",
              "name": "_processTrayEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Process event for simple content inserts."
            },
            {
              "kind": "method",
              "name": "startTour"
            },
            {
              "kind": "method",
              "name": "stopTour"
            },
            {
              "kind": "method",
              "name": "_handleTourChanged",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setupForm",
              "description": "When the preview node is updated, pull schema associated with it"
            },
            {
              "kind": "method",
              "name": "_toArray",
              "parameters": [
                {
                  "name": "obj"
                }
              ],
              "description": "Convert an object to an array"
            },
            {
              "kind": "method",
              "name": "updateMap",
              "description": "update hax map"
            },
            {
              "kind": "method",
              "name": "_updateTrayDetail",
              "parameters": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "kind": "field",
              "name": "flattenObject"
            },
            {
              "kind": "method",
              "name": "__valueChangedEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Notice change in values from below"
            },
            {
              "kind": "method",
              "name": "__lockAllSettings",
              "parameters": [
                {
                  "name": "status"
                }
              ],
              "description": "Lock / unlock all settings on the tray for the active node form"
            },
            {
              "kind": "method",
              "name": "_editModeChanged",
              "parameters": [
                {
                  "name": "newValue"
                }
              ],
              "description": "_editModeChanged"
            },
            {
              "kind": "method",
              "name": "_clickEditButton",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Edit clicked, activate"
            },
            {
              "kind": "method",
              "name": "_clickSaveButton",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Toggle the drawer when the button is clicked."
            },
            {
              "kind": "method",
              "name": "_clickSaveAndEditButton",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Save and continue editing - save content but stay in edit mode"
            },
            {
              "kind": "field",
              "name": "tourController",
              "default": "new AbortController()"
            },
            {
              "kind": "field",
              "name": "dragController",
              "default": "new AbortController()"
            },
            {
              "kind": "field",
              "name": "tourName",
              "type": {
                "text": "string"
              },
              "default": "\"hax\""
            },
            {
              "kind": "field",
              "name": "__winEvents",
              "type": {
                "text": "object"
              },
              "default": "{ \"can-redo-changed\": \"_redoChanged\", \"can-undo-changed\": \"_undoChanged\", \"hax-drop-focus-event\": \"_expandSettingsPanel\", }"
            },
            {
              "kind": "field",
              "name": "trayIcon",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"settings\"",
              "attribute": "trayIcon"
            },
            {
              "kind": "field",
              "name": "resizeDrag",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "resize-drag",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideToolbar",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Ability to hide entire toolbar",
              "default": "false",
              "attribute": "hide-toolbar",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__moveX",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ structure: \"Outline\", htmlSource: \"HTML Source\", structureTip: \"View Page Structure\", edit: \"Edit\", save: \"Save\", saveAndEdit: \"Save and edit\", move: \"Move\", close: \"Close\", move: \"Move\", menuAlignment: \"Menu Alignment\", menuLeft: \"Move\", menuRight: \"Move\", menuPosition: \"Menu position\", changeSideVisually: \"Change which side of the screen the menu is affixed to visually.\", expand: \"Expand\", collapse: \"Collapse\", menuSize: \"Menu size\", menuSizeDescription: \"Expand or collapse the menu visually.\", merlin: \"Merlin\", summonMerlin: \"Summon Merlin\", settings: \"Settings\", source: \"Source\", undo: \"Undo\", redo: \"Redo\", media: \"Media\", blocks: \"Blocks\", cancel: \"Cancel\", cancelWithoutSaving: \"Cancel without saving\", configure: \"Configure\", advanced: \"Advanced\", developer: \"Developer\", alignment: \"Alignment\", left: \"Left\", center: \"Center\", right: \"Right\", search: \"Search\", templates: \"Templates\", width: \"Width\", }"
            },
            {
              "kind": "field",
              "name": "_initial",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Form values for active node",
              "default": "{ settings: { configure: {}, advanced: {}, developer: {}, }, }",
              "attribute": "activeValue"
            },
            {
              "kind": "field",
              "name": "collapsed",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "collapsed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeSchema",
              "privacy": "public",
              "type": {
                "text": "array"
              },
              "description": "Form schema for active node",
              "default": "[ { property: \"settings\", inputMethod: \"collapse\", properties: [], }, ]",
              "attribute": "activeSchema"
            },
            {
              "kind": "field",
              "name": "canUndo",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "If we can currently undo based on stack position",
              "default": "false",
              "attribute": "can-undo"
            },
            {
              "kind": "field",
              "name": "canRedo",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "If we can currently redo based on stack position",
              "default": "false",
              "attribute": "can-redo"
            },
            {
              "kind": "field",
              "name": "trayDetail",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "id of toggled section in tray",
              "default": "\"content-edit\"",
              "attribute": "tray-detail",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeTagName",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Element name / what to display based on active element",
              "default": "\"\"",
              "attribute": "activeTagName"
            },
            {
              "kind": "field",
              "name": "traySizeIcon",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"hax:arrow-expand-right\"",
              "attribute": "traySizeIcon"
            },
            {
              "kind": "field",
              "name": "__setup",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "offsetMargin",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "offset-margin"
            },
            {
              "kind": "field",
              "name": "loading",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "elementAlign",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Alignment of the initial edit button",
              "attribute": "element-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "light",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Light variant for save button",
              "attribute": "light",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "haxUiTheme",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "haxUiTheme"
            },
            {
              "kind": "field",
              "name": "hidePanelOps",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Showing button area at all a well as internal\nstate managing buttons like cancel and save",
              "attribute": "hide-panel-ops",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "globalPreferences",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Global preferences for HAX overall",
              "attribute": "globalPreferences"
            },
            {
              "kind": "field",
              "name": "activeNode",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Global active node so we know if we need to disable contextual settings",
              "attribute": "activeNode"
            },
            {
              "kind": "field",
              "name": "activeGizmo",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "activeGizmo"
            },
            {
              "kind": "field",
              "name": "editMode",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "State of the panel",
              "attribute": "edit-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trayLabel",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "heading of toggled section in tray",
              "attribute": "trayLabel"
            },
            {
              "kind": "field",
              "name": "tourOpened",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "tourOpened"
            },
            {
              "kind": "field",
              "name": "__tour",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "attribute": "__tour"
            }
          ],
          "events": [
            {
              "name": "hax-insert-content-array",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-insert-content",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-register-core-piece",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-toggle-active-node-lock",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "hax-save",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "offset-margin",
              "type": {
                "text": "string"
              },
              "fieldName": "offsetMargin"
            },
            {
              "name": "trayIcon",
              "type": {
                "text": "string"
              },
              "default": "\"settings\"",
              "fieldName": "trayIcon"
            },
            {
              "name": "resize-drag",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "resizeDrag"
            },
            {
              "name": "collapsed",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "collapsed"
            },
            {
              "name": "traySizeIcon",
              "type": {
                "text": "string"
              },
              "default": "\"hax:arrow-expand-right\"",
              "fieldName": "traySizeIcon"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "fieldName": "loading"
            },
            {
              "name": "activeValue",
              "type": {
                "text": "object"
              },
              "description": "Form values for active node",
              "default": "{ settings: { configure: {}, advanced: {}, developer: {}, }, }",
              "fieldName": "activeValue"
            },
            {
              "name": "activeSchema",
              "type": {
                "text": "array"
              },
              "description": "Form schema for active node",
              "default": "[ { property: \"settings\", inputMethod: \"collapse\", properties: [], }, ]",
              "fieldName": "activeSchema"
            },
            {
              "name": "element-align",
              "type": {
                "text": "string"
              },
              "description": "Alignment of the initial edit button",
              "fieldName": "elementAlign"
            },
            {
              "name": "light",
              "type": {
                "text": "boolean"
              },
              "description": "Light variant for save button",
              "fieldName": "light"
            },
            {
              "name": "can-undo",
              "type": {
                "text": "boolean"
              },
              "description": "If we can currently undo based on stack position",
              "default": "false",
              "fieldName": "canUndo"
            },
            {
              "name": "can-redo",
              "type": {
                "text": "boolean"
              },
              "description": "If we can currently redo based on stack position",
              "default": "false",
              "fieldName": "canRedo"
            },
            {
              "name": "haxUiTheme",
              "type": {
                "text": "string"
              },
              "fieldName": "haxUiTheme"
            },
            {
              "name": "hide-panel-ops",
              "type": {
                "text": "boolean"
              },
              "description": "Showing button area at all a well as internal\nstate managing buttons like cancel and save",
              "fieldName": "hidePanelOps"
            },
            {
              "name": "hide-toolbar",
              "type": {
                "text": "boolean"
              },
              "description": "Ability to hide entire toolbar",
              "default": "false",
              "fieldName": "hideToolbar"
            },
            {
              "name": "globalPreferences",
              "type": {
                "text": "object"
              },
              "description": "Global preferences for HAX overall",
              "fieldName": "globalPreferences"
            },
            {
              "name": "activeNode",
              "type": {
                "text": "object"
              },
              "description": "Global active node so we know if we need to disable contextual settings",
              "fieldName": "activeNode"
            },
            {
              "name": "activeTagName",
              "type": {
                "text": "string"
              },
              "description": "Element name / what to display based on active element",
              "default": "\"\"",
              "fieldName": "activeTagName"
            },
            {
              "name": "activeGizmo",
              "type": {
                "text": "object"
              },
              "fieldName": "activeGizmo"
            },
            {
              "name": "edit-mode",
              "type": {
                "text": "boolean"
              },
              "description": "State of the panel",
              "fieldName": "editMode"
            },
            {
              "name": "tray-detail",
              "type": {
                "text": "string"
              },
              "description": "id of toggled section in tray",
              "default": "\"content-edit\"",
              "fieldName": "trayDetail"
            },
            {
              "name": "trayLabel",
              "type": {
                "text": "string"
              },
              "description": "heading of toggled section in tray",
              "fieldName": "trayLabel"
            },
            {
              "name": "tourOpened",
              "type": {
                "text": "string"
              },
              "fieldName": "tourOpened"
            },
            {
              "name": "__tour",
              "type": {
                "text": "object"
              },
              "fieldName": "__tour"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "SimpleTourFinder",
              "package": "@haxtheweb/simple-popover/lib/SimpleTourFinder.js"
            },
            {
              "name": "winEventsElement",
              "package": "@haxtheweb/utils/utils.js"
            }
          ],
          "superclass": {
            "name": "SimpleColors",
            "package": "@haxtheweb/simple-colors/simple-colors.js"
          },
          "tagName": "hax-tray",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxTray",
            "module": "lib/hax-tray.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTray",
          "declaration": {
            "name": "HaxTray",
            "module": "lib/hax-tray.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-ui-styles.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "HaxUiText",
          "type": {
            "text": "array"
          },
          "default": "[ css` body { --hax-ui-font-family: var(--ddd-font-navigation); --hax-ui-font-size-xs: 11px; --hax-ui-font-size-sm: 13px; --hax-ui-font-size: 16px; --hax-ui-font-size-lg: 16px; --hax-ui-font-size-xl: 20px; } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxUiSpacing",
          "type": {
            "text": "array"
          },
          "default": "[ css` body { --hax-tray-width: 350px; --hax-tray-menubar-min-width: 44px; --hax-tray-menubar-min-height: 34px; --hax-ui-spacing-xs: 4px; --hax-ui-border-radius: 2px; --hax-ui-spacing-sm: calc(1 * var(--hax-ui-spacing-xs, 4px)); --hax-ui-spacing: calc(2 * var(--hax-ui-spacing-xs, 4px)); --hax-ui-spacing-lg: calc(3 * var(--hax-ui-spacing-xs, 4px)); --hax-ui-spacing-xl: calc(4 * var(--hax-ui-spacing-xs, 4px)); --hax-ui-focus-z-index: 1001; --simple-toolbar-focus-z-index: var(--hax-ui-focus-z-index); --a11y-menu-button-focus-z-index: var(--hax-ui-focus-z-index); } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxUiColors",
          "type": {
            "text": "array"
          },
          "default": "[ css` body { --hax-ui-color: #222; --hax-ui-color-focus: #000; --hax-ui-color-faded: #444; --hax-ui-disabled-color: #bbb; --hax-ui-background-color: #fff; --hax-ui-background-color-secondary: #e8e8e8; --hax-ui-background-color-faded: #b0b8bb; --hax-ui-color-accent: #009dc7; --hax-ui-color-accent-secondary: #007999; --hax-ui-background-color-accent: #e5f6fd; --hax-ui-color-danger: #ee0000; --hax-ui-color-danger-secondary: #850000; --hax-ui-background-color-danger: #fdeded; --hax-ui-border-color: #ddd; } body[hax-ui-theme=\"haxdark\"] { --hax-ui-color: #eeeae6; --hax-ui-color-focus: #fff; --hax-ui-color-faded: #c5c3be; --hax-ui-disabled-color: #666; --hax-ui-background-color: #111; --hax-ui-background-color-secondary: #111; --hax-ui-background-color-faded: #222; --hax-ui-color-accent: #77e2ff; --hax-ui-color-accent-secondary: #00c9ff; --hax-ui-background-color-accent: #000; --hax-ui-color-danger: #ff8f8f; --hax-ui-color-danger-secondary: #ff2222; --hax-ui-background-color-danger: #000; --hax-ui-border-color: #000; } @media (prefers-color-scheme: dark) { body[hax-ui-theme=\"system\"] { --hax-ui-color: #eeeae6; --hax-ui-color-focus: #fff; --hax-ui-color-faded: #c5c3be; --hax-ui-background-color: #111; --hax-ui-background-color-secondary: #111; --hax-ui-background-color-faded: #222; --hax-ui-color-accent: #77e2ff; --hax-ui-color-accent-secondary: #00c9ff; --hax-ui-background-color-accent: #000; --hax-ui-color-danger: #ff8f8f; --hax-ui-color-danger-secondary: #ff2222; --hax-ui-background-color-danger: #000; --hax-ui-border-color: #000; } } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxUiTooltip",
          "type": {
            "text": "array"
          },
          "default": "[ css` body { --simple-tooltip-background: var(--hax-ui-color); --simple-tooltip-text-color: var(--hax-ui-background-color); --simple-tooltip-opacity: 1; --simple-tooltip-delay-in: 0; --simple-tooltip-duration-in: 300ms; --simple-tooltip-duration-out: 0; --simple-tooltip-border-radius: 2px; --simple-tooltip-font-size: var(--hax-ui-font-size-sm); } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxUiFields",
          "type": {
            "text": "array"
          },
          "default": "[ css` body { --simple-fields-field-margin: calc(2 * var(--hax-ui-font-size)); --simple-toolbar-focus-z-index: var(--hax-ui-focus-z-index); --simple-fields-font-family: var(--hax-ui-font-family); --simple-fields-font-size: var(--hax-ui-font-size); --simple-fields-line-height: 135%; --simple-fields-detail-font-size: var(--hax-ui-font-size-sm); --simple-fields-detail-line-height: 120%; --simple-fields-margin: var(--hax-ui-spacing); --simple-fields-background-color: var(--hax-ui-background-color); --simple-fields-color: var(--hax-ui-color); --simple-picker-option-active-color: var(--hax-ui-color); --simple-picker-color-active: var(--hax-ui-color); --simple-picker-color: var(--hax-ui-color); --simple-fields-accent-color: var(--hax-ui-color-accent); --simple-fields-accent-color-light: var(--hax-ui-background-color-faded); --simple-fields-error-color: var(--hax-ui-color-danger-secondary); --simple-fields-button-danger-background-color: var( --hax-ui-color-danger ); --simple-fields-button-danger-focus-color: var( --hax-ui-color-danger-secondary ); --simple-fields-button-danger-background-color: var( --hax-ui-background-color ); --simple-fields-secondary-accent-color: var( --hax-ui-color-accent-secondary ); --simple-fields-border-color: var(--hax-ui-color-faded); --simple-fields-fieldset-border-color: rgba(127, 127, 127, 0.2); --simple-fields-legend-text-transform: capitalize; --simple-fields-legend-font-size: var(--hax-ui-font-size-xs); --simple-fields-meta-font-size: var(--hax-ui-font-size-xs); --simple-fields-meta-line-height: 120%; --simple-fields-meta-opacity: 0.7; --simple-fields-focus-meta-opacity: 1; --simple-fields-button-color: var(--hax-ui-color); --simple-fields-button-background-color: var(--hax-ui-background-color); --simple-fields-button-border-color: var(--hax-ui-border-color); --simple-fields-button-text-transform: capitalize; --simple-fields-border-radius: var(--hax-ui-border-radius); --simple-fields-button-padding-sm: var(--hax-ui-spacing-sm); --simple-fields-button-padding: var(--hax-ui-spacing-sm); --simple-fields-button-toggled-color: var(--hax-ui-color); --simple-fields-button-toggled-background-color: var( --hax-ui-background-color-accent ); --simple-fields-button-toggled-border-color: var(--hax-ui-color-accent); --simple-fields-button-focus-color: var(--hax-ui-color); --simple-fields-button-focus-background-color: var( --hax-ui-background-color-accent ); --simple-fields-button-focus-border-color: var(--hax-ui-color-accent); --simple-fields-button-disabled-color: unset; --simple-fields-button-disabled-background-color: unset; --simple-fields-button-disabled-border-color: unset; --simple-fields-button-disabled-opacity: 0.5; --hexagon-color: var(--hax-ui-color-accent); } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxUiSingletons",
          "type": {
            "text": "array"
          },
          "default": "[ css` simple-modal[mode=\"hax-ui\"], simple-popover-manager[mode=\"hax\"] { font-family: var(--hax-ui-font-family); font-size: var(--hax-ui-font-size); --simple-modal-height: 70vh; --simple-modal-width: 70vw; --simple-popover-border-color: var(--hax-ui-color); --simple-modal-border-color: var(--hax-ui-color); } rich-text-editor-prompt { z-index: calc(var(--hax-ui-focus-z-index) - 1); } simple-modal[mode=\"hax-ui\"]::part(dialog) { --simple-modal-z-index: 100000001 !important; } simple-modal[opened] { z-index: 100000001 !important; position: fixed; } simple-modal[mode=\"hax-ui\"]::part(titlebar), simple-popover-manager[mode=\"hax\"]::part(simple-popover-heading), simple-popover-manager[mode=\"hax\"] h1[slot=\"heading\"] { color: var(--hax-ui-background-color); background-color: var(--hax-ui-color-accent); padding: var(--hax-ui-spacing-sm) var(--hax-ui-spacing); margin: 0; } simple-modal[mode=\"hax-ui\"]::part(close), simple-popover-manager[mode=\"hax\"] #close { color: var(--hax-ui-background-color); background-color: var(--hax-ui-color-accent); outline: 1px solid var(--hax-ui-color-accent); --simple-icon-button-border: 0px solid transparent; --simple-icon-button-border-radius: var(--hax-ui-border-radius); width: 24px; height: 24px; padding: 0; } simple-modal[mode=\"hax-ui\"]:focus-within::part(close), simple-modal[mode=\"hax-ui\"]:hover::part(close), simple-popover-manager[mode=\"hax\"] #close:focus, simple-popover-manager[mode=\"hax\"] #close:hover { background-color: var(--hax-ui-color-accent-secondary); --simple-icon-button-border: 0px solid transparent; } simple-modal[mode=\"hax-ui\"]::part(title), simple-popover-manager[mode=\"hax\"] h1 { font-family: var(--hax-ui-font-family); font-size: var(--hax-ui-font-size); font-weight: normal; margin: 0 var(--hax-ui-spacing-sm) 0 0; padding: 0; } simple-popover-manager[mode=\"hax\"] h2 { font-family: var(--hax-ui-font-family); font-size: var(--hax-ui-font-size-lg); font-weight: normal; color: var(--hax-ui-color-accent-secondary); margin: 0 0 var(--hax-ui-spacing-lg); } simple-modal[mode=\"hax-ui\"]::part(content), simple-modal[mode=\"hax-ui\"]::part(custom), simple-popover-manager[mode=\"hax\"]::part(simple-popover-body) { font-size: var(--hax-ui-font-size); color: var(--hax-ui-color); background-color: var(--hax-ui-background-color); } simple-modal[mode=\"hax-ui\"]::part(content) { padding: 0 var(--hax-ui-spacing); } simple-modal[mode=\"hax-ui\"]::part(custom) { padding: 0; } simple-popover-manager[mode=\"hax\"]::part(simple-popover-body) { padding: var(--hax-ui-spacing); } simple-modal[mode=\"hax-ui\"]::part(buttons), simple-popover-manager[mode=\"hax\"]:part(simple-popover-nav) { background-color: var(--hax-ui-background-color); } #hax-cancel-no, #hax-cancel-yes { flex: 1 1 auto; } simple-popover-manager[mode=\"hax\"] simple-icon-button-lite[slot=\"nav\"]::part(button) { text-transform: capitalize; font-size: var(--hax-ui-font-size-sm); padding: var(--hax-ui-spacing-sm); color: var(--hax-ui-color); background-color: var(--hax-ui-background-color); border: 1px solid var(--hax-ui-border-color); border-radius: var(--hax-ui-border-radius); background-color: var(--hax-ui-background-color); } simple-popover-manager[mode=\"hax\"] simple-icon-button-lite[slot=\"nav\"]::part(button):hover, simple-popover-manager[mode=\"hax\"] simple-icon-button-lite[slot=\"nav\"]::part(button):focus-within { color: var(--hax-ui-color); background-color: var(--hax-ui-background-color-accent); border-color: var(--hax-ui-color-accent); } simple-popover-manager[mode=\"hax\"] simple-icon-button-lite[slot=\"nav\"][disabled]::part(button) { opacity: 0.5; border: 1px solid var(--hax-ui-border-color); } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxUiBaseStyles",
          "type": {
            "text": "array"
          },
          "default": "[ ...HaxUiText, ...HaxUiSpacing, ...HaxUiFields, ...HaxUiTooltip, ...HaxUiSingletons, ...HaxUiColors, ]",
          "description": "controls text spacing and colors throughout Hax UI (but not content)"
        },
        {
          "kind": "variable",
          "name": "HaxHexagon",
          "type": {
            "text": "array"
          },
          "default": "[ css` hexagon-loader { display: none; margin: 0 auto; z-index: 1000; } hexagon-loader[loading] { display: block; opacity: 0.8; } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxButton",
          "type": {
            "text": "array"
          },
          "default": "[ css` :host[aria-expanded=\"true\"] { border: 1px solid var(--hax-ui-border-color); } absolute-position-behavior { border-color: transparent; color: var(--hax-ui-color); background-color: var(--hax-ui-background-color); } :host([expanded]) absolute-position-behavior { border: 1px solid var(--hax-ui-border-color); } button[part=\"button\"] { text-transform: capitalize; font-size: var(--hax-ui-font-size-sm); padding: var(--hax-ui-spacing-sm); color: var(--hax-ui-color); background-color: var(--hax-ui-background-color); border: 1px solid var(--hax-ui-border-color); border-radius: var(--hax-ui-border-radius); } :host([role=\"menuitem\"]) button[part=\"button\"] { padding: 1px; border-color: transparent; } :host(:hover) button[part=\"button\"] { background-color: var(--hax-ui-background-color-secondary); color: var(--hax-ui-color); } :host([toggled]) button[part=\"button\"], button[part=\"button\"][aria-pressed=\"true\"] { color: var(--hax-ui-color-accent); border-color: var(--hax-ui-color-accent); } button[part=\"button\"][aria-pressed=\"true\"]:hover, :host([toggled]:hover) button[part=\"button\"] { background-color: var(--hax-ui-background-color-accent); } :host([feature]) button[part=\"button\"], :host([danger]) button[part=\"button\"] { color: var(--hax-ui-background-color); } :host([feature]) button[part=\"button\"] { background-color: var(--hax-ui-color-accent); border-color: var(--hax-ui-color-accent); } :host([danger]) button[part=\"button\"] { background-color: var(--hax-ui-color-danger); border-color: var(--hax-ui-color-danger); } :host([feature]) button[part=\"button\"][aria-pressed=\"true\"], :host([danger]) button[part=\"button\"][aria-pressed=\"true\"] { color: var(--hax-ui-background-color); } :host([feature]) button[part=\"button\"][aria-pressed=\"true\"] { background-color: var(--hax-ui-color-accent-secondary); border-color: var(--hax-ui-color-accent); } :host([danger]) button[part=\"button\"][aria-pressed=\"true\"] { background-color: var(--hax-ui-color-danger-secondary); border-color: var(--hax-ui-color-danger); } :host([feature]:hover) button[part=\"button\"], :host([feature]:focus-within) button[part=\"button\"], :host([danger]:hover) button[part=\"button\"], :host([danger]:focus-within) button[part=\"button\"] { color: var(--hax-ui-background-color); } :host([feature]:hover) button[part=\"button\"], :host([feature]:focus-within) button[part=\"button\"] { background-color: var(--hax-ui-color-accent-secondary); border-color: var(--hax-ui-color-accent-secondary); } :host([danger]:hover) button[part=\"button\"], :host([danger]:focus-within) button[part=\"button\"] { background-color: var(--hax-ui-color-danger-secondary); border-color: var(--hax-ui-color-danger-secondary); } :host([large]) button[part=\"button\"] { font-size: var(--hax-ui-font-size); padding: var(--hax-ui-spacing); border-width: 2px; } :host([disabled]) button[part=\"button\"][disabled] { opacity: 1; color: var(--hax-ui-disabled-color); border: 1px solid var(--hax-ui-border-color); } *[show-text-label]::part(label) { text-transform: capitalize; margin: var(--hax-ui-spacing-sm); } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxFields",
          "type": {
            "text": "array"
          },
          "default": "[ css` simple-fields-tabs { padding: 0; border: none; margin-left: calc(0 - var(--hax-ui-spacing-sm)); margin-right: calc(0 - var(--hax-ui-spacing-sm)); } simple-fields-tabs::part(tablist) { margin-bottom: var(--hax-ui-spacing); } simple-fields-tabs::part(tab), simple-fields-tabs::part(tab-active), simple-fields-tabs::part(tab-disabled) { border: 1px solid var(--hax-ui-border-color); text-decoration: none; border-radius: 3px; color: var(--hax-ui-color); background-color: var(--hax-ui-background-color); outline: unset; text-transform: capitalize; font-size: var(--hax-ui-font-size-sm); padding: var(--hax-ui-spacing-xs); flex: 1 1 auto; } simple-fields-tabs::part(tab-active) { color: var(--hax-ui-color-accent); } simple-fields-tabs::part(tab-disabled) { opacity: 0.5; background-color: rgba(127, 127, 127, 0.2); } simple-fields-tabs::part(content) { border: none; } simple-fields-tab { padding: 0; } simple-fields *::part(label) { text-transform: captitalize; margin: 0; } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxComponentStyles",
          "type": {
            "text": "array"
          },
          "default": "[...HaxButton, ...HaxHexagon, ...HaxFields]",
          "description": "styles that need to be in the shadowRoot of their parent"
        },
        {
          "kind": "variable",
          "name": "HaxTrayDetail",
          "type": {
            "text": "array"
          },
          "default": "[ css` #tray-detail { font-family: var(--hax-ui-font-family); --hax-tray-detail-title-font-size: var(--hax-ui-font-size-xl); --hax-tray-detail-topic-font-size: var(--hax-ui-font-size-lg); --hax-tray-detail-subtopic-font-size: var(--hax-ui-font-size); --hax-tray-detail-heading-text-transform: capitalize; --hax-tray-detail-heading-font-weight: normal; } #tray-detail h5, #tray-detail h6 { text-transform: var(--hax-tray-detail-heading-text-transform); font-weight: var(--hax-tray-detail-heading-font-weight); margin: var(--hax-ui-spacing) 0 var(--hax-ui-spacing-xs); color: var(--hax-ui-color-faded); } #tray-detail h4 { text-transform: var(--hax-tray-detail-heading-text-transform); color: white; font-size: var(--hax-tray-detail-title-font-size); font-weight: bold; font-family: var(--hax-ui-font-family); overflow: hidden; word-break: break-all; text-overflow: ellipsis; margin: 0 -8px; padding: var(--ddd-spacing-3); padding-top: var(--ddd-spacing-4); width: 100%; display: flex; align-items: center; justify-content: space-between; position: sticky; height: 36px; top: 0; z-index: 3; } #tray-detail h5 { font-size: var(--hax-tray-detail-topic-font-size); } #tray-detail h6 { font-size: var(--hax-tray-detail-subtopic-font-size); } `, ]"
        },
        {
          "kind": "variable",
          "name": "HaxTrayDetailHeadings",
          "type": {
            "text": "array"
          },
          "default": "[ css` h5 { font-size: var(--hax-tray-detail-topic-font-size); } h6 { font-size: var(--hax-tray-detail-subtopic-font-size); } h5, h6 { color: var(--hax-ui-color-faded); text-transform: var(--hax-tray-detail-heading-text-transform); font-weight: var(--hax-tray-detail-heading-font-weight); margin: var(--hax-ui-spacing-lg) 0 var(--hax-ui-spacing-xs); } `, ]"
        },
        {
          "kind": "class",
          "description": "an empty wrapper to ensure modal content has the same base styles",
          "name": "HaxUiStyles",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HaxUiText",
          "declaration": {
            "name": "HaxUiText",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiSpacing",
          "declaration": {
            "name": "HaxUiSpacing",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiColors",
          "declaration": {
            "name": "HaxUiColors",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiTooltip",
          "declaration": {
            "name": "HaxUiTooltip",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiFields",
          "declaration": {
            "name": "HaxUiFields",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiSingletons",
          "declaration": {
            "name": "HaxUiSingletons",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiBaseStyles",
          "declaration": {
            "name": "HaxUiBaseStyles",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxHexagon",
          "declaration": {
            "name": "HaxHexagon",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxButton",
          "declaration": {
            "name": "HaxButton",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxFields",
          "declaration": {
            "name": "HaxFields",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxComponentStyles",
          "declaration": {
            "name": "HaxComponentStyles",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTrayDetail",
          "declaration": {
            "name": "HaxTrayDetail",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxTrayDetailHeadings",
          "declaration": {
            "name": "HaxTrayDetailHeadings",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUiStyles",
          "declaration": {
            "name": "HaxUiStyles",
            "module": "lib/hax-ui-styles.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxUiStyles",
            "module": "lib/hax-ui-styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-upload-field.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HaxUploadField",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_canUpload"
            },
            {
              "kind": "method",
              "name": "_fileAboutToUpload",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Respond to uploading a file"
            },
            {
              "kind": "method",
              "name": "_haxAppPickerSelection",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Event for an app being selected from a picker\nThis happens when multiple upload targets support the given type"
            },
            {
              "kind": "method",
              "name": "_fileUploadResponse",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Respond to successful file upload, now inject url into url field and\ndo a gizmo guess from there!"
            },
            {
              "kind": "field",
              "name": "sources",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clickMediaButton",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "showSources",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "show-sources",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "\"on\""
            },
            {
              "kind": "field",
              "name": "__winEvents",
              "type": {
                "text": "object"
              },
              "default": "{ \"hax-app-picker-selection\": \"_haxAppPickerSelection\", //TODO }"
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ ...this.t, whereUpload: \"Where would you like to upload this\", serverStorageLocationCantHandle: \"Server storage location can't handle\", fileUploadsMustHaveAFileExtension: \"File uploads must have a file extension\", uploads: \"uploads\", dropMediaHereOr: \"drop media here or\", selectMedia: \"Select media\", upload: \"Upload\", takePhoto: \"Take photo\", recordAudio: \"Record audio\", cancel: \"Cancel\", uploadMedia: \"Upload media\", }"
            }
          ],
          "attributes": [
            {
              "name": "show-sources",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSources"
            }
          ],
          "mixins": [
            {
              "name": "winEventsElement",
              "package": "@haxtheweb/utils/utils.js"
            },
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            }
          ],
          "superclass": {
            "name": "SimpleFieldsUpload",
            "package": "@haxtheweb/simple-fields/lib/simple-fields-upload.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxUploadField",
            "module": "lib/hax-upload-field.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxUploadField",
          "declaration": {
            "name": "HaxUploadField",
            "module": "lib/hax-upload-field.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/hax-view-source.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hax-eview-source`",
          "name": "HaxViewSource",
          "members": [
            {
              "kind": "field",
              "name": "tag",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "refreshHTMLEditor",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "download",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Download file."
            },
            {
              "kind": "method",
              "name": "downloadDOCX",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Download DOCX."
            },
            {
              "kind": "method",
              "name": "downloadDOCXviaMicro",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Download DOCX, via microservice"
            },
            {
              "kind": "method",
              "name": "downloadMDviaMicro",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Download MD, via microservice"
            },
            {
              "kind": "method",
              "name": "downloadPDFviaMicro",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Download PDF, via microservice"
            },
            {
              "kind": "method",
              "name": "downloadfull",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Download file."
            },
            {
              "kind": "method",
              "name": "updateBodyFromHTML",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Import content into body area."
            },
            {
              "kind": "method",
              "name": "scrubContent",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Scrub and then import content as if pasted from Word / GDocs"
            },
            {
              "kind": "method",
              "name": "prettifyContent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "openSource",
              "description": "update content of the editor area"
            },
            {
              "kind": "method",
              "name": "revisionHistoryClick"
            },
            {
              "kind": "method",
              "name": "selectBody",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "selectBody"
            },
            {
              "kind": "method",
              "name": "htmlToHaxElements",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "HTML to HAX Elements"
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "updateEditor"
            },
            {
              "kind": "method",
              "name": "contentToFile",
              "parameters": [
                {
                  "name": "full"
                }
              ],
              "description": "Output entire thing as a file."
            },
            {
              "kind": "field",
              "name": "t",
              "type": {
                "text": "object"
              },
              "default": "{ updateHTML: \"Update HTML\", copyHTML: \"Copy HTML\", downloadContent: \"Download content\", downloadHTML: \"Download HTML\", fileDownloaded: \"File downloaded\", downloadDOCX: \"Download DOCX\", downloadMD: \"Download Markdown\", downloadPDF: \"Download PDF\", PrettifyHtml: \"Prettify HTML\", cleanFormatting: \"Clean Formatting\", haxSchema: \"HAXSchema\", revisionHistory: \"Revision history\", }"
            },
            {
              "kind": "field",
              "name": "globalPreferences",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "description": "Global preferences for HAX overall",
              "attribute": "globalPreferences"
            },
            {
              "kind": "field",
              "name": "hidden",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "hidden",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "theme",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "theme"
            }
          ],
          "attributes": [
            {
              "name": "globalPreferences",
              "type": {
                "text": "object"
              },
              "description": "Global preferences for HAX overall",
              "fieldName": "globalPreferences"
            },
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "fieldName": "hidden"
            },
            {
              "name": "theme",
              "type": {
                "text": "string"
              },
              "fieldName": "theme"
            }
          ],
          "mixins": [
            {
              "name": "I18NMixin",
              "package": "@haxtheweb/i18n-manager/lib/I18NMixin.js"
            },
            {
              "name": "MtzFileDownloadBehaviors",
              "package": "@haxtheweb/dl-behavior/dl-behavior.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hax-eview-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "HaxViewSource",
            "module": "lib/hax-view-source.js"
          }
        },
        {
          "kind": "js",
          "name": "HaxViewSource",
          "declaration": {
            "name": "HaxViewSource",
            "module": "lib/hax-view-source.js"
          }
        }
      ]
    }
  ]
}
